{"version":3,"sources":["assets/images/shared/logo.svg","containers/ColorModeSwitcher/ColorModeSwitcher.tsx","components/templates/ChakraButtons/ChakraButtons.tsx","../../shared/helpers/processors/obj-processor.ts","../../shared/types/cs-msgs/cs-msg-ciphers.ts","../../shared/types/cs-msgs/msgs/cs-conn-to-sess.ts","../../shared/types/cs-msgs/msgs/cs-create-sess.ts","../../shared/types/user/user-role.ts","../../shared/knownLoadsKeys.ts","../../shared/helpers/processors/purify.ts","modules/Routes/routesData.ts","../../shared/knownErrorsKeys.ts","../../shared/types/cs-msgs/msgs/cs-disconn-from-sess.ts","../../shared/types/cs-msgs/msgs/dealer/cs-start-game.ts","../../shared/types/sc-msgs/sc-msg-ciphers.ts","redux/slices/errors.ts","redux/slices/loads.ts","../../shared/initStates.ts","../../shared/types/cs-msgs/msgs/dealer/cs-msg-update-state.ts","redux/slices/session.ts","../../shared/types/session/state/stages.ts","modules/ServerAdapter/ServerAdapter.ts","redux/slices/connect.ts","redux/slices/home-page.ts","locales/locale-us.ts","redux/slices/locale.ts","redux/slices/mockSession.ts","redux/slices/settings.ts","redux/slices/userInfo.ts","redux/store.ts","../../shared/types/session/round/round-state.ts","hooks/UseSessionData/UseSessionData.tsx","components/GameControlButtons/GameControlButtons.tsx","../../shared/types/user/user-state.ts","components/UserCard/UserCard.tsx","components/DealerPlate/DealerPlate.tsx","components/Loader/ChakraLoader.tsx","containers/EdidableHeader/EditableHeader.tsx","components/KickModal/KickModal.tsx","containers/UserCards/UserCardsView.tsx","../../shared/const.ts","containers/UserCards/UserCards.tsx","components/IssueCard/IssueCard.tsx","components/IssueModal/IssueModal.tsx","components/NewIssueButton/NewIssueButton.tsx","containers/IssuesCards/IssuesCardsView.tsx","../../shared/types/session/issue/issue-priority.ts","containers/IssuesCards/IssuesCards.tsx","components/Switcher/Switcher.tsx","components/InputText/InputText.tsx","components/InputNumber/InputNumber.tsx","containers/Timer/Timer.tsx","components/GameCard/GameCard.tsx","hooks/useImgConvertor.tsx","modules/HomePage/components/avatar-form/avatar-form.tsx","hooks/useImgLoader.tsx","constants.ts","components/GameCardModal/GameCardModal.tsx","components/NewGameCardButton/NewGameCardButton.tsx","containers/GameCards/GameCardsView.tsx","containers/GameCards/GameCards.tsx","containers/Settings/Settings.tsx","containers/JoinGameLink/JoinGameLink.tsx","modules/Lobby/Lobby.tsx","modules/HomePage/assets/images/poker-planing.png","modules/HomePage/components/main-page/main-page.tsx","modules/HomePage/components/radio-buttons/radio-card.tsx","modules/HomePage/components/radio-buttons/radio-buttons.tsx","modules/HomePage/components/inputs-stack/inputs-stack.tsx","modules/HomePage/components/popup/popup.tsx","modules/HomePage/HomePage.tsx","modules/Game/Game.tsx","modules/Routes/templateRoutesData.ts","components/templates/Alerts/Alerts.tsx","components/Logo/logo.svg","components/Logo/Logo.tsx","components/templates/Animation/ChakraAnimation.tsx","components/templates/AlertDialog/ChakraAlertDialog.tsx","hooks/useLocale.ts","components/templates/Modal/ChakraModal.tsx","components/templates/Avatar/ChakraAvatar.tsx","components/templates/EditableText/ChakraEditableText.tsx","components/templates/Button/Button.tsx","containers/ComponentsExamples/Buttons/ButtonsExampleView.tsx","containers/ComponentsExamples/Buttons/ButtonsExample.tsx","modules/Header/templatesLinks.ts","modules/Header/drawer.tsx","modules/Header/Header.tsx","knownErrors.ts","containers/ErrorsMUX/ErrorsPages/NoConnectionToServerPage/NoConnectionToServerPage.tsx","containers/ErrorsMUX/ErrorsPages/GenericErrorPage/GenericErrorPage.tsx","containers/ErrorsMUX/ErrorsMUX.tsx","knownLoads.ts","containers/LoadsMUX/LoadsPages/GenericLoadPage/GenericLoadPage.tsx","containers/LoadsMUX/LoadsMUX.tsx","hooks/useRouterController.tsx","modules/Routes/Routes.tsx","modules/Footer/Footer.tsx","theme.ts","modules/ServerBoundary/ServerBoundary.tsx","modules/App/App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","ChakraButtons","templateColumns","gap","justifyItems","direction","align","spacing","colorScheme","isLoading","loadingText","spinnerPlacement","width","display","justifyContent","padding","OBJ_PROCESSOR","deepFreeze","obj","record","Object","keys","forEach","prop","isFrozen","freeze","Error","deepCloneForWebworker","target","Array","isArray","clone","v","push","map","n","k","setPrototypeOf","getPrototypeOf","deepClone","HTMLElement","cloneNode","Blob","slice","CSMSG_CIPHERS","CREATE_SESS","CONN_TO_SESS","DISCONN_FROM_SESS","CHAT_MSG","VOTEKICK","START_GAME","START_ROUND","RESTART_ROUND","STOP_ROUND","UPDATE_SESSION_STATE","FORCE_KICK","PICK","NEXT_ISSUE","END_GAME","CSMsgConnToSess","query","cipher","CSMsgCreateSession","USER_ROLES","DEALER","PLAYER","SPECTATOR","KNOWN_LOADS_KEYS","UNEXPECTED_REDIRECT_TO_LOAD","CONNECTING_TO_SERVER","SESSION_STAGE_CHANGE","CONNECTING_TO_LOBBY","browser","undefined","window","RoutesPath","purify","purifyInBrowser","thing","Node","DOMPurify","sanitize","entries","entry","KNOWN_ERRORS_KEYS","NO_CONNECTION_TO_SERVER","FAILED_TO_SEND_MSG_TO_SERVER","UNEXPECTED_REDIRECT_TO_ERROR","SC_PROTOCOL_ERROR","SC_ALREADY_CONNECTED_TO_SESSION","SESSION_DOES_NOT_EXIST","UNKNOWN_ERROR","CSMsgDisconFromSess","CSMsgStartGame","SCMSG_CIPHERS","CONN_TO_SESS_STATUS","MEMBERS_CHANGED","VOTEKICK_RESPONSE","VOTEKICK_RESULT","errorsSlice","createSlice","name","initialState","reducers","setErrorByKey","state","action","payload","removeError","actions","loadsSlice","setLoadByKey","key","timeout","removeLoad","setGLoadByKey","createAsyncThunk","args","thunkAPI","a","setTimeout","getState","loads","loadKey","dispatch","errorKey","defaultSettings","dealerAsPlayer","changingCardInRoundEnd","isTimerNeeded","scoreType","scoreTypeShort","roundTime","cards","value","base64","cardBackType","SESSION_INIT_STATE","sessionId","stage","isSynced","members","currentGameSettings","chat","msgs","issues","list","SESSION_CLIENT_INIT_STATE","clientId","sampleMember","userInfo","surname","jobPosition","avatarBgColor","userSessionPublicId","userRole","userState","SESSION_TESTING_STATE","CSMsgUpdateState","update","setSynced","synced","sessionSlice","dang_updSessStateFromClient","assign","dang_updSessStateFromServer","purified","dang_reset","updSessState","msg","SERVER_ADAPTER","send","SESSION_STAGES","LOBBY","EMPTY","GAME","STATS","updateState","apiUrl","ws","obeyTheServer","e","parsed","JSON","parse","data","console","log","handleConnToSessStatus","handleChatMsg","takeoffLoadBySessStateUpdate","store","handleMembersChanged","err","handleSendError","stringify","exitGame","startGame","response","success","yourId","fail","reason","session","id","member","newMembers","this","removeEventListener","onopen","onerror","onclose","addEventListener","setServerConnectionStatus","Promise","res","resFalse","handleWSErrorOrClose","WebSocket","handleWSOpen","finally","serverConnectionStatus","connectToLobby","info","role","sessId","homePage","lobbyURL","createSession","settings","connectSlice","setSessionConnectionStatus","sessionConnectionStatus","homePageSlice","setLobbyURL","LOCALE_US","SESSION_DEALER_KICK_CONFIRMATION_POPUP_BODY","APP_SERVER_CONNECTION_STATUS_TOAST_TITLE","APP_SERVER_CONNECTION_STATUS_TOAST_DESC","KICK_PLAYER_MODAL_TEXT_START","KICK_PLAYER_MODAL_TEXT_FINISH","SETTINGS_IS_DEALER_PLAYER","SETTINGS_OPEN_CARDS_ON_ROUND_END","SETTINGS_IS_TIMER_ON","SETTINGS_SCORE_TYPE","SETTINGS_SCORE_TYPE_SHORT","SETTINGS_CARDS_HEADER","SETTINGS_CARDS_MODAL_CUSTOM","localeSlice","setLocale","mockSessionSlice","setSessionStatus","setSessionId","setSessionName","addIssue","editedIssue","find","issue","issueIndex","indexOf","deleteIssue","splice","settingsSlice","setSettings","userInfoSlice","avatarBase64","changeName","changeSurname","changeJobPosition","changeAvatarBase64","changeAvatarBgColor","configureStore","reducer","locale","errors","connect","mockSession","devTools","process","useAppDispatch","useDispatch","useTypedSelector","useSelector","ROUND_STATES","AWAIT_START","IN_PROCESS","ENDED","UseSessionData","sessionData","useState","newIssueId","setNewIssueId","findIssueIndex","dealerInfo","isPlayerDealer","isItYou","isRoundStarted","game","roundState","sessionNameData","changeValue","newName","dealerData","membersData","findWhoIsUser","issuesData","addNewIssue","removeIssue","settingsData","setGameSettings","GameControlButtons","w","justify","visibility","USER_STATES","CONNECTED","DISCONNECTED","KICKED","UserCard","kickPlayer","fullName","isKickShown","p","boxShadow","bg","src","borderColor","boxSize","as","mb","background","DealerPlate","ChakraLoader","position","top","left","right","bottom","thickness","speed","emptyColor","EditableHeader","useDisclosure","isOpen","onOpen","onClose","topicView","setTopicView","opacity","maxW","isTruncated","textAlign","startWithEditView","onChange","d","KickModal","modalData","onConfirm","initiatorName","closeOnOverlayClick","UserCardsView","cardsData","setMemberData","wrap","UserCards","kickedName","setKickedName","kickedId","setKickedId","userCardsData","IssueCard","openModal","title","priority","Close","IssueModal","issueData","activeIssue","changeIssue","link","setIssueData","input","isRequired","placeholder","htmlFor","NewIssueButton","editIssue","cursor","IssueCardsView","modal","ISSUE_PRIORITIES","LOW","MEDIUM","HIGH","IssuesCards","newIssue","closed","setActiveIssue","issueId","findIssue","Switcher","label","alignItems","isChecked","checked","InputText","border","InputNumber","defaultvalue","units","defaultValue","min","max","fontWeight","Timer","time","minutes","Math","trunc","seconds","shadow","height","GameCard","card","edit","deleteCard","fontStyle","getBase64","canvas","toBlob","getBlobPromise","then","blob","reader","FileReader","onloadend","result","onabort","readAsDataURL","convert","canvasRef","opts","rej","img","Image","onload","current","h","sx","sy","sWidth","sHeight","calcDrawParams","getContext","drawImage","drawImgToCanvas","catch","AvatarForm","useRef","useEffect","div","document","createElement","ReactDOM","render","createPortal","ref","bind","useImgConvertor","loadImg","type","click","file","files","GameCardModal","activeCard","changeCardValue","setCard","event","NewGameCardButton","_hover","ImPlus","IssueCardView","GameCards","toast","useToast","setLocalSettings","newGameCard","editedCardIndex","setEditedCardIndex","setActiveCard","findEditedCard","cardValue","editedCard","CardWithSameValue","cardsCopy","indexOfCardWithSameValue","sort","s","t","localeCompare","status","duration","isClosable","cardIndex","GameCardsView","Settings","localSettings","switchersData","inputsData","switcherData","inputData","JoinGameLink","useClipboard","hasCopied","onCopy","m","mr","pr","Lobby","minH","location","MainPage","onPopupCalled","gridGap","pokerPlaning","alt","fit","RadioCard","useRadio","getInputProps","getCheckboxProps","checkbox","borderWidth","borderRadius","_checked","_focus","py","children","options","RadioButtons","useRadioGroup","getRootProps","getRadioProps","group","radio","InputsStack","handleChange","ConnectPopup","forDealer","motionPreset","onOverlayClick","isCentered","HomePage","dealer","setDealer","forRole","Game","TemplateRoutesPath","routes","path","ROOT","isExact","Component","Alerts","description","spin","keyframes","Logo","forwardRef","animation","usePrefersReducedMotion","logo","ChakraAnimation","pointerEvents","href","rel","ChakraAlertDialog","cancelRef","leastDestructiveRef","ml","ChakraModal","ChakraAvatar","ChakraEditableText","ActionButton","isCofirmButton","ButtonsExampleView","buttonData","ActionButtonExample","setIsLoading","isCancelling","setIsCancelling","actionButtonData","cancelButtonData","templatesRoutes","ANIMATION","ALERTS","ALERT_DIALOG","BUTTONS","MODAL","AVATAR","LOADER","EDITABLE","BUTTONS_EXAMPLE","templatesLinks","SETTINGS","CARDS","HeaderDevDrawer","placement","linkData","className","exact","strict","to","Header","px","fontFamily","maxH","justifySelf","Chat","KNOWN_ERRORS","GenericErrorPage","history","useHistory","error","reload","ErrorsMUX","errorKeys","keyWitchComponent","KNOWN_LOADS","GenericLoadPage","isIndeterminate","LoadsMUX","useRouterController","useLocation","sessionState","pathname","requiredPathBySession","params","sessionStage","startsWith","lobbyId","split","length","usePathParser","useLayoutEffect","newLocation","TRANSITION","Routes","nodeRef","css","SwitchTransition","CSSTransition","addEndListener","done","classNames","enter","enterActive","transition","exit","exitActive","route","Footer","theme","extendTheme","fonts","handwrite","ServerBoundary","executePreRender","setExecutePreRender","App","templateRows","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","hostname","match","StrictMode","basename","BASENAME","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5b058cf9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.b11630f2.svg\";","import * as React from 'react';\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, 'aria-label'>;\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  );\n};\n","import React from 'react';\n\nimport {\n  Stack,\n  CloseButton,\n  Button,\n  ButtonGroup,\n  Grid,\n} from '@chakra-ui/react';\n\nconst ChakraButtons = (): JSX.Element => {\n  return (\n    <Grid templateColumns=\"repeat(1, 1fr)\" gap={10} justifyItems=\"center\">\n      <Stack direction=\"row\" align=\"center\" spacing={5}>\n        <CloseButton size=\"sm\" />\n        <CloseButton size=\"md\" />\n        <CloseButton size=\"lg\" />\n      </Stack>\n      <Stack spacing={5} direction=\"row\" align=\"center\">\n        <Button colorScheme=\"teal\" size=\"xs\">\n          Button\n        </Button>\n        <Button colorScheme=\"teal\" size=\"sm\">\n          Button\n        </Button>\n        <Button colorScheme=\"teal\" size=\"md\">\n          Button\n        </Button>\n        <Button colorScheme=\"teal\" size=\"lg\">\n          Button\n        </Button>\n      </Stack>\n      <Stack direction=\"row\" spacing={5} align=\"center\">\n        <Button colorScheme=\"teal\" variant=\"solid\">\n          Button\n        </Button>\n        <Button colorScheme=\"teal\" variant=\"outline\">\n          Button\n        </Button>\n        <Button colorScheme=\"teal\" variant=\"ghost\">\n          Button\n        </Button>\n        <Button colorScheme=\"teal\" variant=\"link\">\n          Button\n        </Button>\n      </Stack>\n      <Stack direction=\"row\" spacing={5} align=\"center\">\n        <Button isLoading colorScheme=\"teal\" variant=\"solid\">\n          Email\n        </Button>\n        <Button\n          isLoading\n          loadingText=\"Loading\"\n          colorScheme=\"teal\"\n          variant=\"outline\"\n          spinnerPlacement=\"start\"\n        >\n          Submit\n        </Button>\n        <Button\n          isLoading\n          loadingText=\"Loading\"\n          colorScheme=\"teal\"\n          variant=\"outline\"\n          spinnerPlacement=\"end\"\n        >\n          Continue\n        </Button>\n      </Stack>\n      <ButtonGroup\n        colorScheme=\"facebook\"\n        width=\"28%\"\n        display=\"flex\"\n        justifyContent=\"space-between\"\n      >\n        <Button padding=\"0 50px\">Confirm</Button>\n        <Button padding=\"0 50px\" variant=\"outline\">\n          Cancel\n        </Button>\n      </ButtonGroup>\n    </Grid>\n  );\n};\n\nexport default ChakraButtons;\n","declare const TARGET_PLATFORM: string;\n\nclass ObjProcessor {\n  readonly deepFreeze = <T>(obj: T): T => {\n    if (typeof obj === 'object' && obj !== null) {\n      const record = obj as Record<string, unknown>;\n      Object.keys(record).forEach(prop => {\n        if (\n          typeof record[prop] === 'object' &&\n          !Object.isFrozen(record[prop])\n        ) {\n          this.deepFreeze(record[prop]);\n        }\n      });\n\n      return Object.freeze(obj);\n    }\n    throw new Error('not object');\n  };\n\n  readonly deepCloneForWebworker = <T>(target: T): T => {\n    if (Array.isArray(target)) {\n      const clone = [] as unknown[];\n      (target as unknown[]).forEach(v => {\n        clone.push(v);\n      });\n\n      return clone.map((n: unknown) =>\n        this.deepCloneForWebworker(n),\n      ) as unknown as T;\n    }\n\n    if (typeof target === 'object' && target !== null) {\n      const clone = {\n        ...(target as unknown as { [key: string]: unknown }),\n      } as {\n        [key: string]: unknown;\n      };\n      Object.keys(clone).forEach(k => {\n        clone[k] = this.deepCloneForWebworker(clone[k]);\n      });\n      Object.setPrototypeOf(clone, Object.getPrototypeOf(target));\n\n      return clone as unknown as T;\n    }\n\n    return target;\n  };\n\n  readonly deepClone =\n    TARGET_PLATFORM === 'node' || TARGET_PLATFORM === 'webworker'\n      ? this.deepCloneForWebworker\n      : <T>(target: T): T => {\n          if (Array.isArray(target)) {\n            const clone = [] as unknown[];\n            (target as unknown[]).forEach(v => {\n              clone.push(v);\n            });\n\n            return clone.map((n: unknown) => this.deepClone(n)) as unknown as T;\n          }\n\n          if (typeof target === 'object' && target !== null) {\n            if (target instanceof HTMLElement)\n              return target.cloneNode(true) as unknown as T;\n\n            if (target instanceof Blob) return target.slice() as unknown as T;\n            const clone = {\n              ...(target as unknown as { [key: string]: unknown }),\n            } as {\n              [key: string]: unknown;\n            };\n            Object.keys(clone).forEach(k => {\n              clone[k] = this.deepClone(clone[k]);\n            });\n            Object.setPrototypeOf(clone, Object.getPrototypeOf(target));\n\n            return clone as unknown as T;\n          }\n\n          return target;\n        };\n}\n\nconst OBJ_PROCESSOR = new ObjProcessor();\nOBJ_PROCESSOR.deepFreeze(OBJ_PROCESSOR);\nexport { OBJ_PROCESSOR };\n","import { OBJ_PROCESSOR } from '../../helpers/processors/obj-processor';\n\nclass CSMsgCiphers {\n  readonly CREATE_SESS = 'CREATE_SESS';\n\n  readonly CONN_TO_SESS = 'CONN_TO_SESS';\n\n  readonly DISCONN_FROM_SESS = 'DISCONN_FROM_SESS';\n\n  readonly CHAT_MSG = 'CHAT_MSG';\n\n  readonly VOTEKICK = 'VOTEKICK';\n\n  readonly START_GAME = 'START_GAME';\n\n  readonly START_ROUND = 'START_ROUND';\n\n  readonly RESTART_ROUND = 'RESTART_ROUND';\n\n  readonly STOP_ROUND = 'STOP_ROUND';\n\n  readonly UPDATE_SESSION_STATE = 'UPDATE_SESSION_STATE';\n\n  readonly FORCE_KICK = 'FORCE_KICK';\n\n  readonly PICK = 'PICK';\n\n  readonly NEXT_ISSUE = 'NEXT_ISSUE';\n\n  readonly END_GAME = 'END_GAME';\n}\n\nexport const CSMSG_CIPHERS = OBJ_PROCESSOR.deepFreeze(new CSMsgCiphers());\n\nexport type CSMsgCipher = keyof CSMsgCiphers;\n","import { UserInfo } from '../../user/user-info';\nimport { UserRole } from '../../user/user-role';\nimport { CSMsg } from '../cs-msg';\nimport { CSMSG_CIPHERS } from '../cs-msg-ciphers';\n\nexport class CSMsgConnToSess implements CSMsg {\n  readonly cipher = CSMSG_CIPHERS.CONN_TO_SESS;\n\n  constructor(\n    readonly query: {\n      readonly sessId: string;\n      readonly info: UserInfo;\n      readonly role: UserRole;\n    },\n  ) {}\n}\n","import { ISettings } from '../../settings';\nimport { UserInfo } from '../../user/user-info';\nimport { CSMsg } from '../cs-msg';\nimport { CSMSG_CIPHERS } from '../cs-msg-ciphers';\n\nexport class CSMsgCreateSession implements CSMsg {\n  readonly cipher = CSMSG_CIPHERS.CREATE_SESS;\n\n  constructor(\n    readonly query: {\n      readonly userInfo: UserInfo;\n      readonly settings: ISettings;\n    },\n  ) {}\n}\n","import { OBJ_PROCESSOR } from '../../helpers/processors/obj-processor';\n\nclass UserRoles {\n  readonly DEALER = 'DEALER';\n\n  readonly PLAYER = 'PLAYER';\n\n  readonly SPECTATOR = 'SPECTATOR';\n}\n\nexport const USER_ROLES = OBJ_PROCESSOR.deepFreeze(new UserRoles());\n\nexport type UserRole = keyof UserRoles;\n","import { OBJ_PROCESSOR } from './helpers/processors/obj-processor';\n\nclass knownLoadsKeys {\n  readonly UNEXPECTED_REDIRECT_TO_LOAD = 'UNEXPECTED_REDIRECT_TO_LOAD';\n\n  readonly CONNECTING_TO_SERVER = 'CONNECTING_TO_SERVER';\n\n  readonly SESSION_STAGE_CHANGE = 'SESSION_STAGE_CHANGE';\n\n  readonly CONNECTING_TO_LOBBY = 'CONNECTING_TO_LOBBY';\n}\n\nexport const KNOWN_LOADS_KEYS = OBJ_PROCESSOR.deepFreeze(new knownLoadsKeys());\n\nexport type KnownLoadKey = keyof knownLoadsKeys;\n","import DOMPurify from 'dompurify';\n\n// ! TODO (no95typem)  - not working on the server\n\nexport const purifyInNode = <T>(thing: T): T => thing;\n\nexport const purifyInBrowser = <T>(thing: T): T => {\n  if (typeof thing === 'string' || thing instanceof Node)\n    return DOMPurify.sanitize(thing) as unknown as T;\n\n  if (typeof thing === 'object' && thing !== null) {\n    const record = thing as Record<string, unknown>;\n    Object.entries(record).forEach(entry => {\n      record[entry[0]] = purifyInBrowser(entry[1]);\n    });\n  }\n\n  return thing;\n};\n\nlet browser = undefined;\n\ntry {\n  browser = !!window?.window;\n} catch {\n  browser = false;\n}\n\nexport const purify = browser ? purifyInBrowser : purifyInNode;\n","import ChakraButtons from '../../components/templates/ChakraButtons/ChakraButtons';\nimport Lobby from '../Lobby/Lobby';\nimport HomePage from '../HomePage/HomePage';\nimport Game from '../Game/Game';\n\nexport interface IRoute {\n  key: string;\n  path: string;\n  isExact: boolean;\n  Component: React.FunctionComponent | React.ComponentClass;\n}\n\nexport enum RoutesPath {\n  ROOT = '/',\n  LOBBY = '/session/:id/lobby',\n  GAME = '/session/:id/game',\n  STATS = '/session/:id/stats',\n  ERROR = '/error',\n  LOADING = '/loading',\n}\n\nconst routes: IRoute[] = [\n  {\n    key: 'routeRoot',\n    path: RoutesPath.ROOT,\n    isExact: true,\n    Component: HomePage, //Заглушка, заменяем своими компонентами по мере готовности\n  },\n  {\n    key: 'routeLobby',\n    path: RoutesPath.LOBBY,\n    isExact: true,\n    Component: Lobby,\n  },\n  {\n    key: 'routeGame',\n    path: RoutesPath.GAME,\n    isExact: true,\n    Component: Game,\n  },\n  {\n    key: 'routeStats',\n    path: RoutesPath.STATS,\n    isExact: true,\n    Component: ChakraButtons, //Заглушка, заменяем своими компонентами по мере готовности\n  },\n];\n\nexport default routes;\n","import { OBJ_PROCESSOR } from './helpers/processors/obj-processor';\n\nclass knownErrorsKeys {\n  readonly NO_CONNECTION_TO_SERVER = 'NO_CONNECTION_TO_SERVER';\n\n  readonly FAILED_TO_SEND_MSG_TO_SERVER = 'FAILED_TO_SEND_MSG_TO_SERVER';\n\n  readonly UNEXPECTED_REDIRECT_TO_ERROR = 'UNEXPECTED_REDIRECT_TO_ERROR';\n\n  readonly SC_PROTOCOL_ERROR = 'SC_PROTOCOL_ERROR';\n\n  readonly SC_ALREADY_CONNECTED_TO_SESSION = 'SC_ALREADY_CONNECTED_TO_SESSION';\n\n  readonly SESSION_DOES_NOT_EXIST = 'SESSION_DOES_NOT_EXIST';\n\n  readonly UNKNOWN_ERROR = 'UNKNOWN_ERROR';\n}\n\nexport const KNOWN_ERRORS_KEYS = OBJ_PROCESSOR.deepFreeze(\n  new knownErrorsKeys(),\n);\n\nexport type KnownErrorsKey = keyof knownErrorsKeys;\n","import { CSMsg } from '../cs-msg';\nimport { CSMSG_CIPHERS } from '../cs-msg-ciphers';\n\nexport class CSMsgDisconFromSess implements CSMsg {\n  readonly cipher = CSMSG_CIPHERS.DISCONN_FROM_SESS;\n}\n","import { CSMsg } from '../../cs-msg';\nimport { CSMSG_CIPHERS } from '../../cs-msg-ciphers';\n\nexport class CSMsgStartGame implements CSMsg {\n  readonly cipher = CSMSG_CIPHERS.START_GAME;\n}\n","import { OBJ_PROCESSOR } from '../../helpers/processors/obj-processor';\n\nclass SCMsgCiphers {\n  readonly CHAT_MSG = 'CHAT_MSG';\n\n  readonly CONN_TO_SESS_STATUS = 'CONN_TO_SESS_STATUS';\n\n  readonly MEMBERS_CHANGED = 'MEMBERS_CHANGED';\n\n  readonly UPDATE_SESSION_STATE = 'UPDATE_SESSION_STATE';\n\n  readonly VOTEKICK = 'VOTEKICK';\n\n  readonly VOTEKICK_RESPONSE = 'VOTEKICK_RESPONSE';\n\n  readonly VOTEKICK_RESULT = 'VOTEKICK_RESULT';\n\n  readonly FORCE_KICK = 'FORCE_KICK';\n}\n\nexport const SCMSG_CIPHERS = OBJ_PROCESSOR.deepFreeze(new SCMsgCiphers());\n\nexport type SCMsgCipher = keyof SCMsgCiphers;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { KnownErrorsKey } from '../../../../shared/knownErrorsKeys';\n\nconst initialState: Partial<Record<KnownErrorsKey, unknown>> = {};\n\nexport const errorsSlice = createSlice({\n  name: 'errors',\n  initialState,\n  reducers: {\n    setErrorByKey(state, action: PayloadAction<KnownErrorsKey>) {\n      state[action.payload] = action.payload;\n    },\n    removeError(state, action: PayloadAction<KnownErrorsKey>) {\n      delete state[action.payload];\n    },\n  },\n});\n\nexport const { setErrorByKey, removeError } = errorsSlice.actions;\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport {\n  KnownErrorsKey,\n  KNOWN_ERRORS_KEYS,\n} from '../../../../shared/knownErrorsKeys';\nimport { KnownLoadKey } from '../../../../shared/knownLoadsKeys';\nimport { RootState } from '../store';\nimport { setErrorByKey } from './errors';\n\nconst initialState: Partial<Record<KnownLoadKey, NodeJS.Timeout>> = {};\n\nexport const loadsSlice = createSlice({\n  name: 'loads',\n  initialState,\n  reducers: {\n    setLoadByKey(\n      state,\n      action: PayloadAction<{\n        key: KnownLoadKey;\n        timeout: NodeJS.Timeout;\n      }>,\n    ) {\n      state[action.payload.key] = action.payload.timeout;\n    },\n    removeLoad(state, action: PayloadAction<KnownLoadKey>) {\n      delete state[action.payload];\n    },\n  },\n});\n\nexport interface ISetGLoadByKeyArgs {\n  loadKey: KnownLoadKey;\n  errorKey?: KnownErrorsKey;\n}\n\nexport const setGLoadByKey = createAsyncThunk(\n  'loads/setGLoadByKey',\n  async (args: ISetGLoadByKeyArgs, thunkAPI) => {\n    const timeout = setTimeout(() => {\n      const state = thunkAPI.getState() as RootState;\n\n      if (state.loads[args.loadKey] === timeout) {\n        thunkAPI.dispatch(\n          setErrorByKey(args.errorKey || KNOWN_ERRORS_KEYS.UNKNOWN_ERROR),\n        );\n      }\n    }, 30_000);\n\n    thunkAPI.dispatch(\n      loadsSlice.actions.setLoadByKey({ key: args.loadKey, timeout }),\n    );\n  },\n);\n\nexport const { removeLoad } = loadsSlice.actions;\n","import { OBJ_PROCESSOR } from './helpers/processors/obj-processor';\nimport { CardData } from './types/session/card';\nimport { Member } from './types/session/member';\nimport {\n  ISessionStateClient,\n  SessionState,\n} from './types/session/state/session-state';\nimport { ISettings } from './types/settings';\nimport { USER_ROLES } from './types/user/user-role';\n\nconst testCardsData: CardData[] = [\n  //тестовый объект, отладка\n  { value: '1' },\n  { value: '2' },\n  { value: '3' },\n  { value: 'Unknown', base64: '<img>' },\n];\n\nexport const defaultSettings: ISettings = {\n  dealerAsPlayer: true,\n  changingCardInRoundEnd: false,\n  isTimerNeeded: true,\n  scoreType: 'story points',\n  scoreTypeShort: 'SP',\n  roundTime: 140,\n  cards: testCardsData, //placeholder\n  cardBackType: '',\n};\n\nconst SESSION_INIT_STATE: SessionState = {\n  sessionId: '',\n  stage: 'LOBBY',\n  name: { value: 'unnamed pp session', isSynced: true },\n  members: {},\n  currentGameSettings: defaultSettings,\n  chat: {\n    msgs: {},\n  },\n  issues: {\n    isSynced: true,\n    list: [],\n  },\n};\n\nexport const CREATE_INIT_STATE = () =>\n  OBJ_PROCESSOR.deepClone(SESSION_INIT_STATE);\n\nexport const SESSION_CLIENT_INIT_STATE: ISessionStateClient = {\n  ...SESSION_INIT_STATE,\n  clientId: 0,\n  stage: 'EMPTY',\n};\n\n//Временные переменые, исключительно для отладки.\n\nconst sampleMember: Member = {\n  userInfo: {\n    name: 'John',\n    surname: 'Smith',\n    jobPosition: 'senior',\n    avatarBgColor: 'green',\n  },\n  userSessionPublicId: 0,\n  userRole: USER_ROLES.DEALER,\n  userState: 'CONNECTED',\n  isSynced: true,\n};\n\nexport const SESSION_TESTING_STATE: ISessionStateClient = {\n  sessionId: '12345',\n  clientId: 0,\n  name: { value: 'Session 12345', isSynced: false },\n  stage: 'LOBBY',\n  members: {\n    0: sampleMember,\n    1: {\n      ...sampleMember,\n      userInfo: {\n        ...sampleMember.userInfo,\n        name: 'Alex',\n        surname: 'Sandler',\n        avatarBgColor: 'red',\n      },\n      userRole: 'PLAYER',\n      userSessionPublicId: 1,\n    },\n    2: {\n      ...sampleMember,\n      userInfo: {\n        ...sampleMember.userInfo,\n        name: 'Kerri',\n        surname: 'Riz',\n        avatarBgColor: 'black',\n      },\n      userRole: 'PLAYER',\n      userSessionPublicId: 2,\n    },\n  },\n  currentGameSettings: defaultSettings,\n  chat: {\n    msgs: {},\n  },\n  issues: {\n    list: [],\n    isSynced: true,\n  },\n};\n","import { SessionState } from '../../../session/state/session-state';\nimport { CSMsg } from '../../cs-msg';\nimport { CSMSG_CIPHERS } from '../../cs-msg-ciphers';\n\nexport class CSMsgUpdateState implements CSMsg {\n  readonly cipher = CSMSG_CIPHERS.UPDATE_SESSION_STATE;\n\n  constructor(readonly update: Partial<SessionState>) {}\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport {\n  ISessionStateClient,\n  SessionState,\n} from '../../../../shared/types/session/state/session-state';\n\nimport { SESSION_CLIENT_INIT_STATE } from '../../../../shared/initStates';\nimport { Synchronized } from '../../../../shared/types/syncable';\nimport { purify } from '../../../../shared/helpers/processors/purify';\nimport { CSMsgUpdateState } from '../../../../shared/types/cs-msgs/msgs/dealer/cs-msg-update-state';\nimport { SERVER_ADAPTER } from '../../modules/ServerAdapter/ServerAdapter';\n\nconst initialState = SESSION_CLIENT_INIT_STATE;\n\nconst setSynced = <T>(thing: T, synced: boolean): T => {\n  if (typeof thing === 'object' && thing !== null) {\n    Object.entries(thing).forEach(entry => {\n      (thing as Record<string, unknown>)[entry[0]] = setSynced(\n        entry[1],\n        synced,\n      );\n    });\n\n    if ('isSynced' in thing)\n      (thing as unknown as Synchronized).isSynced = synced;\n  }\n\n  return thing;\n};\n\nexport const sessionSlice = createSlice({\n  name: 'session',\n  initialState,\n  reducers: {\n    dang_updSessStateFromClient(\n      state,\n      action: PayloadAction<Partial<ISessionStateClient>>,\n    ) {\n      Object.assign(state, action.payload);\n    },\n    dang_updSessStateFromServer(\n      state,\n      action: PayloadAction<Partial<ISessionStateClient>>,\n    ) {\n      const purified = purify(action.payload);\n\n      const synced = setSynced(purified, true);\n\n      Object.assign(state, synced);\n    },\n    dang_reset(state) {\n      Object.keys(state).forEach(key => {\n        delete (state as Record<string, unknown>)[key];\n      });\n      Object.assign(state, initialState);\n    },\n  },\n});\n\nexport const updSessState = createAsyncThunk(\n  'session/updSessState',\n  async (update: Partial<SessionState>, thunkAPI) => {\n    const synced = setSynced(update, false);\n    thunkAPI.dispatch(sessionSlice.actions.dang_updSessStateFromClient(synced));\n\n    const msg = new CSMsgUpdateState(update);\n\n    SERVER_ADAPTER.send(msg);\n  },\n);\n","import { OBJ_PROCESSOR } from '../../../helpers/processors/obj-processor';\n\nclass SessionStages {\n  readonly LOBBY = 'LOBBY';\n\n  readonly EMPTY = 'EMPTY';\n\n  readonly GAME = 'GAME';\n\n  readonly STATS = 'STATS';\n}\n\nexport const SESSION_STAGES = OBJ_PROCESSOR.deepFreeze(new SessionStages());\n\nexport type SessionStage = keyof SessionStages;\n","import { OBJ_PROCESSOR } from '../../../../shared/helpers/processors/obj-processor';\nimport { purify } from '../../../../shared/helpers/processors/purify';\nimport {\n  KnownErrorsKey,\n  KNOWN_ERRORS_KEYS,\n} from '../../../../shared/knownErrorsKeys';\nimport { CSMsg } from '../../../../shared/types/cs-msgs/cs-msg';\nimport { CSMSG_CIPHERS } from '../../../../shared/types/cs-msgs/cs-msg-ciphers';\nimport { CSMsgDisconFromSess } from '../../../../shared/types/cs-msgs/msgs/cs-disconn-from-sess';\nimport { CSMsgUpdateState } from '../../../../shared/types/cs-msgs/msgs/dealer/cs-msg-update-state';\nimport { CSMsgStartGame } from '../../../../shared/types/cs-msgs/msgs/dealer/cs-start-game';\nimport { SCMsgChatMsgsChanged } from '../../../../shared/types/sc-msgs/msgs/sc-msg-chat-msgs-changed';\nimport { SCMsgConnToSessStatus } from '../../../../shared/types/sc-msgs/msgs/sc-msg-conn-to-sess-status';\nimport { SCMsgMembersChanged } from '../../../../shared/types/sc-msgs/msgs/sc-msg-members-changed';\nimport { SCMsg } from '../../../../shared/types/sc-msgs/sc-msg';\nimport { SCMSG_CIPHERS } from '../../../../shared/types/sc-msgs/sc-msg-ciphers';\nimport { Member } from '../../../../shared/types/session/member';\nimport { KNOWN_LOADS_KEYS } from '../../../../shared/knownLoadsKeys';\nimport { setServerConnectionStatus } from '../../redux/slices/connect';\nimport { removeError, setErrorByKey } from '../../redux/slices/errors';\nimport { removeLoad, setGLoadByKey } from '../../redux/slices/loads';\nimport { sessionSlice } from '../../redux/slices/session';\n\nimport { store } from '../../redux/store';\nimport { SessionState } from '../../../../shared/types/session/state/session-state';\nimport { SESSION_STAGES } from '../../../../shared/types/session/state/stages';\n\nconst updateState = sessionSlice.actions.dang_updSessStateFromServer;\n\nclass ServerAdapter {\n  private apiUrl = IS_PROD\n    ? 'https://rss-react-2021q3-pp.herokuapp.com/'\n    : 'ws://localhost:9000';\n\n  private ws: WebSocket | undefined;\n\n  private obeyTheServer = (e: MessageEvent) => {\n    try {\n      // console.log(e.data);\n      const parsed = JSON.parse(e.data);\n      const purified = purify(parsed);\n\n      console.log(`received msg, cipher: ${purified.cipher}`);\n\n      if ('cipher' in purified) {\n        switch ((purified as SCMsg).cipher) {\n          case SCMSG_CIPHERS.CONN_TO_SESS_STATUS:\n            this.handleConnToSessStatus(purified as SCMsgConnToSessStatus);\n\n            return;\n          case CSMSG_CIPHERS.CHAT_MSG:\n            this.handleChatMsg(purified as SCMsgChatMsgsChanged);\n\n            return;\n\n          case SCMSG_CIPHERS.UPDATE_SESSION_STATE:\n            this.takeoffLoadBySessStateUpdate(\n              (purified as CSMsgUpdateState).update,\n            );\n            store.dispatch(updateState((purified as CSMsgUpdateState).update));\n\n            return;\n          case SCMSG_CIPHERS.MEMBERS_CHANGED:\n            this.handleMembersChanged(purified as SCMsgMembersChanged);\n\n            return;\n\n          default:\n            // just ignore\n            return;\n        }\n      }\n    } catch (err) {\n      console.log(err);\n      // TODO (no95typem)\n    }\n  };\n\n  private takeoffLoadBySessStateUpdate(update: Partial<SessionState>) {\n    if (update.stage) {\n      store.dispatch(removeLoad(KNOWN_LOADS_KEYS.SESSION_STAGE_CHANGE));\n    }\n  }\n\n  private handleConnToSessStatus(msg: SCMsgConnToSessStatus) {\n    if (!msg.response.success) {\n      const errorKey: KnownErrorsKey =\n        msg.response.fail?.reason || KNOWN_ERRORS_KEYS.SC_PROTOCOL_ERROR;\n      store.dispatch(setErrorByKey(errorKey));\n    } else {\n      store.dispatch(updateState(msg.response.success.state));\n      const clientId = msg.response.success.yourId;\n      store.dispatch(updateState({ clientId }));\n    }\n    store.dispatch(removeLoad('CONNECTING_TO_SERVER'));\n  }\n\n  private handleMembersChanged(msg: SCMsgMembersChanged) {\n    const members = OBJ_PROCESSOR.deepClone(store.getState().session.members);\n\n    Object.entries(msg.update).forEach(([id, member]) => {\n      if (members[+id]) {\n        Object.assign(members[+id], member);\n      } else {\n        members[+id] = member as Member;\n      }\n    });\n\n    const newMembers: Record<number, Member> = {};\n    Object.assign(newMembers, members);\n\n    // console.log(newMembers);\n    store.dispatch(updateState({ members: newMembers }));\n  }\n\n  private handleChatMsg(msg: SCMsgChatMsgsChanged) {\n    // TODO\n  }\n\n  private handleWSErrorOrClose() {\n    console.log('err');\n    store.dispatch(setErrorByKey(KNOWN_ERRORS_KEYS.NO_CONNECTION_TO_SERVER));\n\n    if (this.ws) {\n      this.ws.removeEventListener('message', this.obeyTheServer);\n      this.ws.onopen = null;\n      this.ws.onerror = null;\n      this.ws.onclose = null;\n      this.ws = undefined;\n    }\n  }\n\n  private handleWSOpen() {\n    (this.ws as WebSocket).addEventListener('message', this.obeyTheServer);\n    store.dispatch(setServerConnectionStatus('connected'));\n  }\n\n  connect(): Promise<boolean> {\n    store.dispatch(\n      setGLoadByKey({\n        loadKey: KNOWN_LOADS_KEYS.CONNECTING_TO_SERVER,\n        errorKey: KNOWN_ERRORS_KEYS.NO_CONNECTION_TO_SERVER,\n      }),\n    );\n    store.dispatch(removeError(KNOWN_ERRORS_KEYS.NO_CONNECTION_TO_SERVER));\n\n    return new Promise<boolean>(res => {\n      if (this.ws) {\n        // ? TODO (no95typem) disconnect from a previous server but for now:\n        res(true);\n\n        return;\n      }\n\n      const resFalse = () => {\n        this.handleWSErrorOrClose();\n        res(false);\n      };\n\n      try {\n        this.ws = new WebSocket(this.apiUrl);\n        this.ws.onopen = () => {\n          this.handleWSOpen();\n          res(true);\n        };\n        this.ws.onerror = resFalse;\n        this.ws.onclose = resFalse;\n      } catch {\n        resFalse();\n      }\n    }).finally(() => {\n      store.dispatch(removeLoad(KNOWN_LOADS_KEYS.CONNECTING_TO_SERVER));\n    });\n  }\n\n  private handleSendError = FE_ALONE\n    ? () => console.warn('front end in standalone mode')\n    : () => {\n        store.dispatch(\n          setErrorByKey(KNOWN_ERRORS_KEYS.FAILED_TO_SEND_MSG_TO_SERVER),\n        );\n      };\n\n  send = (msg: CSMsg) => {\n    try {\n      (this.ws as WebSocket).send(JSON.stringify(msg));\n      console.log('msg sent');\n    } catch (err) {\n      console.log(err);\n      this.handleSendError();\n    }\n  };\n\n  exitGame = () => {\n    store.dispatch(updateState({ stage: SESSION_STAGES.EMPTY }));\n    const msg = new CSMsgDisconFromSess();\n    this.send(msg);\n  };\n\n  startGame = () => {\n    store.dispatch(\n      setGLoadByKey({\n        loadKey: KNOWN_LOADS_KEYS.SESSION_STAGE_CHANGE,\n      }),\n    );\n    const msg = new CSMsgStartGame();\n    this.send(msg);\n  };\n}\n\nexport const SERVER_ADAPTER = new ServerAdapter();\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { CSMsgConnToSess } from '../../../../shared/types/cs-msgs/msgs/cs-conn-to-sess';\nimport { CSMsgCreateSession } from '../../../../shared/types/cs-msgs/msgs/cs-create-sess';\nimport { USER_ROLES } from '../../../../shared/types/user/user-role';\nimport { KNOWN_LOADS_KEYS } from '../../../../shared/knownLoadsKeys';\nimport { SERVER_ADAPTER } from '../../modules/ServerAdapter/ServerAdapter';\nimport { RootState } from '../store';\nimport { setGLoadByKey } from './loads';\nimport { KNOWN_ERRORS_KEYS } from '../../../../shared/knownErrorsKeys';\n\nexport type WSConnectionStatus = 'connecting' | 'connected' | 'failed';\nexport type SessionConnectionStatus = 'connecting' | 'connected';\n\ninterface ConnectState {\n  serverConnectionStatus?: WSConnectionStatus;\n  sessionConnectionStatus?: SessionConnectionStatus;\n}\n\nconst initialState = { serverConnectionStatus: undefined } as ConnectState;\n\nexport const connectToLobby = createAsyncThunk(\n  'connection/connectToSession',\n  async (args, thunkAPI) => {\n    // TODO (no95typem): get params from the state!\n    const state = thunkAPI.getState() as RootState;\n    const msg = new CSMsgConnToSess({\n      info: state.userInfo,\n      role: USER_ROLES.PLAYER,\n      sessId: state.homePage.lobbyURL,\n    });\n    SERVER_ADAPTER.send(msg);\n    thunkAPI.dispatch(\n      setGLoadByKey({\n        loadKey: KNOWN_LOADS_KEYS.CONNECTING_TO_SERVER,\n        errorKey: KNOWN_ERRORS_KEYS.NO_CONNECTION_TO_SERVER,\n      }),\n    );\n  },\n);\n\nexport const createSession = createAsyncThunk(\n  'connection/createSession',\n  async (args, thunkAPI) => {\n    const state = thunkAPI.getState() as RootState;\n    const msg = new CSMsgCreateSession({\n      userInfo: state.userInfo,\n      settings: state.session.currentGameSettings, // ! TODO (no95typem)\n    });\n    SERVER_ADAPTER.send(msg);\n    thunkAPI.dispatch(\n      setGLoadByKey({\n        loadKey: KNOWN_LOADS_KEYS.CONNECTING_TO_SERVER,\n        errorKey: KNOWN_ERRORS_KEYS.NO_CONNECTION_TO_SERVER,\n      }),\n    );\n  },\n);\n\nexport const connectSlice = createSlice({\n  name: 'connection',\n  initialState,\n  reducers: {\n    setServerConnectionStatus(\n      state,\n      action: PayloadAction<WSConnectionStatus>,\n    ) {\n      state.serverConnectionStatus = action.payload;\n    },\n    setSessionConnectionStatus(\n      state,\n      action: PayloadAction<SessionConnectionStatus>,\n    ) {\n      state.sessionConnectionStatus = action.payload;\n    },\n  },\n  // extraReducers: builder => {\n  //   builder.addCase(connectToLobby.fulfilled, (state, action) => {\n  //     console.log(state, action);\n  //   });\n  // },\n});\n\nexport const { setServerConnectionStatus, setSessionConnectionStatus } =\n  connectSlice.actions;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nconst initialState = {\n  lobbyURL: '',\n};\n\nexport const homePageSlice = createSlice({\n  name: 'homePage',\n  initialState,\n  reducers: {\n    setLobbyURL(state, action: PayloadAction<string>) {\n      state.lobbyURL = action.payload;\n    },\n  },\n});\n","import { OBJ_PROCESSOR } from '../../../shared/helpers/processors/obj-processor';\nimport { LocaleKey } from './locale';\n\nconst LocaleUS: Record<LocaleKey, string> = {\n  SESSION_DEALER_KICK_CONFIRMATION_POPUP_BODY:\n    'Do you really want to kick this player?',\n\n  APP_SERVER_CONNECTION_STATUS_TOAST_TITLE: 'Connection info',\n\n  APP_SERVER_CONNECTION_STATUS_TOAST_DESC: 'Succesfully connected to a server',\n\n  KICK_PLAYER_MODAL_TEXT_START: 'Do you really want to remove player',\n\n  KICK_PLAYER_MODAL_TEXT_FINISH: 'from game session?',\n\n  SETTINGS_IS_DEALER_PLAYER: 'Scram dealer as player:',\n\n  SETTINGS_OPEN_CARDS_ON_ROUND_END: 'Open cards on round end:',\n\n  SETTINGS_IS_TIMER_ON: 'Is timer enabled:',\n\n  SETTINGS_SCORE_TYPE: 'Score type:',\n\n  SETTINGS_SCORE_TYPE_SHORT: 'Score type (Short):',\n\n  SETTINGS_CARDS_HEADER: 'Adjust cards values:',\n\n  SETTINGS_CARDS_MODAL_CUSTOM:\n    \"If it's custom value, add image to illustrate it:\",\n};\n\nexport const LOCALE_US = OBJ_PROCESSOR.deepFreeze(LocaleUS);\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { LocaleKey } from '../../locales/locale';\nimport { LOCALE_US } from '../../locales/locale-us';\n\nconst initialState: Record<LocaleKey, string> = LOCALE_US;\n\nexport const localeSlice = createSlice({\n  name: 'local',\n  initialState,\n  reducers: {\n    setLocale(state, action: PayloadAction<Record<LocaleKey, string>>) {\n      state = action.payload;\n    },\n  },\n});\n\nexport const { setLocale } = localeSlice.actions;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { SessionStage } from '../../../../shared/types/session/state/stages';\nimport { ISessionName } from '../../../../shared/types/session/state/session-state';\n\n//! Временно создан SESSION_TESTING_STATE, исключительно для отладки.\nimport { SESSION_TESTING_STATE } from '../../../../shared/initStates';\nimport { Issue } from '../../../../shared/types/session/issue/issue';\n\nconst initialState = SESSION_TESTING_STATE;\n\nexport const mockSessionSlice = createSlice({\n  name: 'session',\n  initialState,\n  reducers: {\n    setSessionStatus(state, action: PayloadAction<SessionStage>) {\n      state.stage = action.payload;\n    },\n    setSessionId(state, action: PayloadAction<string>) {\n      state.sessionId = action.payload;\n    },\n    setSessionName(state, action: PayloadAction<ISessionName>) {\n      state.name = action.payload;\n    },\n    addIssue(state, action: PayloadAction<Issue>) {\n      const issues = state.issues.list;\n\n      const editedIssue = issues.find(issue => issue.id === action.payload.id);\n\n      if (editedIssue) {\n        const issueIndex = issues.indexOf(editedIssue);\n\n        issues[issueIndex] = action.payload;\n      } else {\n        issues.push(action.payload);\n      }\n    },\n    deleteIssue(state, action: PayloadAction<number>) {\n      const issues = state.issues.list;\n\n      const issue = issues.find(issue => issue.id === action.payload);\n\n      if (issue) {\n        const issueIndex = issues.indexOf(issue);\n\n        issues.splice(issueIndex, 1);\n      }\n    },\n  },\n});\n\nexport const {\n  setSessionStatus,\n  setSessionId,\n  setSessionName,\n  addIssue,\n  deleteIssue,\n} = mockSessionSlice.actions;\n","import { ISettings } from './../../../../shared/types/settings';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { defaultSettings } from '../../../../shared/initStates';\n\nexport const settingsSlice = createSlice({\n  name: 'settings',\n  initialState: defaultSettings,\n  reducers: {\n    setSettings(state, action: PayloadAction<ISettings>) {\n      Object.assign(state, action.payload);\n    },\n  },\n});\n\nexport const { setSettings } = settingsSlice.actions;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { UserInfo } from '../../../../shared/types/user/user-info';\n\nconst initialState = {\n  name: '',\n  surname: '',\n  jobPosition: '',\n  avatarBase64: '',\n  avatarBgColor: '#385898',\n} as UserInfo;\n\nexport const userInfoSlice = createSlice({\n  name: 'UserInfo',\n  initialState,\n  reducers: {\n    changeName(state, action) {\n      state.name = action.payload;\n    },\n    changeSurname(state, action) {\n      state.surname = action.payload;\n    },\n    changeJobPosition(state, action) {\n      state.jobPosition = action.payload;\n    },\n    changeAvatarBase64(state, action) {\n      console.log(action.payload);\n      state.avatarBase64 = action.payload;\n    },\n    changeAvatarBgColor(state, action) {\n      state.avatarBgColor = action.payload;\n    },\n  },\n});\n\nexport const {\n  changeName,\n  changeSurname,\n  changeJobPosition,\n  changeAvatarBase64,\n  changeAvatarBgColor,\n} = userInfoSlice.actions;\n","import { configureStore } from '@reduxjs/toolkit';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { connectSlice } from './slices/connect';\nimport { errorsSlice } from './slices/errors';\nimport { homePageSlice } from './slices/home-page';\nimport { loadsSlice } from './slices/loads';\nimport { localeSlice } from './slices/locale';\nimport { mockSessionSlice } from './slices/mockSession';\nimport { sessionSlice } from './slices/session';\nimport { settingsSlice } from './slices/settings';\nimport { userInfoSlice } from './slices/userInfo';\n\nexport const store = configureStore({\n  reducer: {\n    homePage: homePageSlice.reducer,\n    locale: localeSlice.reducer,\n    errors: errorsSlice.reducer,\n    loads: loadsSlice.reducer,\n    connect: connectSlice.reducer,\n    session: sessionSlice.reducer,\n    userInfo: userInfoSlice.reducer,\n    mockSession: mockSessionSlice.reducer,\n    settings: settingsSlice.reducer,\n  },\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { OBJ_PROCESSOR } from '../../../helpers/processors/obj-processor';\n\nclass RoundStates {\n  readonly AWAIT_START = 'AWAIT_START';\n\n  readonly IN_PROCESS = 'IN_PROCESS';\n\n  readonly ENDED = 'ENDED';\n}\n\nexport const ROUND_STATES = OBJ_PROCESSOR.deepFreeze(new RoundStates());\n\nexport type RoundState = keyof RoundStates;\n","import { useState } from 'react';\n\nimport { useAppDispatch } from '../../redux/store';\nimport { updSessState } from '../../redux/slices/session';\n\nimport { OBJ_PROCESSOR } from '../../../../shared/helpers/processors/obj-processor';\nimport { ISettings } from '../../../../shared/types/settings';\nimport {\n  IIssuesData,\n  Issue,\n} from '../../../../shared/types/session/issue/issue';\nimport { ISessionNameHandling } from '../../../../shared/types/session/name';\nimport { ISessionStateClient } from '../../../../shared/types/session/state/session-state';\nimport {\n  IMemberData,\n  IUserCards,\n  Member,\n} from '../../../../shared/types/session/member';\nimport { ROUND_STATES } from '../../../../shared/types/session/round/round-state';\nimport { USER_ROLES } from '../../../../shared/types/user/user-role';\n\ninterface ILobbyData {\n  sessionNameData: ISessionNameHandling;\n  dealerData: IMemberData;\n  membersData: IUserCards;\n  issuesData: IIssuesData;\n  settingsData: ISettingsData;\n  isPlayerDealer: boolean;\n}\n\nexport interface ISettingsData {\n  // settings: ISettings;\n  setGameSettings: (settings: ISettings) => void;\n}\n\nconst UseSessionData = (sessionData: ISessionStateClient): ILobbyData => {\n  const dispatch = useAppDispatch();\n\n  const [newIssueId, setNewIssueId] = useState(1);\n\n  const findIssueIndex = (id: number): number | null => {\n    const list = sessionData.issues.list;\n\n    const issue = list.find(issue => issue.id === id);\n\n    return issue ? list.indexOf(issue) : null;\n  };\n\n  const dealerInfo = sessionData.members[0];\n\n  const setNewSessionName = (newName: string): void => {\n    dispatch(updSessState({ name: { value: newName, isSynced: false } }));\n  };\n\n  const isPlayerDealer =\n    sessionData.members[sessionData.clientId].userRole === USER_ROLES.DEALER;\n\n  const addNewIssue = (issue: Issue): void => {\n    const issueIndex = findIssueIndex(issue.id);\n\n    const issues = OBJ_PROCESSOR.deepClone(sessionData.issues.list);\n\n    if (issueIndex !== null) {\n      issues[issueIndex] = issue;\n\n      dispatch(\n        updSessState({ issues: { list: [...issues], isSynced: false } }),\n      );\n    } else {\n      dispatch(\n        updSessState({ issues: { list: [...issues, issue], isSynced: false } }),\n      );\n\n      setNewIssueId(newIssueId + 1);\n    }\n  };\n\n  const removeIssue = (id: number): void => {\n    const issueIndex = findIssueIndex(id);\n\n    const issues = OBJ_PROCESSOR.deepClone(sessionData.issues.list);\n\n    if (issueIndex !== null) {\n      issues.splice(issueIndex, 1);\n\n      dispatch(\n        updSessState({ issues: { list: [...issues], isSynced: false } }),\n      );\n    }\n  };\n\n  const isItYou = (member: Member) => {\n    return sessionData.clientId === member.userSessionPublicId;\n  };\n\n  const isRoundStarted = (): boolean => {\n    return (\n      !!sessionData.game &&\n      sessionData.game.roundState === ROUND_STATES.IN_PROCESS\n    );\n  };\n\n  const setGameSettings = (settings: ISettings): void => {\n    dispatch(updSessState({ currentGameSettings: settings }));\n  };\n\n  const sessionNameData: ISessionNameHandling = {\n    name: sessionData.name,\n    changeValue: setNewSessionName,\n    isPlayerDealer: isPlayerDealer,\n  };\n\n  const dealerData: IMemberData = {\n    member: dealerInfo,\n    isItYou: isItYou(dealerInfo),\n    isRoundStarted: isRoundStarted(),\n  };\n\n  const membersData: IUserCards = {\n    members: sessionData.members,\n    findWhoIsUser: isItYou,\n    isRoundStarted: isRoundStarted(),\n  };\n\n  const issuesData: IIssuesData = {\n    issues: sessionData.issues,\n    addNewIssue: addNewIssue,\n    removeIssue: removeIssue,\n    newIssueId: newIssueId,\n    isPlayerDealer: isPlayerDealer,\n  };\n\n  const settingsData: ISettingsData = {\n    // settings: sessionData.currentGameSettings,\n\n    //! чтобы засетать настройки в стэйт на старт игры.\n    setGameSettings: setGameSettings,\n  };\n\n  return {\n    sessionNameData,\n    dealerData,\n    membersData,\n    issuesData,\n    settingsData,\n    isPlayerDealer,\n  };\n};\n\nexport default UseSessionData;\n","import React from 'react';\n\nimport { Button, Stack } from '@chakra-ui/react';\nimport { SERVER_ADAPTER } from '../../modules/ServerAdapter/ServerAdapter';\n\ninterface IAccessData {\n  isPlayerDealer: boolean;\n}\n\nconst GameControlButtons = (props: IAccessData): JSX.Element => {\n  const { isPlayerDealer } = props;\n\n  return (\n    <Stack direction=\"row\" w=\"100%\" align=\"center\" justify=\"space-between\">\n      <Button\n        colorScheme=\"facebook\"\n        w=\"130px\"\n        variant=\"outline\"\n        onClick={SERVER_ADAPTER.exitGame}\n      >\n        {isPlayerDealer ? 'Cancel Game' : 'Leave Game'}\n      </Button>\n      {isPlayerDealer && (\n        <Button\n          colorScheme=\"facebook\"\n          w=\"130px\"\n          variant=\"solid\"\n          visibility={isPlayerDealer ? 'visible' : 'hidden'}\n          onClick={SERVER_ADAPTER.startGame}\n        >\n          Start Game\n        </Button>\n      )}\n    </Stack>\n  );\n};\n\nexport default GameControlButtons;\n","import { OBJ_PROCESSOR } from '../../helpers/processors/obj-processor';\n\nclass UserStates {\n  readonly CONNECTED = 'CONNECTED';\n\n  readonly DISCONNECTED = 'DISCONNECTED';\n\n  readonly KICKED = 'KICKED';\n}\n\nexport const USER_STATES = OBJ_PROCESSOR.deepFreeze(new UserStates());\n\nexport type UserState = keyof UserStates;\n","import React from 'react';\n\nimport {\n  Avatar,\n  Stack,\n  IconButton,\n  Stat,\n  AvatarBadge,\n  StatNumber,\n  StatHelpText,\n} from '@chakra-ui/react';\n\nimport { ImBlocked } from 'react-icons/im';\n\nimport { IMemberData } from '../../../../shared/types/session/member';\nimport { USER_ROLES } from '../../../../shared/types/user/user-role';\nimport { USER_STATES } from '../../../../shared/types/user/user-state';\n\nconst UserCard = (props: IMemberData): JSX.Element => {\n  const { member, isItYou, isRoundStarted, kickPlayer } = props;\n\n  const { userInfo, userState, userRole, userSessionPublicId: id } = member;\n\n  // console.log(userInfo, member);\n\n  const { name, surname, avatarBase64, avatarBgColor, jobPosition } = userInfo;\n\n  const fullName = surname ? `${name} ${surname}` : name;\n\n  const isKickShown: boolean =\n    !isRoundStarted &&\n    !isItYou &&\n    userRole !== USER_ROLES.DEALER &&\n    userState === USER_STATES.CONNECTED;\n\n  return (\n    <Stack direction=\"row\" align=\"center\" p=\"10px 10px\" boxShadow=\"lg\">\n      <Avatar\n        color=\"white\"\n        bg={avatarBgColor}\n        name={fullName}\n        src={avatarBase64}\n      >\n        {isItYou && (\n          <AvatarBadge borderColor=\"papayawhip\" bg=\"green.400\" boxSize=\"1em\" />\n        )}\n      </Avatar>\n\n      <Stat>\n        <StatNumber as={userState === USER_STATES.KICKED ? 'del' : 'abbr'}>\n          {fullName}\n        </StatNumber>\n        <StatHelpText mb=\"0\">{jobPosition}</StatHelpText>\n      </Stat>\n\n      {kickPlayer && isKickShown && (\n        <IconButton\n          aria-label=\"Kick player\"\n          background=\"transparent\"\n          size=\"lg\"\n          icon={<ImBlocked />}\n          onClick={() => kickPlayer(id, fullName)}\n        />\n      )}\n    </Stack>\n  );\n};\n\nexport default UserCard;\n","import React from 'react';\n\nimport { Stack, Text } from '@chakra-ui/react';\n\nimport { IMemberData } from '../../../../shared/types/session/member';\n\nimport UserCard from '../../components/UserCard/UserCard';\n\nconst DealerPlate = (props: IMemberData): JSX.Element => {\n  return (\n    <Stack w=\"300px\" mb=\"30px\">\n      <Text mb=\"-10px\" padding=\"0 10px\">\n        Dealer:\n      </Text>\n      <UserCard {...props} />;\n    </Stack>\n  );\n};\n\nexport default DealerPlate;\n","import React from 'react';\n\nimport { Spinner } from '@chakra-ui/react';\n\nconst ChakraLoader = (): JSX.Element => {\n  return (\n    <>\n      <Spinner\n        position=\"absolute\"\n        // m=\"0 auto\"\n        // textAlign=\"center\"\n        top=\"50%\"\n        left=\"50%\"\n        right=\"0\"\n        bottom=\"0\"\n        thickness=\"4px\"\n        speed=\"0.65s\"\n        emptyColor=\"gray.200\"\n        color=\"blue.500\"\n        size=\"xl\"\n      />\n    </>\n  );\n};\n\nexport default ChakraLoader;\n","import React, { useState } from 'react';\n\nimport {\n  Button,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  useDisclosure,\n  Editable,\n  EditableInput,\n  EditablePreview,\n  IconButton,\n  Stack,\n  Heading,\n  ButtonGroup,\n} from '@chakra-ui/react';\n\nimport { ImPencil } from 'react-icons/im';\nimport { ISessionNameHandling } from '../../../../shared/types/session/name';\nimport ChakraLoader from '../../components/Loader/ChakraLoader';\n\nconst EditableHeader = (props: ISessionNameHandling) => {\n  const { name, changeValue, isPlayerDealer } = props;\n\n  const { value, isSynced } = name;\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const [topicView, setTopicView] = useState(value);\n\n  const updateTopic = (): void => {\n    changeValue(topicView);\n\n    onClose();\n  };\n\n  return (\n    <Stack\n      position=\"relative\"\n      w=\"100%\"\n      direction=\"row\"\n      justify=\"center\"\n      align=\"center\"\n      p=\"10px\"\n      opacity={isSynced ? 1 : 0.5}\n    >\n      <Heading size=\"lg\" maxW=\"300px\" isTruncated>\n        {value}\n      </Heading>\n\n      <IconButton\n        top=\"0\"\n        right=\"0\"\n        aria-label=\"edit\"\n        background=\"transparent\"\n        visibility={isPlayerDealer && isSynced ? 'visible' : 'hidden'}\n        size=\"lg\"\n        icon={<ImPencil />}\n        onClick={onOpen}\n      />\n      {!isSynced && <ChakraLoader />}\n\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader textAlign=\"center\">Topic:</ModalHeader>\n          <ModalBody>\n            <Editable\n              value={topicView}\n              textAlign=\"center\"\n              startWithEditView={true}\n              onChange={setTopicView}\n            >\n              <EditablePreview />\n              <EditableInput />\n            </Editable>\n          </ModalBody>\n\n          <ModalFooter>\n            <ButtonGroup w=\"100%\" d=\"flex\" justifyContent=\"space-between\">\n              <Button\n                colorScheme=\"facebook\"\n                w=\"100px\"\n                variant=\"outline\"\n                onClick={onClose}\n              >\n                Close\n              </Button>\n              <Button\n                colorScheme=\"facebook\"\n                w=\"100px\"\n                variant=\"solid\"\n                onClick={updateTopic}\n              >\n                Change\n              </Button>\n            </ButtonGroup>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </Stack>\n  );\n};\n\nexport default EditableHeader;\n","import React from 'react';\n\nimport {\n  Button,\n  ButtonGroup,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  Text,\n} from '@chakra-ui/react';\n\nimport { LOCALE_US } from '../../locales/locale-us';\n\nimport { IKickModalBundle } from '../../../../shared/types/session/member';\n\nconst KickModal = (props: IKickModalBundle): JSX.Element => {\n  const { modalData } = props;\n\n  const { isOpen, onClose, name, onConfirm, initiatorName } = modalData;\n\n  return (\n    <>\n      <Modal closeOnOverlayClick={false} isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader fontSize=\"2xl\" textAlign=\"center\">\n            {initiatorName ? 'Kick' : ' Kick Player?'}\n          </ModalHeader>\n\n          <ModalBody mb=\"20px\">\n            <Text textAlign=\"center\">\n              {initiatorName\n                ? `${initiatorName} want to kick ${name}. Do you agree with it?`\n                : `${LOCALE_US.KICK_PLAYER_MODAL_TEXT_START} ${name} ${LOCALE_US.KICK_PLAYER_MODAL_TEXT_FINISH}`}\n            </Text>\n          </ModalBody>\n\n          <ModalFooter>\n            <ButtonGroup\n              colorScheme=\"facebook\"\n              width=\"100%\"\n              display=\"flex\"\n              justifyContent=\"space-between\"\n            >\n              <Button padding=\"0 50px\" variant=\"outline\" onClick={onClose}>\n                No\n              </Button>\n              <Button onClick={onConfirm} padding=\"0 50px\">\n                Yes\n              </Button>\n            </ButtonGroup>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default KickModal;\n","import React from 'react';\n\nimport { Box, Heading, Stack } from '@chakra-ui/react';\n\nimport {\n  IMemberData,\n  IUserCardsViewBundle,\n  Member,\n} from '../../../../shared/types/session/member';\n\nimport UserCard from '../../components/UserCard/UserCard';\nimport KickModal from '../../components/KickModal/KickModal';\nimport { DEALER_ID } from '../../../../shared/const';\n\nconst UserCardsView = (props: IUserCardsViewBundle): JSX.Element => {\n  const { cardsData, modalData } = props;\n\n  const { members, findWhoIsUser } = cardsData;\n\n  const setMemberData = (member: Member): IMemberData => {\n    return {\n      member: member,\n      isItYou: findWhoIsUser(member),\n      isRoundStarted: false,\n      kickPlayer: modalData.kickPlayer,\n    };\n  };\n\n  return (\n    <Box mb=\"30px\">\n      <Heading textAlign=\"center\" size=\"lg\" mb=\"40px\">\n        Members:\n      </Heading>\n      <Stack w=\"100%\" wrap=\"wrap\" direction=\"row\">\n        {Object.entries(members).map(([id, member]) => {\n          if (+id === DEALER_ID) return null;\n\n          return (\n            <Stack w=\"300px\" key={`${id}-wrap`}>\n              <UserCard {...setMemberData(member)} key={id} />;\n            </Stack>\n          );\n        })}\n\n        <KickModal modalData={modalData} />\n      </Stack>\n    </Box>\n  );\n};\n\nexport default UserCardsView;\n","export const DEALER_ID = 0;\nexport const UNDEFINED_CARD_VALUE = 'UNDEFINED';\n","import React, { useState } from 'react';\n\nimport { useDisclosure } from '@chakra-ui/react';\n\nimport {\n  IKickModal,\n  IUserCards,\n} from '../../../../shared/types/session/member';\n\nimport UserCardsView from './UserCardsView';\n\nconst UserCards = (props: IUserCards): JSX.Element => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const { members, findWhoIsUser, isRoundStarted } = props;\n\n  const [kickedName, setKickedName] = useState('');\n\n  const [kickedId, setKickedId] = useState(0);\n\n  const confirmKick = () => {\n    onClose();\n    console.log('server command --kick', kickedId);\n  };\n\n  const setModalWindowInfo = (id: number, name: string) => {\n    setKickedId(id);\n\n    setKickedName(name);\n\n    onOpen();\n  };\n\n  const modalData: IKickModal = {\n    onClose: onClose,\n    isOpen: isOpen,\n    name: kickedName,\n    onConfirm: confirmKick,\n    initiatorName: '',\n    kickPlayer: setModalWindowInfo,\n  };\n\n  const userCardsData: IUserCards = {\n    members: members,\n    findWhoIsUser: findWhoIsUser,\n    isRoundStarted: isRoundStarted,\n  };\n\n  return <UserCardsView cardsData={userCardsData} modalData={modalData} />;\n};\n\nexport default UserCards;\n","import React from 'react';\n\nimport {\n  Stack,\n  IconButton,\n  Stat,\n  StatNumber,\n  StatHelpText,\n} from '@chakra-ui/react';\n\nimport { ImPencil } from 'react-icons/im';\nimport { CloseIcon } from '@chakra-ui/icons';\n\nimport {\n  IIssueData,\n  Issue,\n} from '../../../../shared/types/session/issue/issue';\n\nconst IssueCard = (props: IIssueData): JSX.Element => {\n  const { issue, openModal, removeIssue, isPlayerDealer } = props;\n\n  const { id, title, priority, isSynced } = issue as Issue;\n\n  return (\n    <Stack direction=\"row\" align=\"center\" p=\"10px\" boxShadow=\"lg\">\n      <Stat>\n        <StatNumber isTruncated={true}>{title}</StatNumber>\n        <StatHelpText mb=\"0\">{priority}</StatHelpText>\n      </Stat>\n\n      <IconButton\n        aria-label=\"edit\"\n        background=\"transparent\"\n        visibility={isPlayerDealer && isSynced ? 'visible' : 'hidden'}\n        size=\"lg\"\n        icon={<ImPencil />}\n        onClick={() => openModal(id)}\n      />\n      <IconButton\n        aria-label=\"delete\"\n        background=\"transparent\"\n        visibility={isPlayerDealer && isSynced ? 'visible' : 'hidden'}\n        size=\"lg\"\n        icon={<CloseIcon />}\n        onClick={() => removeIssue(id)}\n      />\n    </Stack>\n  );\n};\n\nexport default IssueCard;\n","import React from 'react';\n\nimport {\n  Button,\n  ButtonGroup,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  Select,\n  Stack,\n  Input,\n  FormControl,\n  FormLabel,\n} from '@chakra-ui/react';\n\nimport { IIssueModalData } from '../../../../shared/types/session/issue/issue';\n\nconst IssueModal = (props: IIssueModalData): JSX.Element => {\n  const { issue: issueData } = props;\n\n  const { isOpen, onClose, activeIssue, changeIssue, addNewIssue } = issueData;\n\n  const { title, link, priority } = activeIssue;\n\n  const setIssueData = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>,\n  ): void => {\n    const input = e.target;\n\n    changeIssue({ ...activeIssue, [input.name]: input.value });\n  };\n\n  return (\n    <>\n      <Modal closeOnOverlayClick={false} isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Create Issue</ModalHeader>\n\n          <ModalBody mb=\"20px\">\n            <Stack d=\"flex\" justify=\"space-around\" align=\"stretch\">\n              <FormControl id=\"title\" isRequired>\n                <Stack spacing={2} direction=\"row\" align=\"center\">\n                  <FormLabel>Title:</FormLabel>\n                  <Input\n                    name=\"title\"\n                    placeholder=\"Issue name\"\n                    value={title}\n                    onChange={setIssueData}\n                  />\n                </Stack>\n              </FormControl>\n              <FormControl id=\"link\">\n                <Stack spacing={2} direction=\"row\" align=\"center\">\n                  <FormLabel htmlFor=\"link\">Link:</FormLabel>\n                  <Input name=\"link\" value={link} onChange={setIssueData} />\n                </Stack>\n              </FormControl>\n              <Stack spacing={2} direction=\"row\" align=\"center\">\n                <FormLabel>Priority:</FormLabel>\n                <Select\n                  value={priority}\n                  onChange={setIssueData}\n                  name=\"priority\"\n                  variant=\"filled\"\n                  bg=\"gray.100\"\n                >\n                  <option value=\"LOW\">Low</option>\n                  <option value=\"MEDIUM\">Medium</option>\n                  <option value=\"HIGH\">High</option>\n                </Select>\n              </Stack>\n            </Stack>\n          </ModalBody>\n\n          <ModalFooter>\n            <ButtonGroup\n              colorScheme=\"facebook\"\n              width=\"100%\"\n              display=\"flex\"\n              justifyContent=\"space-between\"\n            >\n              <Button padding=\"0 50px\" variant=\"outline\" onClick={onClose}>\n                No\n              </Button>\n              <Button onClick={() => addNewIssue(activeIssue)} padding=\"0 50px\">\n                Yes\n              </Button>\n            </ButtonGroup>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default IssueModal;\n","import React from 'react';\n\nimport { Stack, IconButton, Stat, StatNumber } from '@chakra-ui/react';\n\nimport { ImPlus } from 'react-icons/im';\n\ninterface IIssueButtonData {\n  editIssue: () => void;\n}\n\nconst NewIssueButton = (props: IIssueButtonData): JSX.Element => {\n  const { editIssue } = props;\n\n  return (\n    <Stack\n      onClick={editIssue}\n      direction=\"row\"\n      align=\"center\"\n      p=\"10px\"\n      boxShadow=\"lg\"\n      cursor=\"pointer\"\n      w=\"300px\"\n    >\n      <Stat>\n        <StatNumber>Create new issue</StatNumber>\n      </Stat>\n\n      <IconButton\n        aria-label=\"edit\"\n        background=\"transparent\"\n        size=\"lg\"\n        icon={<ImPlus />}\n      />\n    </Stack>\n  );\n};\n\nexport default NewIssueButton;\n","import React from 'react';\n\nimport { Box, Heading, Stack } from '@chakra-ui/react';\n\nimport {\n  IIssueData,\n  IIssues,\n  Issue,\n} from '../../../../shared/types/session/issue/issue';\n\nimport IssueCard from '../../components/IssueCard/IssueCard';\nimport IssueModal from '../../components/IssueModal/IssueModal';\nimport NewIssueButton from '../../components/NewIssueButton/NewIssueButton';\nimport ChakraLoader from '../../components/Loader/ChakraLoader';\n\nconst IssueCardsView = (props: IIssues): JSX.Element => {\n  const { issues, modal } = props;\n\n  const { list, isSynced } = issues;\n\n  const { openModal, removeIssue, isPlayerDealer } = modal;\n\n  const setIssueData = (issue: Issue): IIssueData => {\n    return {\n      isPlayerDealer: isPlayerDealer,\n      openModal: openModal,\n      removeIssue: removeIssue,\n      issue: issue,\n    };\n  };\n\n  return (\n    <Box mb=\"50px\" position=\"relative\">\n      <Heading textAlign=\"center\" size=\"lg\" mb=\"40px\">\n        Issues:\n      </Heading>\n      <Stack w=\"100%\" wrap=\"wrap\" direction=\"row\" opacity={isSynced ? 1 : 0.5}>\n        {list.map(issue => {\n          const id = issue.id;\n\n          return (\n            <Stack w=\"300px\" key={`${id}-wrap`}>\n              <IssueCard {...setIssueData(issue)} key={id} />\n            </Stack>\n          );\n        })}\n\n        {isPlayerDealer && isSynced && <NewIssueButton editIssue={openModal} />}\n\n        <IssueModal issue={modal} />\n      </Stack>\n      {!isSynced && <ChakraLoader />}\n    </Box>\n  );\n};\n\nexport default IssueCardsView;\n","import { OBJ_PROCESSOR } from '../../../helpers/processors/obj-processor';\n\nclass IssuePriorities {\n  readonly LOW = 'LOW';\n\n  readonly MEDIUM = 'MEDIUM';\n\n  readonly HIGH = 'HIGH';\n}\n\nexport const ISSUE_PRIORITIES = OBJ_PROCESSOR.deepFreeze(new IssuePriorities());\n\nexport type IssuePriority = keyof IssuePriorities;\n","import React, { useState } from 'react';\n\nimport { useDisclosure } from '@chakra-ui/react';\n\nimport {\n  IIssueModal,\n  IIssuesData,\n  Issue,\n} from '../../../../shared/types/session/issue/issue';\n\nimport IssueCardsView from './IssuesCardsView';\nimport { ISSUE_PRIORITIES } from '../../../../shared/types/session/issue/issue-priority';\n\nconst IssuesCards = (props: IIssuesData): JSX.Element => {\n  const { issues, addNewIssue, removeIssue, newIssueId, isPlayerDealer } =\n    props;\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const newIssue: Issue = {\n    id: newIssueId,\n    title: '',\n    link: '',\n    priority: ISSUE_PRIORITIES.LOW,\n    isSynced: false,\n    closed: false,\n  };\n\n  const [activeIssue, setActiveIssue] = useState<Issue>(newIssue);\n\n  const findIssue = (issueId?: number): void => {\n    const editIssue = issues.list.find(issue => issue.id === issueId);\n\n    setActiveIssue(editIssue ? editIssue : newIssue);\n  };\n\n  const openModal = (issueId?: number): void => {\n    findIssue(issueId);\n\n    onOpen();\n  };\n\n  const setNewIssue = (issue: Issue): void => {\n    addNewIssue(issue);\n\n    onClose();\n  };\n\n  const changeIssue = (issue: Issue): void => {\n    setActiveIssue({ ...issue });\n  };\n\n  const modalData: IIssueModal = {\n    onClose: onClose,\n    isOpen: isOpen,\n    openModal: openModal,\n    activeIssue: activeIssue,\n    addNewIssue: setNewIssue,\n    changeIssue: changeIssue,\n    removeIssue: removeIssue,\n    isPlayerDealer: isPlayerDealer,\n  };\n\n  return <IssueCardsView issues={issues} modal={modalData} />;\n};\n\nexport default IssuesCards;\n","import React from 'react';\n\nimport { FormLabel, FormControl, Switch } from '@chakra-ui/react';\n\nimport { ISettingsComponentData } from '../../../../shared/types/settings';\n\nconst Switcher = (props: ISettingsComponentData): JSX.Element => {\n  const { data } = props;\n\n  const { name, label, value, onChange } = data;\n\n  const setData = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const input = e.target;\n\n    onChange(input.name, input.checked);\n  };\n\n  return (\n    <FormControl\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n    >\n      <FormLabel htmlFor={name} mb=\"0\">\n        {label}\n      </FormLabel>\n      <Switch\n        colorScheme=\"green\"\n        id={name}\n        name={name}\n        isChecked={value as boolean}\n        onChange={setData}\n      />\n    </FormControl>\n  );\n};\n\nexport default Switcher;\n","import React from 'react';\n\nimport { FormLabel, FormControl, Input } from '@chakra-ui/react';\n\nimport { ISettingsComponentData } from '../../../../shared/types/settings';\n\nconst InputText = (props: ISettingsComponentData): JSX.Element => {\n  const { data } = props;\n\n  const { name, label, value, onChange } = data;\n\n  const setData = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const input = e.target;\n\n    onChange(input.name, input.value);\n  };\n\n  return (\n    <FormControl\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n    >\n      <FormLabel htmlFor={name} mb=\"0\">\n        {label}\n      </FormLabel>\n      <Input\n        boxShadow=\"md\"\n        w=\"60%\"\n        border=\"black 2px solid\"\n        id={name}\n        name={name}\n        value={value as string}\n        onChange={setData}\n      />\n    </FormControl>\n  );\n};\n\nexport default InputText;\n","import React from 'react';\n\nimport {\n  FormControl,\n  FormLabel,\n  NumberInput,\n  NumberInputField,\n} from '@chakra-ui/react';\n\nexport interface INumberInput {\n  units: string;\n  defaultvalue: number;\n}\n\nconst InputNumber = (props: INumberInput): JSX.Element => {\n  const { defaultvalue, units } = props;\n\n  return (\n    <FormControl>\n      <FormLabel\n        position=\"absolute\"\n        htmlFor={units}\n        fontSize=\"13px\"\n        top=\"-20px\"\n      >\n        {units}\n      </FormLabel>\n      <NumberInput\n        position=\"relative\"\n        w=\"55px\"\n        defaultValue={defaultvalue}\n        min={0}\n        max={59}\n        id={units}\n      >\n        <NumberInputField\n          textAlign=\"center\"\n          padding=\"0 5px\"\n          fontWeight=\"600\"\n          fontSize=\"36px\"\n        />\n      </NumberInput>\n    </FormControl>\n  );\n};\n\nexport default InputNumber;\n","import React from 'react';\n\nimport { FormControl, FormLabel, Stack, Text } from '@chakra-ui/react';\n\nimport InputNumber from '../../components/InputNumber/InputNumber';\n\ninterface ITimer {\n  time: number;\n}\n\nconst Timer = (props: ITimer): JSX.Element => {\n  const { time } = props;\n\n  // console.log(time);\n\n  const minutes = Math.trunc(time / 60);\n\n  const seconds = time % 60;\n\n  return (\n    <FormControl\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n    >\n      <FormLabel htmlFor=\"timer\" mb=\"0\">\n        Round time:\n      </FormLabel>\n\n      <Stack\n        id=\"timer\"\n        shadow=\"lg\"\n        direction=\"row\"\n        spacing={3}\n        align=\"center\"\n        p=\"5px\"\n        w=\"150px\"\n        height=\"75px\"\n      >\n        <InputNumber defaultvalue={minutes} units=\"minutes\" />\n\n        <Text>:</Text>\n\n        <InputNumber defaultvalue={seconds} units=\"seconds\" />\n      </Stack>\n    </FormControl>\n  );\n};\n\nexport default Timer;\n","//  Kaesid - Дефолтный дизайн карт мне не нравится, свой я еще не придумал. Так что, пока заглушка.\n\nimport React from 'react';\n\nimport { Stack, IconButton, Heading, Text } from '@chakra-ui/react';\n\nimport { ImPencil } from 'react-icons/im';\nimport { CloseIcon } from '@chakra-ui/icons';\n\nimport { ICardData } from '../../../../shared/types/session/card';\n\nconst GameCard = (props: ICardData): JSX.Element => {\n  const { card, edit, units, deleteCard } = props;\n\n  const { value, base64 } = card;\n\n  return (\n    <Stack\n      position=\"relative\"\n      w=\"150px\"\n      height=\"210px\"\n      direction=\"column\"\n      justify=\"center\"\n      align=\"center\"\n      p=\"10px 10px\"\n      boxShadow=\"lg\"\n    >\n      <Text\n        fontSize=\"2xl\"\n        maxW=\"130px\"\n        fontStyle=\"italic\"\n        fontWeight=\"bold\"\n        isTruncated\n        mb=\"20px\"\n      >\n        {value}\n      </Text>\n      {base64 ? (\n        // img src={base64}\n        <Heading fontStyle=\"italic\" size=\"lg\">\n          {base64}\n        </Heading>\n      ) : (\n        <Heading fontStyle=\"italic\" size=\"lg\">\n          {units}\n        </Heading>\n      )}\n      <IconButton\n        position=\"absolute\"\n        aria-label=\"edit\"\n        background=\"transparent\"\n        visibility={true ? 'visible' : 'hidden'}\n        top=\"0\"\n        left=\"0\"\n        size=\"lg\"\n        icon={<ImPencil />}\n        onClick={() => edit(value)}\n      />\n      <IconButton\n        position=\"absolute\"\n        aria-label=\"delete\"\n        background=\"transparent\"\n        visibility={true ? 'visible' : 'hidden'}\n        top=\"0\"\n        right=\"0\"\n        size=\"lg\"\n        icon={<CloseIcon />}\n        onClick={() => deleteCard(value)}\n      />\n    </Stack>\n  );\n};\n\nexport default GameCard;\n","import React, { useRef } from 'react';\nimport { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst loadImgFromSrc = (src: string): Promise<HTMLImageElement> => {\n  return new Promise<HTMLImageElement>((res, rej) => {\n    const img = new Image();\n    img.src = src;\n    img.onload = () => {\n      res(img);\n    };\n    img.onerror = () => {\n      rej(new Error(`can't load img`));\n    };\n  });\n};\n\nconst getBlobPromise = (canvas: HTMLCanvasElement): Promise<Blob | null> => {\n  return new Promise(res => {\n    canvas.toBlob(res);\n  });\n};\n\nconst getBase64 = (canvas: HTMLCanvasElement): Promise<string | null> => {\n  return new Promise(res => {\n    getBlobPromise(canvas).then(blob => {\n      if (!blob) res(null);\n      else {\n        const reader = new FileReader();\n        reader.onloadend = () => res(reader.result as string);\n        reader.onerror = () => res(null);\n        reader.onabort = () => res(null);\n        reader.readAsDataURL(blob);\n      }\n    });\n  });\n};\n\nconst calcDrawParams = (\n  img: HTMLImageElement,\n): [number, number, number, number] => {\n  let sx: number;\n  let sy: number;\n  let sWidth: number;\n  let sHeight: number;\n\n  const ratio = img.width / img.height;\n\n  if (ratio >= 1) {\n    sWidth = img.height;\n    sHeight = img.height;\n    sx = (img.width - sWidth) / 2;\n    sy = 0;\n  } else {\n    sWidth = img.width;\n    sHeight = img.width;\n    sx = 0;\n    sy = (img.height - sHeight) / 2;\n  }\n\n  return [sx, sy, sWidth, sHeight];\n};\n\nconst drawImgToCanvas = (img: HTMLImageElement, canvas: HTMLCanvasElement) => {\n  const [sx, sy, sWidth, sHeight] = calcDrawParams(img);\n  canvas\n    .getContext('2d')\n    ?.drawImage(\n      img,\n      sx,\n      sy,\n      sWidth,\n      sHeight,\n      0,\n      0,\n      canvas.width,\n      canvas.height,\n    );\n};\n\nexport interface GetCuttedBase64FromImgSrc {\n  src: string;\n  w: number;\n  h: number;\n}\n\nconst convert = (\n  canvasRef: React.MutableRefObject<HTMLCanvasElement>,\n  opts: GetCuttedBase64FromImgSrc,\n) => {\n  return new Promise<string>((res, rej) => {\n    loadImgFromSrc(opts.src)\n      .then(img => {\n        // waiting for rendering in the dom if the image was loaded very fast\n        setTimeout(() => {\n          const canvas = canvasRef.current;\n          canvas.width = opts.w;\n          canvas.height = opts.h;\n          drawImgToCanvas(img, canvas);\n          getBase64(canvas).then(base64 => {\n            if (typeof base64 === 'string') res(base64);\n            else rej('convertation to a base64 string failed');\n          });\n        });\n      })\n      .catch(err => rej(err));\n  });\n};\n\nexport const useImgConvertor = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null!);\n\n  useEffect(() => {\n    const div = document.createElement('div');\n    ReactDOM.render(\n      ReactDOM.createPortal(<canvas ref={canvasRef} />, div),\n      div,\n    );\n\n    return () => {\n      ReactDOM.render(<></>, div);\n    };\n  });\n\n  return convert.bind(null, canvasRef);\n};\n","import { Button, Flex, Box, FormLabel, Avatar } from '@chakra-ui/react';\nimport { useImgConvertor } from '../../../../hooks/useImgConvertor';\nimport { useLoadImg } from '../../../../hooks/useImgLoader';\nimport { useTypedSelector, useAppDispatch } from '../../../../redux/store';\nimport {\n  changeAvatarBase64,\n  changeAvatarBgColor,\n} from '../../../../redux/slices/userInfo';\nimport { AVATAR_HEIGHT, AVATAR_WIDTH } from '../../../../constants';\n\nconst AvatarForm = () => {\n  const dispatch = useAppDispatch();\n  const { name, surname, avatarBase64, avatarBgColor } = useTypedSelector(\n    state => state.userInfo,\n  );\n\n  const convert = useImgConvertor();\n  const loadImg = useLoadImg();\n\n  const avatarChange = (): void => {\n    loadImg()\n      .then(src => {\n        convert({ src, w: AVATAR_WIDTH, h: AVATAR_HEIGHT })\n          .then(base64 => {\n            dispatch(changeAvatarBase64(base64));\n          })\n          .catch(() => {}); // user's file is invalid, show some error\n      })\n      .catch(err => {\n        // console.log(err);\n      }); // user didn't pick a file, just ignore\n  };\n\n  const deleteAvatar = (): void => {\n    dispatch(changeAvatarBase64(''));\n  };\n\n  return (\n    <Flex direction=\"column\" justify=\"space-between\" alignItems=\"center\">\n      <Avatar\n        name={`${name} ${surname}`}\n        bg={avatarBgColor}\n        size=\"2xl\"\n        src={avatarBase64}\n        color=\"white\"\n      />\n      <input\n        type=\"color\"\n        value={avatarBgColor}\n        onChange={e => dispatch(changeAvatarBgColor(e.target.value))}\n      />\n      <Box>\n        <FormLabel mb=\"1rem\">Image:</FormLabel>\n        <Button colorScheme=\"facebook\" onClick={avatarChange}>\n          Upload\n        </Button>\n        <Button colorScheme=\"facebook\" variant=\"outline\" onClick={deleteAvatar}>\n          Reset\n        </Button>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default AvatarForm;\n","export const useLoadImg = () => {\n  return () => {\n    return new Promise<string>((res, rej) => {\n      const input = document.createElement('input');\n      input.type = 'file';\n      input.click();\n      input.addEventListener('change', e => {\n        const file = input.files?.[0];\n\n        if (file) {\n          const reader = new FileReader();\n          reader.onload = () => {\n            const src = reader.result;\n\n            if (typeof src === 'string') res(src);\n            else rej();\n          };\n          reader.readAsDataURL(file);\n        } else rej();\n      });\n    });\n  };\n};\n","export const AVATAR_WIDTH = 200;\nexport const AVATAR_HEIGHT = 200;\n","import React from 'react';\n\nimport {\n  Button,\n  ButtonGroup,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  Stack,\n  Input,\n  FormControl,\n  FormLabel,\n} from '@chakra-ui/react';\n\nimport { ICardModalData } from '../../../../shared/types/session/card';\n\nimport AvatarForm from '../../modules/HomePage/components/avatar-form/avatar-form';\nimport { LOCALE_US } from '../../locales/locale-us';\n\nconst GameCardModal = (props: ICardModalData): JSX.Element => {\n  const { modal } = props;\n\n  const { isOpen, onClose, activeCard, changeCardValue, setCard } = modal;\n\n  const { value, base64 } = activeCard;\n\n  console.log(base64); //! если загружено изображение, засетать его в base64, иначе =undefined\n\n  const setCardData = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const input = event.target;\n\n    changeCardValue({ ...activeCard, [input.name]: input.value });\n  };\n\n  return (\n    <>\n      <Modal closeOnOverlayClick={false} isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Card Data:</ModalHeader>\n\n          <ModalBody mb=\"20px\">\n            <Stack d=\"flex\" justify=\"space-around\" align=\"stretch\">\n              <FormControl mb=\"10px\" id=\"title\" isRequired>\n                <Stack spacing={2} direction=\"row\" align=\"center\">\n                  <FormLabel>Card Value:</FormLabel>\n                  <Input value={value} onChange={setCardData} name=\"value\" />\n                </Stack>\n              </FormControl>\n              <Stack spacing={2} direction=\"column\" align=\"center\">\n                <FormLabel>{LOCALE_US.SETTINGS_CARDS_MODAL_CUSTOM}</FormLabel>\n                <AvatarForm />\n                {/* Требуется слегка изменненная версия данного компонента:\n                без дефолтной аватары, кнопка ресет - отсутствие изображения. */}\n              </Stack>\n            </Stack>\n          </ModalBody>\n\n          <ModalFooter>\n            <ButtonGroup\n              colorScheme=\"facebook\"\n              width=\"100%\"\n              display=\"flex\"\n              justifyContent=\"space-between\"\n            >\n              <Button padding=\"0 50px\" variant=\"outline\" onClick={onClose}>\n                No\n              </Button>\n              <Button padding=\"0 50px\" onClick={setCard}>\n                Yes\n              </Button>\n            </ButtonGroup>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GameCardModal;\n","import React from 'react';\n\nimport { Stack, Icon } from '@chakra-ui/react';\n\nimport { ImPlus } from 'react-icons/im';\n\ninterface IGameCardCreate {\n  onClick: () => void;\n}\n\nconst NewGameCardButton = (props: IGameCardCreate): JSX.Element => {\n  const { onClick } = props;\n\n  return (\n    <Stack\n      w=\"150px\"\n      height=\"210px\"\n      onClick={() => onClick()}\n      align=\"center\"\n      justifyContent=\"center\"\n      p=\"10px\"\n      boxShadow=\"lg\"\n      cursor=\"pointer\"\n      _hover={{ bg: 'green.300' }}\n    >\n      <Icon as={ImPlus} w={8} h={8} />\n    </Stack>\n  );\n};\n\nexport default NewGameCardButton;\n","import React from 'react';\n\nimport { Box, Heading, Stack } from '@chakra-ui/react';\n\nimport { ICardData, ICardsView } from '../../../../shared/types/session/card';\n\nimport GameCard from '../../components/GameCard/GameCard';\nimport GameCardModal from '../../components/GameCardModal/GameCardModal';\nimport NewGameCardButton from '../../components/NewGameCardButton/NewGameCardButton';\nimport { LOCALE_US } from '../../locales/locale-us';\n\nconst IssueCardView = (props: ICardsView): JSX.Element => {\n  const { cards, modal, units, deleteCard } = props;\n\n  return (\n    <Box mb=\"30px\">\n      <Heading mb=\"20px\" size=\"md\">\n        {LOCALE_US.SETTINGS_CARDS_HEADER}\n      </Heading>\n\n      <Stack w=\"100%\" wrap=\"wrap\" direction=\"row\">\n        {cards.map(card => {\n          const id = card.value;\n\n          const data: ICardData = {\n            card,\n            edit: modal.openModal,\n            units,\n            deleteCard,\n          };\n\n          return (\n            <Stack key={`${id}-wrap`}>\n              <GameCard {...data} key={id} />;\n            </Stack>\n          );\n        })}\n\n        <NewGameCardButton onClick={modal.openModal} />\n\n        <GameCardModal modal={modal} />\n      </Stack>\n    </Box>\n  );\n};\n\nexport default IssueCardView;\n","import React, { useState } from 'react';\n\nimport { useDisclosure, useToast } from '@chakra-ui/react';\n\nimport {\n  CardData,\n  ICardModal,\n  ICardsData,\n  ICardsView,\n} from '../../../../shared/types/session/card';\n\nimport GameCardsView from './GameCardsView';\nimport { OBJ_PROCESSOR } from '../../../../shared/helpers/processors/obj-processor';\n\nconst GameCards = (props: ICardsData): JSX.Element => {\n  const toast = useToast();\n\n  const { cards, units, setLocalSettings } = props;\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const newGameCard: CardData = {\n    value: '',\n  };\n\n  const [editedCardIndex, setEditedCardIndex] = useState(-1);\n\n  const [activeCard, setActiveCard] = useState<CardData>(newGameCard);\n\n  const findEditedCard = (cardValue = ''): CardData | undefined => {\n    return cards.find(card => card.value === cardValue);\n  };\n\n  const openModal = (cardValue = ''): void => {\n    const editedCard = findEditedCard(cardValue);\n\n    if (editedCard) {\n      setActiveCard(editedCard);\n\n      setEditedCardIndex(cards.indexOf(editedCard));\n    } else {\n      setActiveCard(newGameCard);\n\n      setEditedCardIndex(-1);\n    }\n\n    onOpen();\n  };\n\n  const changeCardValue = (card: CardData): void => {\n    setActiveCard({ ...card });\n  };\n\n  const setCard = (): void => {\n    const CardWithSameValue = findEditedCard(activeCard.value);\n\n    const cardsCopy = OBJ_PROCESSOR.deepClone(cards);\n\n    if (CardWithSameValue) {\n      const indexOfCardWithSameValue = cards.indexOf(CardWithSameValue);\n\n      if (editedCardIndex === indexOfCardWithSameValue) {\n        cardsCopy[editedCardIndex] = activeCard;\n\n        cardsCopy.sort((s, t) => s.value.localeCompare(t.value));\n\n        console.log(cardsCopy);\n\n        setLocalSettings('cards', cardsCopy);\n\n        onClose();\n      } else {\n        toast({\n          title: 'Value must be unique!',\n          status: 'error',\n          duration: 5000,\n          isClosable: true,\n        });\n      }\n    } else {\n      if (editedCardIndex !== -1) {\n        cardsCopy[editedCardIndex] = activeCard;\n      } else {\n        cardsCopy.push(activeCard);\n      }\n\n      cardsCopy.sort((s, t) => s.value.localeCompare(t.value));\n\n      console.log(cardsCopy);\n\n      setLocalSettings('cards', cardsCopy);\n\n      onClose();\n    }\n  };\n\n  const deleteCard = (value: string): void => {\n    const card = findEditedCard(value);\n\n    console.log(card);\n\n    if (card) {\n      const cardIndex = cards.indexOf(card);\n\n      const cardsCopy = OBJ_PROCESSOR.deepClone(cards);\n\n      console.log(cardIndex);\n\n      cardsCopy.splice(cardIndex, 1);\n\n      setLocalSettings('cards', cardsCopy);\n    }\n  };\n\n  const modalData: ICardModal = {\n    onClose: onClose,\n    isOpen: isOpen,\n    openModal: openModal,\n    activeCard: activeCard,\n    changeCardValue: changeCardValue,\n    setCard: setCard,\n  };\n\n  const data: ICardsView = { cards, modal: modalData, units, deleteCard };\n\n  return <GameCardsView {...data} />;\n};\n\nexport default GameCards;\n","import React from 'react';\n\nimport { Stack, Heading, Box } from '@chakra-ui/react';\nimport { LOCALE_US } from '../../locales/locale-us';\nimport { ISettingsComponent } from '../../../../shared/types/settings';\nimport Switcher from '../../components/Switcher/Switcher';\nimport InputText from '../../components/InputText/InputText';\nimport Timer from '../Timer/Timer';\nimport { useAppDispatch, useTypedSelector } from '../../redux/store';\nimport { setSettings } from '../../redux/slices/settings';\nimport GameCards from '../GameCards/GameCards';\nimport { CardData, ICardsData } from '../../../../shared/types/session/card';\n\nconst Settings = (): JSX.Element => {\n  const dispatch = useAppDispatch();\n\n  const localSettings = useTypedSelector(state => state.settings);\n\n  const {\n    dealerAsPlayer,\n    changingCardInRoundEnd,\n    isTimerNeeded,\n    scoreType,\n    scoreTypeShort,\n    roundTime,\n    cards,\n  } = localSettings;\n\n  const setLocalSettings = (\n    name: string,\n    value: string | boolean | CardData[],\n  ): void => {\n    dispatch(setSettings({ ...localSettings, [name]: value }));\n  };\n\n  const switchersData: ISettingsComponent[] = [\n    {\n      name: 'dealerAsPlayer',\n      label: LOCALE_US.SETTINGS_IS_DEALER_PLAYER,\n      value: dealerAsPlayer,\n      onChange: setLocalSettings,\n    },\n    {\n      name: 'changingCardInRoundEnd',\n      label: LOCALE_US.SETTINGS_OPEN_CARDS_ON_ROUND_END,\n      value: changingCardInRoundEnd,\n      onChange: setLocalSettings,\n    },\n    {\n      name: 'isTimerNeeded',\n      label: LOCALE_US.SETTINGS_IS_TIMER_ON,\n      value: isTimerNeeded,\n      onChange: setLocalSettings,\n    },\n  ];\n\n  const inputsData: ISettingsComponent[] = [\n    {\n      name: 'scoreType',\n      label: LOCALE_US.SETTINGS_SCORE_TYPE,\n      value: scoreType,\n      onChange: setLocalSettings,\n    },\n    {\n      name: 'scoreTypeShort',\n      label: LOCALE_US.SETTINGS_SCORE_TYPE_SHORT,\n      value: scoreTypeShort,\n      onChange: setLocalSettings,\n    },\n  ];\n\n  const cardsData: ICardsData = {\n    cards,\n    units: scoreTypeShort,\n    setLocalSettings,\n  };\n\n  return (\n    <Box>\n      <Stack direction=\"column\" spacing={5} w=\"40%\" mb=\"30px\">\n        <Heading size=\"md\" textAlign=\"end\">\n          Game settings:\n        </Heading>\n\n        {switchersData.map(switcherData => {\n          const { name } = switcherData;\n\n          return <Switcher data={switcherData} key={name} />;\n        })}\n\n        {inputsData.map(inputData => {\n          const { name } = inputData;\n\n          return <InputText data={inputData} key={name} />;\n        })}\n\n        {isTimerNeeded && <Timer time={roundTime || 0} />}\n      </Stack>\n\n      <GameCards {...cardsData} />\n    </Box>\n  );\n};\n\nexport default Settings;\n","import React from 'react';\n\nimport {\n  Button,\n  Stack,\n  Heading,\n  Box,\n  useToast,\n  useClipboard,\n} from '@chakra-ui/react';\n\ninterface ILink {\n  link: string;\n}\n\nconst JoinGameLink = (props: ILink) => {\n  const { link } = props;\n\n  const toast = useToast();\n\n  const { hasCopied, onCopy } = useClipboard(link);\n\n  const saveToClipboard = (): void => {\n    onCopy();\n\n    toast({\n      title: 'Successfully saved!',\n      status: 'success',\n      duration: 1200,\n      isClosable: true,\n    });\n  };\n\n  return (\n    <Box mb=\"20px\">\n      <Heading fontWeight=\"medium\" fontStyle=\"italic\" size=\"md\">\n        Link to lobby:\n      </Heading>\n\n      <Stack\n        maxW=\"400px\"\n        direction=\"row\"\n        justify=\"flex-start\"\n        align=\"center\"\n        p=\"10px 0\"\n        h=\"45px\"\n      >\n        <Heading\n          fontWeight=\"medium\"\n          boxShadow=\"lg\"\n          size=\"md\"\n          maxW=\"300px\"\n          m=\"0\"\n          padding=\"10px 0 10px 5px\"\n          mr=\"-10px\"\n          isTruncated={true}\n          pr=\"10px\"\n        >\n          {link}\n        </Heading>\n        <Button\n          colorScheme=\"facebook\"\n          w=\"100px\"\n          variant=\"solid\"\n          onClick={saveToClipboard}\n        >\n          {hasCopied ? 'Done!' : 'Copy'}\n        </Button>\n      </Stack>\n    </Box>\n  );\n};\n\nexport default JoinGameLink;\n","import React from 'react';\nimport { Box } from '@chakra-ui/react';\n\nimport { useTypedSelector } from '../../redux/store';\n\nimport UseSessionData from '../../hooks/UseSessionData/UseSessionData';\n\nimport GameControlButtons from '../../components/GameControlButtons/GameControlButtons';\nimport DealerPlate from '../../components/DealerPlate/DealerPlate';\nimport EditableHeader from '../../containers/EdidableHeader/EditableHeader';\nimport UserCards from '../../containers/UserCards/UserCards';\nimport IssueCards from '../../containers/IssuesCards/IssuesCards';\nimport Settings from '../../containers/Settings/Settings';\nimport JoinGameLink from '../../containers/JoinGameLink/JoinGameLink';\n\nconst Lobby = (): JSX.Element => {\n  const sessionData = useTypedSelector(state => state.session);\n\n  const {\n    dealerData,\n    membersData,\n    sessionNameData,\n    issuesData,\n    isPlayerDealer,\n  } = UseSessionData(sessionData);\n\n  return (\n    <Box minH=\"100vh\" maxW=\"1440px\" w=\"90%\" m=\"0 auto\" p=\"5px\">\n      <EditableHeader {...sessionNameData} />\n      <DealerPlate {...dealerData} />\n      <JoinGameLink link={`${window.location}`} />\n      <GameControlButtons isPlayerDealer={isPlayerDealer} />\n      <UserCards {...membersData} />\n      <IssueCards {...issuesData} />\n      {isPlayerDealer && <Settings />}\n    </Box>\n  );\n};\n\nexport default Lobby;\n","export default __webpack_public_path__ + \"static/media/poker-planing.f68054f9.png\";","import {\n  Image,\n  Heading,\n  Text,\n  Button,\n  Input,\n  Flex,\n  Box,\n} from '@chakra-ui/react';\nimport pokerPlaning from '../../assets/images/poker-planing.png';\nimport { UserRole } from '../../../../../../shared/types/user/user-role';\nimport { USER_ROLES } from '../../../../../../shared/types/user/user-role';\nimport { useAppDispatch, useTypedSelector } from '../../../../redux/store';\nimport { homePageSlice } from '../../../../redux/slices/home-page';\n\ninterface MainPageProps {\n  onPopupCalled: (forRole: UserRole) => void;\n}\n\nconst MainPage = ({ onPopupCalled }: MainPageProps): JSX.Element => {\n  const lobbyURL = useTypedSelector(state => state.homePage.lobbyURL);\n  const dispatch = useAppDispatch();\n  const { setLobbyURL } = homePageSlice.actions;\n\n  return (\n    <Flex align=\"center\" justify=\"center\">\n      <Flex width=\"70%\" direction=\"column\" gridGap=\"2rem\" align=\"center\">\n        <Image src={pokerPlaning} alt=\"Poker Planning\" fit=\"scale-down\" />\n\n        <Flex gridGap=\"2rem\">\n          <Flex direction=\"column\" gridGap=\"2rem\">\n            <Flex direction=\"column\" gridGap=\"2rem\">\n              <Heading>Start your planning:</Heading>\n\n              <Flex justify=\"space-between\">\n                <Text>Create session:</Text>\n                <Button\n                  colorScheme=\"facebook\"\n                  onClick={() => onPopupCalled(USER_ROLES.DEALER)}\n                >\n                  Start new game\n                </Button>\n              </Flex>\n            </Flex>\n\n            <Flex direction=\"column\" gridGap=\"2rem\">\n              <Heading>OR:</Heading>\n              <Text>Connect to lobby by URL:</Text>\n              <Flex>\n                <Input\n                  value={lobbyURL}\n                  onChange={e => dispatch(setLobbyURL(e.target.value || ''))}\n                />\n                <Button\n                  colorScheme=\"facebook\"\n                  onClick={() => onPopupCalled(USER_ROLES.PLAYER)}\n                >\n                  Connect\n                </Button>\n              </Flex>\n            </Flex>\n          </Flex>\n\n          <Box bg=\"grey\">SOME TEXT</Box>\n        </Flex>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default MainPage;\n","import React from 'react';\nimport { useRadio, Box } from '@chakra-ui/react';\n\n// interface Props {\n//   props:\n// }\n\nconst RadioCard = (props: any) => {\n  const { getInputProps, getCheckboxProps } = useRadio(props);\n\n  const input = getInputProps();\n  const checkbox = getCheckboxProps();\n\n  return (\n    <Box as=\"label\">\n      <input {...input} />\n      <Box\n        {...checkbox}\n        cursor=\"pointer\"\n        borderWidth=\"1px\"\n        borderRadius=\"md\"\n        boxShadow=\"md\"\n        _checked={{\n          bg: 'facebook.600',\n          color: 'white',\n          borderColor: 'facebook.600',\n        }}\n        _focus={{\n          boxShadow: 'outline',\n        }}\n        w=\"10rem\"\n        textAlign=\"center\"\n        py={3}\n      >\n        {props.children}\n      </Box>\n    </Box>\n  );\n};\n\nexport default RadioCard;\n","import React from 'react';\nimport { useRadioGroup, HStack } from '@chakra-ui/react';\nimport RadioCard from './radio-card';\nimport { USER_ROLES } from '../../../../../../shared/types/user/user-role';\n\nconst options = [USER_ROLES.PLAYER, USER_ROLES.SPECTATOR];\n\nconst RadioButtons = () => {\n  const { getRootProps, getRadioProps } = useRadioGroup({\n    name: 'role',\n    defaultValue: USER_ROLES.PLAYER,\n    onChange: console.log,\n  });\n\n  const group = getRootProps();\n\n  return (\n    <HStack {...group}>\n      {options.map(value => {\n        const radio = (getRadioProps as (obj: { value: string }) => any)({\n          value,\n        });\n\n        return (\n          <RadioCard key={value} {...radio}>\n            {value}\n          </RadioCard>\n        );\n      })}\n    </HStack>\n  );\n};\n\nexport default RadioButtons;\n","import { ChangeEvent } from 'react';\nimport {\n  Stack,\n  Input,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n} from '@chakra-ui/react';\nimport { useTypedSelector, useAppDispatch } from '../../../../redux/store';\nimport {\n  changeName,\n  changeSurname,\n  changeJobPosition,\n} from '../../../../redux/slices/userInfo';\n\nconst InputsStack = () => {\n  const dispatch = useAppDispatch();\n  const { name, surname, jobPosition } = useTypedSelector(\n    state => state.userInfo,\n  );\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        return dispatch(changeName(value));\n      case 'surname':\n        return dispatch(changeSurname(value));\n      case 'jobPosition':\n        return dispatch(changeJobPosition(value));\n      default:\n        return;\n    }\n  };\n\n  return (\n    <Stack w=\"60%\" spacing={3}>\n      <FormControl>\n        <FormLabel>Your first name:</FormLabel>\n        <Input\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          size=\"md\"\n          isRequired\n        />\n        <FormErrorMessage>Name is required</FormErrorMessage>\n      </FormControl>\n      <FormControl>\n        <FormLabel>Your last name:</FormLabel>\n        <Input\n          name=\"surname\"\n          value={surname}\n          onChange={handleChange}\n          size=\"md\"\n        />\n        <FormErrorMessage></FormErrorMessage>\n      </FormControl>\n      <FormControl>\n        <FormLabel>Your job position:</FormLabel>\n        <Input\n          name=\"jobPosition\"\n          value={jobPosition}\n          onChange={handleChange}\n          size=\"md\"\n        />\n        <FormErrorMessage></FormErrorMessage>\n      </FormControl>\n    </Stack>\n  );\n};\n\nexport default InputsStack;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  Button,\n  Flex,\n  Text,\n} from '@chakra-ui/react';\nimport RadioButtons from '../radio-buttons/radio-buttons';\nimport InputsStack from '../inputs-stack/inputs-stack';\nimport AvatarForm from '../avatar-form/avatar-form';\nimport { useAppDispatch } from '../../../../redux/store';\nimport {\n  connectToLobby,\n  createSession,\n} from '../../../../redux/slices/connect';\n\ninterface ConnectPopupProps {\n  isOpen: boolean;\n  onClose: () => void;\n  forDealer: boolean;\n}\n\nconst ConnectPopup = ({\n  isOpen,\n  onClose,\n  forDealer,\n}: ConnectPopupProps): JSX.Element => {\n  const dispatch = useAppDispatch();\n\n  return (\n    <Modal\n      size=\"xl\"\n      isOpen={isOpen}\n      onClose={onClose}\n      motionPreset=\"slideInBottom\"\n      onOverlayClick={onClose}\n      isCentered={true}\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Connect to lobby</ModalHeader>\n        <ModalBody>\n          <Flex direction=\"column\" alignItems=\"center\" gridGap=\"5rem\">\n            <Flex w=\"100%\" justify=\"space-between\">\n              <InputsStack />\n              <AvatarForm />\n            </Flex>\n            {forDealer ? (\n              <Text size=\"2xl\">You will be a dealer</Text>\n            ) : (\n              <RadioButtons />\n            )}\n          </Flex>\n        </ModalBody>\n\n        <ModalFooter justifyContent=\"space-between\">\n          <Button colorScheme=\"facebook\" variant=\"outline\" onClick={onClose}>\n            Close\n          </Button>\n          <Button\n            colorScheme=\"facebook\"\n            onClick={() =>\n              forDealer ? dispatch(createSession()) : dispatch(connectToLobby())\n            }\n          >\n            Confirm\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default ConnectPopup;\n","import { useEffect, useState } from 'react';\nimport { useDisclosure } from '@chakra-ui/react';\nimport MainPage from './components/main-page/main-page';\nimport ConnectPopup from './components/popup/popup';\nimport { USER_ROLES } from '../../../../shared/types/user/user-role';\nimport { UserRole } from '../../../../shared/types/user/user-role';\nimport { useAppDispatch } from '../../redux/store';\nimport { sessionSlice } from '../../redux/slices/session';\n\nconst HomePage = (): JSX.Element => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [dealer, setDealer] = useState(false);\n\n  const onPopupCall = (forRole: UserRole) => {\n    if (forRole === USER_ROLES.DEALER) {\n      setDealer(true);\n      onOpen();\n    } else {\n      setDealer(false);\n      onOpen();\n    }\n  };\n\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(sessionSlice.actions.dang_reset());\n  }, [dispatch]);\n\n  return (\n    <>\n      <MainPage onPopupCalled={onPopupCall} />\n      <ConnectPopup isOpen={isOpen} onClose={onClose} forDealer={dealer} />\n    </>\n  );\n};\n\nexport default HomePage;\n","import React from 'react';\nimport { Box } from '@chakra-ui/react';\n\nimport { useTypedSelector } from '../../redux/store';\n\nimport UseSessionData from '../../hooks/UseSessionData/UseSessionData';\n\nimport GameControlButtons from '../../components/GameControlButtons/GameControlButtons';\nimport DealerPlate from '../../components/DealerPlate/DealerPlate';\nimport EditableHeader from '../../containers/EdidableHeader/EditableHeader';\nimport UserCards from '../../containers/UserCards/UserCards';\nimport IssueCards from '../../containers/IssuesCards/IssuesCards';\nimport JoinGameLink from '../../containers/JoinGameLink/JoinGameLink';\n\nconst Game = (): JSX.Element => {\n  const sessionData = useTypedSelector(state => state.session);\n\n  const {\n    dealerData,\n    membersData,\n    sessionNameData,\n    issuesData,\n    isPlayerDealer,\n  } = UseSessionData(sessionData);\n\n  return (\n    <Box minH=\"100vh\" maxW=\"1440px\" w=\"90%\" m=\"0 auto\" p=\"5px\">\n      <EditableHeader {...sessionNameData} />\n      <DealerPlate {...dealerData} />\n      <JoinGameLink link={`${window.location}`} />\n      <GameControlButtons isPlayerDealer={isPlayerDealer} />\n      <UserCards {...membersData} />\n      <IssueCards {...issuesData} />\n    </Box>\n  );\n};\n\nexport default Game;\n","// ! Kaesid - временный файл, на удаление после того, как определимся с чакровскими компонентами\n\nimport { IRoute } from './routesData';\n\nimport Alerts from '../../components/templates/Alerts/Alerts';\nimport ChakraAnimation from '../../components/templates/Animation/ChakraAnimation';\nimport ChakraAlertDialog from '../../components/templates/AlertDialog/ChakraAlertDialog';\nimport ChakraButtons from '../../components/templates/ChakraButtons/ChakraButtons';\nimport ChakraModal from '../../components/templates/Modal/ChakraModal';\nimport ChakraAvatar from '../../components/templates/Avatar/ChakraAvatar';\nimport ChakraLoader from '../../components/Loader/ChakraLoader';\nimport ChakraEditableText from '../../components/templates/EditableText/ChakraEditableText';\nimport ActionButtonExample from '../../containers/ComponentsExamples/Buttons/ButtonsExample';\n\nexport enum TemplateRoutesPath {\n  ROOT = '/',\n  ANIMATION = '/animation/',\n  ALERTS = '/alerts/',\n  ALERT_DIALOG = '/alert-dialog/',\n  BUTTONS = '/buttons/',\n  MODAL = '/modal/',\n  AVATAR = '/avatar/',\n  LOADER = '/loader/',\n  EDITABLE = '/editable/',\n  BUTTONS_EXAMPLE = '/buttons-example',\n  SETTINGS = '/settings',\n  CARDS = '/cards',\n}\n\nconst templatesRoutes: IRoute[] = [\n  {\n    key: 'chakraAnimation',\n    path: TemplateRoutesPath.ANIMATION,\n    isExact: true,\n    Component: ChakraAnimation,\n  },\n  {\n    key: 'chakraAlerts',\n    path: TemplateRoutesPath.ALERTS,\n    isExact: true,\n    Component: Alerts,\n  },\n  {\n    key: 'chakraAlertDialog',\n    path: TemplateRoutesPath.ALERT_DIALOG,\n    isExact: true,\n    Component: ChakraAlertDialog,\n  },\n  {\n    key: 'chakraButtons',\n    path: TemplateRoutesPath.BUTTONS,\n    isExact: true,\n    Component: ChakraButtons,\n  },\n  {\n    key: 'chakraModal',\n    path: TemplateRoutesPath.MODAL,\n    isExact: true,\n    Component: ChakraModal,\n  },\n  {\n    key: 'chakraAvatar',\n    path: TemplateRoutesPath.AVATAR,\n    isExact: true,\n    Component: ChakraAvatar,\n  },\n  {\n    key: 'chakraLoader',\n    path: TemplateRoutesPath.LOADER,\n    isExact: true,\n    Component: ChakraLoader,\n  },\n  {\n    key: 'chakraEditableText',\n    path: TemplateRoutesPath.EDITABLE,\n    isExact: true,\n    Component: ChakraEditableText,\n  },\n  {\n    key: 'buttonsExample',\n    path: TemplateRoutesPath.BUTTONS_EXAMPLE,\n    isExact: true,\n    Component: ActionButtonExample,\n  },\n];\n\nexport default templatesRoutes;\n","import React from 'react';\n\nimport { Alert, AlertIcon, Stack, Button, useToast } from '@chakra-ui/react';\n\nconst Alerts = (): JSX.Element => {\n  const toast = useToast();\n\n  return (\n    <Stack spacing={3}>\n      <Alert status=\"error\">\n        <AlertIcon />\n        There was an error processing your request\n      </Alert>\n      <Alert status=\"success\">\n        <AlertIcon />\n        Data uploaded to the server. Fire on!\n      </Alert>\n      <Alert status=\"warning\">\n        <AlertIcon />\n        Seems your account is about expire, upgrade now\n      </Alert>\n      <Alert status=\"info\">\n        <AlertIcon />\n        Chakra is going live on August 30th. Get ready!\n      </Alert>\n      <Button\n        onClick={() =>\n          toast({\n            title: 'Custom Error.',\n            description: 'error message',\n            status: 'error',\n            duration: 1200,\n            isClosable: true,\n          })\n        }\n      >\n        Show timed error message\n      </Button>\n    </Stack>\n  );\n};\n\nexport default Alerts;\n","export default __webpack_public_path__ + \"static/media/logo.034ef726.svg\";","import * as React from 'react';\nimport {\n  chakra,\n  keyframes,\n  ImageProps,\n  forwardRef,\n  usePrefersReducedMotion,\n} from '@chakra-ui/react';\nimport logo from './logo.svg';\n\nconst spin = keyframes`\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n`;\n\nexport const Logo = forwardRef<ImageProps, 'img'>((props, ref) => {\n  const prefersReducedMotion = usePrefersReducedMotion();\n\n  const animation = prefersReducedMotion\n    ? undefined\n    : `${spin} infinite 20s linear`;\n\n  return <chakra.img animation={animation} src={logo} ref={ref} {...props} />;\n});\n","import React from 'react';\n\nimport { Code, Link, Text, VStack } from '@chakra-ui/react';\n\nimport { Logo } from '../../Logo/Logo';\n\nconst ChakraAnimation = (): JSX.Element => {\n  return (\n    <VStack spacing={8}>\n      <Logo h=\"40vmin\" pointerEvents=\"none\" />\n      <Text>\n        Edit <Code fontSize=\"xl\">src/App.tsx</Code> and save to reload.\n      </Text>\n      <Link\n        color=\"teal.500\"\n        href=\"https://chakra-ui.com\"\n        fontSize=\"2xl\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Learn Chakra\n      </Link>\n    </VStack>\n  );\n};\n\nexport default ChakraAnimation;\n","import React, { useRef } from 'react';\n\nimport {\n  Button,\n  AlertDialog,\n  AlertDialogOverlay,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogBody,\n  AlertDialogFooter,\n  useDisclosure,\n} from '@chakra-ui/react';\nimport { useLocale } from '../../../hooks/useLocale';\n\nconst ChakraAlertDialog = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const cancelRef = useRef(null);\n\n  const locale = useLocale();\n\n  return (\n    <>\n      <Button colorScheme=\"red\" onClick={onOpen}>\n        Kick Player\n      </Button>\n\n      <AlertDialog\n        isOpen={isOpen}\n        leastDestructiveRef={cancelRef}\n        onClose={onClose}\n      >\n        <AlertDialogOverlay>\n          <AlertDialogContent>\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\n              Kick Player?\n            </AlertDialogHeader>\n\n            <AlertDialogBody>\n              {locale.SESSION_DEALER_KICK_CONFIRMATION_POPUP_BODY}\n            </AlertDialogBody>\n\n            <AlertDialogFooter>\n              <Button ref={cancelRef} onClick={onClose}>\n                No\n              </Button>\n              <Button colorScheme=\"red\" onClick={onClose} ml={3}>\n                Yes\n              </Button>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialogOverlay>\n      </AlertDialog>\n    </>\n  );\n};\n\nexport default ChakraAlertDialog;\n","import { LocaleKey } from '../locales/locale';\nimport { useTypedSelector } from '../redux/store';\n\nexport const useLocale = (): Record<LocaleKey, string> => {\n  return useTypedSelector(state => state.locale);\n};\n","import React from 'react';\n\nimport {\n  Button,\n  ButtonGroup,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  useDisclosure,\n  Select,\n  Stack,\n  Input,\n  FormControl,\n  FormLabel,\n} from '@chakra-ui/react';\n\nconst ChakraModal = (): JSX.Element => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Button onClick={onOpen}>Create Issue</Button>\n\n      <Modal closeOnOverlayClick={false} isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Create Issue</ModalHeader>\n\n          <ModalBody mb=\"20px\">\n            <Stack>\n              <FormControl id=\"title\" isRequired>\n                <Stack spacing={2} direction=\"row\" align=\"center\">\n                  <FormLabel>Title:</FormLabel>\n                  <Input placeholder=\"Issue name\" />\n                </Stack>\n              </FormControl>\n              <Stack spacing={2} direction=\"row\" align=\"center\">\n                <FormLabel>Priority:</FormLabel>\n                <Select variant=\"filled\" bg=\"gray.100\">\n                  <option value=\"low\">Low</option>\n                  <option value=\"middle\">Middle</option>\n                  <option value=\"high\">High</option>\n                </Select>\n              </Stack>\n            </Stack>\n          </ModalBody>\n\n          <ModalFooter>\n            <ButtonGroup\n              colorScheme=\"facebook\"\n              width=\"100%\"\n              display=\"flex\"\n              justifyContent=\"space-between\"\n            >\n              <Button padding=\"0 50px\">Yes</Button>\n              <Button padding=\"0 50px\" variant=\"outline\" onClick={onClose}>\n                No\n              </Button>\n            </ButtonGroup>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ChakraModal;\n","import React from 'react';\n\nimport { Wrap, WrapItem, Avatar } from '@chakra-ui/react';\n\nconst ChakraAvatar = (): JSX.Element => {\n  return (\n    <Wrap>\n      <WrapItem>\n        <Avatar name=\"Dan Abrahmov\" src=\"\" />\n      </WrapItem>\n      <WrapItem>\n        <Avatar name=\"Kola Tioluwani\" src=\"\" />\n      </WrapItem>\n      <WrapItem>\n        <Avatar name=\"Kent Dodds\" src=\"https://bit.ly/kent-c-dodds\" />\n      </WrapItem>\n      <WrapItem>\n        <Avatar name=\"Ryan Florence\" src=\"https://bit.ly/ryan-florence\" />\n      </WrapItem>\n      <WrapItem>\n        <Avatar name=\"Prosper Otemuyiwa\" src=\"https://bit.ly/prosper-baba\" />\n      </WrapItem>\n      <WrapItem>\n        <Avatar name=\"Christian Nwamba\" src=\"https://bit.ly/code-beast\" />\n      </WrapItem>\n      <WrapItem>\n        <Avatar name=\"Segun Adebayo\" src=\"https://bit.ly/sage-adebayo\" />\n      </WrapItem>\n    </Wrap>\n  );\n};\n\nexport default ChakraAvatar;\n","import React from 'react';\n\nimport { Editable, EditableInput, EditablePreview } from '@chakra-ui/react';\n\nconst ChakraEditableText = (): JSX.Element => {\n  return (\n    <>\n      <Editable defaultValue=\"Click to edit\">\n        <EditablePreview />\n        <EditableInput />\n      </Editable>\n    </>\n  );\n};\n\nexport default ChakraEditableText;\n","//! Обзательны только два параметра для кнопки: внутренний текст, и ширина.\n//! Высота у всех кнопок, судя по макету, одинакова. Ее и шрифт зададим уже отдельно, для всего проекта.\n\nimport React from 'react';\n\nimport { Button } from '@chakra-ui/react';\n\nimport { IButtonData } from './buttonTypes';\n\nconst ActionButton = (props: IButtonData): JSX.Element => {\n  const { data } = props;\n\n  const {\n    text,\n    width,\n    isLoading = false,\n    isCofirmButton = true,\n    loadingText = '',\n    onClick,\n  } = data;\n\n  const variant = isCofirmButton ? 'solid' : 'outline';\n\n  return (\n    <Button\n      colorScheme=\"facebook\"\n      w={width}\n      variant={variant}\n      isLoading={isLoading}\n      loadingText={loadingText}\n      onClick={onClick}\n    >\n      {text}\n    </Button>\n  );\n};\n\nexport default ActionButton;\n","import React from 'react';\n\nimport { ButtonGroup } from '@chakra-ui/react';\n\nimport ActionButton from '../../../components/templates/Button/Button';\nimport { IButton } from '../../../components/templates/Button/buttonTypes';\n\ninterface IButtonsData {\n  data: IButton[];\n}\n\nconst ButtonsExampleView = (props: IButtonsData): JSX.Element => {\n  const { data } = props;\n\n  return (\n    <ButtonGroup>\n      {data.map(buttonData => {\n        return (\n          <ActionButton data={buttonData} key={JSON.stringify(buttonData)} />\n        );\n      })}\n    </ButtonGroup>\n  );\n};\n\nexport default ButtonsExampleView;\n","import React, { useState } from 'react';\n\nimport { IButton } from '../../../components/templates/Button/buttonTypes';\nimport ButtonsExampleView from './ButtonsExampleView';\n\nconst ActionButtonExample = (): JSX.Element => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [isCancelling, setIsCancelling] = useState(false);\n\n  const connectToServer = (): void => {\n    setIsLoading(true);\n\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 1000);\n  };\n\n  const cancelGame = (): void => {\n    setIsCancelling(true);\n\n    setTimeout(() => {\n      setIsCancelling(false);\n    }, 1500);\n  };\n\n  const actionButtonData: IButton = {\n    isLoading: isLoading,\n    loadingText: 'Connecting...',\n    width: '200px',\n    text: 'Connect',\n    onClick: connectToServer,\n  };\n\n  const cancelButtonData: IButton = {\n    isLoading: isCancelling,\n    loadingText: 'Cancelling...',\n    isCofirmButton: false,\n    width: '130px',\n    text: 'Cancel game',\n    onClick: cancelGame,\n  };\n\n  return <ButtonsExampleView data={[actionButtonData, cancelButtonData]} />;\n};\n\nexport default ActionButtonExample;\n","import { RoutesPath } from '../Routes/routesData';\nimport { TemplateRoutesPath } from '../Routes/templateRoutesData';\n\nexport interface ILink {\n  link: string;\n  text: string;\n}\n\nconst templatesLinks: ILink[] = [\n  {\n    text: 'Root',\n    link: TemplateRoutesPath.ROOT,\n  },\n  {\n    text: 'Lobby',\n    link: RoutesPath.LOBBY,\n  },\n  {\n    text: 'Animation',\n    link: TemplateRoutesPath.ANIMATION,\n  },\n  {\n    text: 'Alerts',\n    link: TemplateRoutesPath.ALERTS,\n  },\n  {\n    text: 'AlertDialog',\n    link: TemplateRoutesPath.ALERT_DIALOG,\n  },\n  {\n    text: 'Modal',\n    link: TemplateRoutesPath.MODAL,\n  },\n  {\n    text: 'Buttons',\n    link: TemplateRoutesPath.BUTTONS,\n  },\n  {\n    text: 'Avatars',\n    link: TemplateRoutesPath.AVATAR,\n  },\n  {\n    text: 'Loader',\n    link: TemplateRoutesPath.LOADER,\n  },\n  {\n    text: 'Editable Text',\n    link: TemplateRoutesPath.EDITABLE,\n  },\n  {\n    text: 'Buttons Example',\n    link: TemplateRoutesPath.BUTTONS_EXAMPLE,\n  },\n  {\n    text: 'Settings',\n    link: TemplateRoutesPath.SETTINGS,\n  },\n  {\n    text: 'Game Cards',\n    link: TemplateRoutesPath.CARDS,\n  },\n];\n\nexport default templatesLinks;\n","import React from 'react';\nimport {\n  Drawer,\n  DrawerContent,\n  DrawerCloseButton,\n  DrawerHeader,\n  DrawerBody,\n  Button,\n  DrawerFooter,\n  Flex,\n} from '@chakra-ui/react';\nimport templatesLinks from './templatesLinks';\nimport { NavLink } from 'react-router-dom';\n\nexport interface HeaderDevDrawerProps {\n  isOpen: boolean;\n  onClose: () => unknown;\n}\n\nexport const HeaderDevDrawer = (props: HeaderDevDrawerProps): JSX.Element => {\n  const { isOpen, onClose } = props;\n\n  return (\n    <Drawer isOpen={isOpen} placement=\"right\" onClose={onClose}>\n      {/* <DrawerOverlay /> */}\n      <DrawerContent>\n        <DrawerCloseButton />\n        <DrawerHeader>Dev links</DrawerHeader>\n\n        <DrawerBody>\n          <Flex direction=\"column\" gap={2}>\n            {templatesLinks.map(linkData => {\n              const { link, text } = linkData;\n\n              return (\n                <li className=\"nav-item\" key={`${link}-li`}>\n                  <NavLink\n                    exact\n                    strict\n                    className=\"nav-link\"\n                    to={link}\n                    key={`${link}-nav`}\n                  >\n                    {text}\n                  </NavLink>\n                </li>\n              );\n            })}\n          </Flex>\n        </DrawerBody>\n\n        <DrawerFooter>\n          <Button variant=\"outline\" mr={3} onClick={onClose}>\n            Cancel\n          </Button>\n        </DrawerFooter>\n      </DrawerContent>\n    </Drawer>\n  );\n};\n","import * as React from 'react';\nimport { ChatIcon } from '@chakra-ui/icons';\n\nimport logo from '../../assets/images/shared/logo.svg';\n\nimport {\n  VisuallyHidden,\n  Flex,\n  useDisclosure,\n  Button,\n  IconButton,\n  Spacer,\n  HStack,\n  Image,\n} from '@chakra-ui/react';\nimport { ColorModeSwitcher } from '../../containers/ColorModeSwitcher/ColorModeSwitcher';\nimport { HeaderDevDrawer } from './drawer';\n\nexport const Header = (): JSX.Element => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <Flex\n      bg=\"gray.300\"\n      height=\"100%\"\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n      px=\"2\"\n    >\n      <HStack h=\"100%\" fontFamily=\"handwrite\">\n        <Image src={logo} maxH=\"95%\" />\n        <h1>\n          Pointing Poker\n          <VisuallyHidden>by no95typem, kaesid, vimbi</VisuallyHidden>\n        </h1>\n      </HStack>\n\n      <HStack justifySelf=\"end\">\n        <Button onClick={onOpen}>DEV_DRAWER</Button>\n        <HeaderDevDrawer isOpen={isOpen} onClose={onClose} />\n        <Spacer />\n        <ColorModeSwitcher justifySelf=\"flex-end\" />\n        <Spacer />\n        <IconButton aria-label=\"chat\" icon={<ChatIcon />} />\n      </HStack>\n    </Flex>\n  );\n};\n","import { OBJ_PROCESSOR } from '../../shared/helpers/processors/obj-processor';\nimport { KnownErrorsKey } from '../../shared/knownErrorsKeys';\nimport { NoConnectionToServerPage } from './containers/ErrorsMUX/ErrorsPages/NoConnectionToServerPage/NoConnectionToServerPage';\n\nexport interface AppError {\n  type: 'unknown' | 'communication';\n  description: string;\n  more?: string;\n  Component?: () => JSX.Element;\n}\n\nexport const KNOWN_ERRORS: Record<KnownErrorsKey, AppError> = {\n  NO_CONNECTION_TO_SERVER: {\n    type: 'communication',\n    description: `Can't connect to a server. Our server is down or something breaks a connection`,\n    Component: NoConnectionToServerPage,\n  },\n  UNEXPECTED_REDIRECT_TO_ERROR: {\n    type: 'unknown',\n    description: `You was redirected to this page, but no known errors are found. It's strange, Try to reload page.`,\n  },\n  FAILED_TO_SEND_MSG_TO_SERVER: {\n    type: 'communication',\n    description: 'failed to send msg through ws',\n  },\n  SC_PROTOCOL_ERROR: {\n    type: 'communication',\n    description: 'Generic protocol error',\n  },\n  SC_ALREADY_CONNECTED_TO_SESSION: {\n    type: 'communication',\n    description: 'You already connected to a session',\n  },\n  SESSION_DOES_NOT_EXIST: {\n    type: 'communication',\n    description: `Session doesn't exist`,\n  },\n  UNKNOWN_ERROR: {\n    type: 'unknown',\n    description: `Unknown error, try to reload the page`,\n  },\n};\n\nOBJ_PROCESSOR.deepFreeze(KNOWN_ERRORS);\n","import React from 'react';\nimport { Alert, AlertIcon, Button, VStack } from '@chakra-ui/react';\nimport { SERVER_ADAPTER } from '../../../../modules/ServerAdapter/ServerAdapter';\n\nexport const NoConnectionToServerPage = () => {\n  return (\n    <VStack>\n      <Alert status=\"error\" maxW=\"fit-content\">\n        <AlertIcon />\n        Sorry, we can't establish a connection to the server\n      </Alert>\n      <Button onClick={() => SERVER_ADAPTER.connect()}>\n        Press to try to reconnect\n      </Button>\n    </VStack>\n  );\n};\n","import React from 'react';\nimport { Alert, AlertIcon, Button, VStack } from '@chakra-ui/react';\nimport { AppError } from '../../../../knownErrors';\nimport { useHistory } from 'react-router-dom';\nimport { KnownErrorsKey } from '../../../../../../shared/knownErrorsKeys';\n\nexport interface GenericErrorPageProps {\n  key?: KnownErrorsKey;\n  error: AppError;\n}\n\nexport const GenericErrorPage = (props: GenericErrorPageProps) => {\n  const history = useHistory();\n\n  return (\n    <VStack>\n      <Alert status=\"error\" maxW=\"500px\">\n        <AlertIcon />\n        {props.error.description}\n      </Alert>\n      <Button\n        onClick={() => {\n          history.push('');\n          window.location.reload();\n        }}\n      >\n        Reload app\n      </Button>\n    </VStack>\n  );\n};\n","import React from 'react';\nimport { KnownErrorsKey } from '../../../../shared/knownErrorsKeys';\nimport { KNOWN_ERRORS } from '../../knownErrors';\nimport { useTypedSelector } from '../../redux/store';\nimport { GenericErrorPage } from './ErrorsPages/GenericErrorPage/GenericErrorPage';\n\nexport const ErrorsMUX = (): JSX.Element => {\n  const errors = useTypedSelector(state => state.errors);\n  const errorKeys = Object.keys(errors) as KnownErrorsKey[];\n\n  const keyWitchComponent = errorKeys.find(key => KNOWN_ERRORS[key].Component);\n\n  if (keyWitchComponent) {\n    const Component = KNOWN_ERRORS[keyWitchComponent]\n      .Component as () => JSX.Element;\n\n    return <Component />;\n  }\n\n  return (\n    <GenericErrorPage\n      error={\n        KNOWN_ERRORS[errorKeys[0]] || KNOWN_ERRORS.UNEXPECTED_REDIRECT_TO_ERROR\n      }\n    />\n  );\n};\n","import { OBJ_PROCESSOR } from '../../shared/helpers/processors/obj-processor';\nimport { KnownLoadKey } from '../../shared/knownLoadsKeys';\n\nexport interface AppLoad {\n  type: 'unknown' | 'communication';\n  description: string;\n  more?: string;\n  Component?: () => JSX.Element;\n}\n\nexport const KNOWN_LOADS: Record<KnownLoadKey, AppLoad> = {\n  UNEXPECTED_REDIRECT_TO_LOAD: {\n    type: 'unknown',\n    description: `You was redirected to this page, but no known loads are found. It's strange, Please, wait...`,\n  },\n  CONNECTING_TO_SERVER: {\n    type: 'communication',\n    description: `Please wait until a connection with a server will be established`,\n  },\n  SESSION_STAGE_CHANGE: {\n    type: 'communication',\n    description: `Session stage is changing. please wait...`,\n  },\n  CONNECTING_TO_LOBBY: {\n    type: 'communication',\n    description: `Connecting to lobby...`,\n  },\n};\n\nOBJ_PROCESSOR.deepFreeze(KNOWN_LOADS);\n","import { CircularProgress, Text, VStack } from '@chakra-ui/react';\nimport React from 'react';\n\nexport interface GenericLoadPageProps {\n  text: string;\n}\n\nexport const GenericLoadPage = (props: GenericLoadPageProps): JSX.Element => {\n  return (\n    <VStack>\n      <Text>{props.text}</Text>\n      <CircularProgress isIndeterminate color=\"blue.400\" />\n    </VStack>\n  );\n};\n\n//Please wait until connection to server will be established\n","import React from 'react';\nimport { KnownLoadKey } from '../../../../shared/knownLoadsKeys';\nimport { KNOWN_LOADS } from '../../knownLoads';\n\nimport { useTypedSelector } from '../../redux/store';\nimport { GenericLoadPage } from './LoadsPages/GenericLoadPage/GenericLoadPage';\n\nexport const LoadsMUX = (): JSX.Element => {\n  const loads = useTypedSelector(state => state.loads);\n  const loadsKeys = Object.keys(loads) as KnownLoadKey[];\n\n  const keyWitchComponent = loadsKeys.find(key => KNOWN_LOADS[key].Component);\n\n  if (keyWitchComponent) {\n    const Component = KNOWN_LOADS[keyWitchComponent]\n      .Component as () => JSX.Element;\n\n    return <Component />;\n  }\n\n  return <GenericLoadPage text=\"Please, stand by...\" />;\n};\n","import { useLayoutEffect } from 'react';\nimport H from 'history';\nimport { useHistory, useLocation } from 'react-router';\nimport { SessionStage } from '../../../shared/types/session/state/stages';\nimport { homePageSlice } from '../redux/slices/home-page';\nimport { useAppDispatch, useTypedSelector } from '../redux/store';\nimport { OBJ_PROCESSOR } from '../../../shared/helpers/processors/obj-processor';\n\nconst usePathParser = (params: {\n  stage: SessionStage;\n  sessionId?: string;\n  path: string;\n}) => {\n  const { stage: sessionStage, path, sessionId } = params;\n\n  const dispatch = useAppDispatch();\n  const errors = useTypedSelector(state => state.errors);\n  const loads = useTypedSelector(state => state.loads);\n\n  if (path.startsWith('/session/')) {\n    const lobbyId = path.split('/')[2];\n    dispatch(homePageSlice.actions.setLobbyURL(lobbyId));\n  }\n\n  if (Object.keys(errors).length > 0) {\n    // console.log(errors);\n    return path !== '/error' ? '/error' : undefined;\n  }\n\n  if (Object.keys(loads).length > 0) {\n    return path !== '/loading' ? '/loading' : undefined;\n  }\n\n  switch (sessionStage) {\n    case 'LOBBY':\n      if (path !== `/session/${sessionId}/lobby`)\n        return `/session/${sessionId}/lobby`;\n\n      return undefined;\n    case 'GAME':\n      if (path !== `/session/${sessionId}/game`)\n        return `/session/${sessionId}/game`;\n\n      return undefined;\n    case 'STATS':\n      if (path !== `/session/${sessionId}/stats`)\n        return `/session/${sessionId}/stats`;\n\n      return undefined;\n    case 'EMPTY':\n      if (path !== `/`) return '/';\n\n      return undefined;\n    default:\n      return undefined;\n  }\n};\n\nexport const useRouterController = (): [boolean, H.Location] => {\n  const location = useLocation();\n  const sessionState = useTypedSelector(state => state.session);\n  const history = useHistory();\n  const path = location.pathname;\n\n  const { stage, sessionId } = sessionState;\n  const requiredPathBySession = usePathParser({\n    stage,\n    sessionId,\n    path,\n  });\n\n  /* eslint-disable react-hooks/exhaustive-deps */\n  useLayoutEffect(() => {\n    // for session\n    if (requiredPathBySession) {\n      history.push(requiredPathBySession);\n\n      return;\n    }\n  }, [requiredPathBySession]);\n  /* eslint-enable react-hooks/exhaustive-deps */\n\n  const newLocation = OBJ_PROCESSOR.deepClone(location);\n  newLocation.pathname = requiredPathBySession || location.pathname;\n\n  // console.log(requiredPathBySession);\n\n  return [!!requiredPathBySession, newLocation];\n};\n","import { ClassNames } from '@emotion/react';\nimport { useRef } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { CSSTransition, SwitchTransition } from 'react-transition-group';\nimport { ErrorsMUX } from '../../containers/ErrorsMUX/ErrorsMUX';\nimport { LoadsMUX } from '../../containers/LoadsMUX/LoadsMUX';\nimport { useRouterController } from '../../hooks/useRouterController';\n\nimport routes from './routesData';\nimport templatesRoutes from './templateRoutesData';\n\nconst TRANSITION_TIME = 500;\n\nconst TRANSITION = `opacity ${TRANSITION_TIME}ms ease-in-out`;\n\nexport const Routes = (): JSX.Element => {\n  const nodeRef = useRef<HTMLDivElement>(null);\n\n  const location = useRouterController()[1];\n\n  return (\n    <ClassNames>\n      {({ css }) => (\n        <SwitchTransition>\n          <CSSTransition\n            key={location.pathname}\n            addEndListener={done => {\n              if (nodeRef.current) {\n                nodeRef.current.addEventListener('transitionend', done, false);\n              } else setTimeout(done, TRANSITION_TIME);\n            }}\n            nodeRef={nodeRef}\n            classNames={{\n              enter: css({ opacity: 0 }),\n              enterActive: css({\n                opacity: 1,\n                transition: TRANSITION,\n              }),\n              exit: css({ opacity: 1 }),\n              exitActive: css({\n                opacity: 0,\n                transition: 'all 0.1s',\n              }),\n            }}\n          >\n            <Switch location={location}>\n              <Route key=\"ErrorsMUX\" path=\"/error\">\n                <div ref={nodeRef}>\n                  <ErrorsMUX />\n                </div>\n              </Route>\n\n              <Route key=\"LoadsMUX\" path=\"/loading\">\n                <div ref={nodeRef}>\n                  <LoadsMUX />\n                </div>\n              </Route>\n\n              {templatesRoutes.map(route => {\n                const { key, path, isExact, Component } = route;\n\n                return (\n                  <Route key={key} path={path} exact={isExact}>\n                    <div ref={nodeRef}>\n                      <Component />\n                    </div>\n                  </Route>\n                );\n              })}\n\n              {routes.map(route => {\n                const { key, path, isExact, Component } = route;\n\n                return (\n                  <Route key={key} path={path} exact={isExact}>\n                    <div ref={nodeRef}>\n                      <Component />\n                    </div>\n                  </Route>\n                );\n              })}\n            </Switch>\n          </CSSTransition>\n        </SwitchTransition>\n      )}\n    </ClassNames>\n  );\n};\n","import React from 'react';\nimport { Flex } from '@chakra-ui/react';\n\nexport const Footer = (): JSX.Element => {\n  return (\n    <Flex bg=\"gray.300\" height=\"100%\">\n      Footer\n    </Flex>\n  );\n};\n","import { extendTheme } from '@chakra-ui/react';\n\nexport const theme = extendTheme({\n  fonts: {\n    handwrite: 'Architects Daughter',\n  },\n});\n","import React, { useEffect, useState } from 'react';\nimport { SERVER_ADAPTER } from '../ServerAdapter/ServerAdapter';\n\nexport interface ServerBoundaryProps {\n  children: React.ReactNode;\n}\n\nexport const ServerBoundary = (props: ServerBoundaryProps) => {\n  const [executePreRender, setExecutePreRender] = useState(!FE_ALONE);\n\n  useEffect(() => {\n    if (executePreRender) {\n      SERVER_ADAPTER.connect();\n      setExecutePreRender(false);\n    }\n  }, [executePreRender]);\n\n  return <>{executePreRender ? undefined : props.children}</>;\n};\n","import React from 'react';\n\nimport '@fontsource/architects-daughter';\n\nimport { ChakraProvider, Grid, ColorModeScript } from '@chakra-ui/react';\nimport { Header } from '../Header/Header';\nimport { Routes } from '../Routes/Routes';\nimport { Footer } from '../Footer/Footer';\nimport { theme } from '../../theme';\nimport { ServerBoundary } from '../ServerBoundary/ServerBoundary';\n\nexport const App = () => {\n  return (\n    <>\n      <ColorModeScript />\n      <ChakraProvider theme={theme}>\n        <ServerBoundary>\n          <Grid minH=\"100vh\" templateRows=\"50px 1fr 50px\" alignItems=\"center\">\n            <Header />\n            <Routes />\n            <Footer />\n          </Grid>\n        </ServerBoundary>\n      </ChakraProvider>\n    </>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport { App } from './modules/App/App';\nimport { store } from './redux/store';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter basename={BASENAME}>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}