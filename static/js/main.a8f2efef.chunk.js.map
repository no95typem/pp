{"version":3,"sources":["assets/images/shared/logo.svg","containers/ColorModeSwitcher/ColorModeSwitcher.tsx","components/templates/ChakraButtons/ChakraButtons.tsx","../../shared/helpers/processors/obj-processor.ts","../../shared/types/cs-msgs/cs-msg-ciphers.ts","../../shared/types/cs-msgs/msgs/cs-conn-to-sess.ts","../../shared/types/cs-msgs/msgs/cs-create-sess.ts","../../shared/types/user/user-role.ts","../../shared/knownLoadsKeys.ts","../../shared/helpers/processors/purify.ts","modules/Routes/routesData.ts","../../shared/knownErrorsKeys.ts","../../shared/types/cs-msgs/msgs/cs-disconn-from-sess.ts","../../shared/types/cs-msgs/msgs/dealer/cs-start-game.ts","../../shared/types/sc-msgs/sc-msg-ciphers.ts","redux/slices/errors.ts","redux/slices/loads.ts","../../shared/initStates.ts","../../shared/types/cs-msgs/msgs/dealer/cs-msg-update-state.ts","../../shared/types/cs-msgs/msgs/spectator/cs-msg-chat-msg.ts","redux/slices/session.ts","../../shared/types/session/state/stages.ts","modules/ServerAdapter/ServerAdapter.ts","redux/slices/connect.ts","redux/slices/home-page.ts","locales/locale-us.ts","redux/slices/locale.ts","redux/slices/mockSession.ts","redux/slices/settings.ts","redux/slices/userInfo.ts","redux/slices/chat.ts","redux/store.ts","../../shared/types/session/round/round-state.ts","hooks/UseSessionData/UseSessionData.tsx","../../shared/const.ts","components/GameControlButtons/GameControlButtons.tsx","../../shared/types/user/user-state.ts","components/UserCard/UserCard.tsx","components/DealerPlate/DealerPlate.tsx","components/Loader/ChakraLoader.tsx","containers/EdidableHeader/EditableHeader.tsx","components/KickModal/KickModal.tsx","containers/UserCards/UserCardsView.tsx","containers/UserCards/UserCards.tsx","components/IssueCard/IssueCard.tsx","components/IssueModal/IssueModal.tsx","components/NewIssueButton/NewIssueButton.tsx","containers/IssuesCards/IssuesCardsView.tsx","../../shared/types/session/issue/issue-priority.ts","containers/IssuesCards/IssuesCards.tsx","components/Switcher/Switcher.tsx","components/InputText/InputText.tsx","components/InputNumber/InputNumber.tsx","containers/Timer/Timer.tsx","components/GameCard/GameCard.tsx","hooks/useImgConvertor.tsx","modules/HomePage/components/avatar-form/avatar-form.tsx","hooks/useImgLoader.tsx","constants.ts","components/GameCardModal/GameCardModal.tsx","components/NewGameCardButton/NewGameCardButton.tsx","containers/GameCards/GameCardsView.tsx","containers/GameCards/GameCards.tsx","containers/Settings/Settings.tsx","containers/JoinGameLink/JoinGameLink.tsx","modules/Lobby/Lobby.tsx","modules/HomePage/assets/images/poker-planing.png","modules/HomePage/components/main-page/main-page.tsx","modules/HomePage/components/radio-buttons/radio-card.tsx","modules/HomePage/components/radio-buttons/radio-buttons.tsx","modules/HomePage/components/inputs-stack/inputs-stack.tsx","modules/HomePage/components/popup/popup.tsx","modules/HomePage/HomePage.tsx","modules/Game/Game.tsx","modules/Routes/templateRoutesData.ts","components/templates/Alerts/Alerts.tsx","components/Logo/logo.svg","components/Logo/Logo.tsx","components/templates/Animation/ChakraAnimation.tsx","components/templates/AlertDialog/ChakraAlertDialog.tsx","hooks/useLocale.ts","components/templates/Modal/ChakraModal.tsx","components/templates/Avatar/ChakraAvatar.tsx","components/templates/EditableText/ChakraEditableText.tsx","components/templates/Button/Button.tsx","containers/ComponentsExamples/Buttons/ButtonsExampleView.tsx","containers/ComponentsExamples/Buttons/ButtonsExample.tsx","modules/Header/templatesLinks.ts","modules/Header/drawer.tsx","modules/Header/Header.tsx","knownErrors.ts","containers/ErrorsMUX/ErrorsPages/NoConnectionToServerPage/NoConnectionToServerPage.tsx","containers/ErrorsMUX/ErrorsPages/GenericErrorPage/GenericErrorPage.tsx","containers/ErrorsMUX/ErrorsMUX.tsx","knownLoads.ts","containers/LoadsMUX/LoadsPages/GenericLoadPage/GenericLoadPage.tsx","containers/LoadsMUX/LoadsMUX.tsx","hooks/useRouterController.tsx","modules/Routes/Routes.tsx","modules/Footer/Footer.tsx","theme.ts","modules/Chat/components/ChatView/ChatView.tsx","modules/Chat/components/MessageInputBox/MessageInputBox.tsx","modules/Chat/—Åhat.tsx","modules/ServerBoundary/ServerBoundary.tsx","modules/App/App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","ChakraButtons","templateColumns","gap","justifyItems","direction","align","spacing","colorScheme","isLoading","loadingText","spinnerPlacement","width","display","justifyContent","padding","OBJ_PROCESSOR","deepFreeze","obj","record","Object","keys","forEach","prop","isFrozen","freeze","Error","deepCloneForWebworker","target","Array","isArray","clone","v","push","map","n","k","setPrototypeOf","getPrototypeOf","deepClone","HTMLElement","cloneNode","Blob","slice","CSMSG_CIPHERS","CREATE_SESS","CONN_TO_SESS","DISCONN_FROM_SESS","CHAT_MSG","VOTEKICK","START_GAME","START_ROUND","RESTART_ROUND","STOP_ROUND","UPDATE_SESSION_STATE","FORCE_KICK","PICK","NEXT_ISSUE","END_GAME","CSMsgConnToSess","query","cipher","CSMsgCreateSession","USER_ROLES","DEALER","PLAYER","SPECTATOR","KNOWN_LOADS_KEYS","UNEXPECTED_REDIRECT_TO_LOAD","CONNECTING_TO_SERVER","SESSION_STAGE_CHANGE","CONNECTING_TO_LOBBY","browser","undefined","window","RoutesPath","purify","purifyInBrowser","thing","Node","DOMPurify","sanitize","entries","entry","KNOWN_ERRORS_KEYS","NO_CONNECTION_TO_SERVER","FAILED_TO_SEND_MSG_TO_SERVER","UNEXPECTED_REDIRECT_TO_ERROR","SC_PROTOCOL_ERROR","SC_ALREADY_CONNECTED_TO_SESSION","SESSION_DOES_NOT_EXIST","UNKNOWN_ERROR","CSMsgDisconFromSess","CSMsgStartGame","SCMSG_CIPHERS","CONN_TO_SESS_STATUS","MEMBERS_CHANGED","VOTEKICK_RESPONSE","VOTEKICK_RESULT","errorsSlice","createSlice","name","initialState","reducers","setErrorByKey","state","action","payload","removeError","actions","loadsSlice","setLoadByKey","key","timeout","removeLoad","setGLoadByKey","createAsyncThunk","args","thunkAPI","a","setTimeout","getState","loads","loadKey","dispatch","errorKey","defaultSettings","dealerAsPlayer","changingCardInRoundEnd","isTimerNeeded","scoreType","scoreTypeShort","roundTime","cards","value","base64","cardBackType","SESSION_INIT_STATE","sessionId","stage","isSynced","members","currentGameSettings","chat","msgs","issues","list","SESSION_CLIENT_INIT_STATE","clientId","sampleMember","userInfo","surname","jobPosition","avatarBgColor","userSessionPublicId","userRole","userState","SESSION_TESTING_STATE","CSMsgUpdateState","update","CSMsgChatMsg","msg","setSynced","synced","sessionSlice","dang_updSessStateFromClient","assign","dang_updSessStateFromServer","purified","dang_reset","updSessState","SERVER_ADAPTER","send","sendMessage","memberId","session","console","log","time","Date","now","chatMsg","SESSION_STAGES","LOBBY","EMPTY","GAME","STATS","updateState","apiUrl","ws","obeyTheServer","e","parsed","JSON","parse","data","handleConnToSessStatus","handleChatMsg","takeoffLoadBySessStateUpdate","store","handleMembersChanged","err","handleSendError","stringify","exitGame","startGame","response","success","yourId","fail","reason","id","member","newMembers","command","values","clientTime","this","removeEventListener","onopen","onerror","onclose","addEventListener","setServerConnectionStatus","Promise","res","resFalse","handleWSErrorOrClose","WebSocket","handleWSOpen","finally","serverConnectionStatus","connectToLobby","info","role","sessId","homePage","lobbyURL","createSession","settings","connectSlice","setSessionConnectionStatus","sessionConnectionStatus","homePageSlice","setLobbyURL","LOCALE_US","SESSION_DEALER_KICK_CONFIRMATION_POPUP_BODY","APP_SERVER_CONNECTION_STATUS_TOAST_TITLE","APP_SERVER_CONNECTION_STATUS_TOAST_DESC","KICK_PLAYER_MODAL_TEXT_START","KICK_PLAYER_MODAL_TEXT_FINISH","SETTINGS_IS_DEALER_PLAYER","SETTINGS_OPEN_CARDS_ON_ROUND_END","SETTINGS_IS_TIMER_ON","SETTINGS_SCORE_TYPE","SETTINGS_SCORE_TYPE_SHORT","SETTINGS_CARDS_HEADER","SETTINGS_CARDS_MODAL_CUSTOM","localeSlice","setLocale","mockSessionSlice","setSessionStatus","setSessionId","setSessionName","addIssue","editedIssue","find","issue","issueIndex","indexOf","deleteIssue","splice","settingsSlice","setSettings","userInfoSlice","avatarBase64","changeName","changeSurname","changeJobPosition","changeAvatarBase64","changeAvatarBgColor","chatSlice","isVisible","typedText","chatStateToggle","changeText","clearText","configureStore","reducer","locale","errors","connect","mockSession","devTools","process","useAppDispatch","useDispatch","useTypedSelector","useSelector","ROUND_STATES","AWAIT_START","IN_PROCESS","ENDED","UseSessionData","sessionData","useState","newIssueId","setNewIssueId","dealerInfo","isPlayerDealer","findIssueIndex","isItYou","isRoundStarted","game","roundState","sessionNameData","changeValue","newName","dealerData","membersData","findWhoIsUser","issuesData","addNewIssue","removeIssue","settingsData","setGameSettings","GameControlButtons","w","justify","visibility","USER_STATES","CONNECTED","DISCONNECTED","KICKED","UserCard","kickPlayer","fullName","isKickShown","p","boxShadow","bg","src","borderColor","boxSize","as","mb","background","DealerPlate","dealerMemberData","Question","ChakraLoader","position","top","left","right","bottom","thickness","speed","emptyColor","EditableHeader","useDisclosure","isOpen","onOpen","onClose","topicView","setTopicView","opacity","maxW","isTruncated","textAlign","startWithEditView","onChange","d","KickModal","modalData","onConfirm","initiatorName","closeOnOverlayClick","UserCardsView","cardsData","setMemberData","wrap","UserCards","kickedName","setKickedName","kickedId","setKickedId","userCardsData","IssueCard","openModal","title","priority","Close","IssueModal","issueData","activeIssue","changeIssue","link","setIssueData","input","isRequired","placeholder","htmlFor","NewIssueButton","editIssue","cursor","IssueCardsView","modal","ISSUE_PRIORITIES","LOW","MEDIUM","HIGH","IssuesCards","newIssue","closed","setActiveIssue","issueId","findIssue","Switcher","label","alignItems","isChecked","checked","InputText","border","InputNumber","defaultvalue","units","defaultValue","min","max","fontWeight","Timer","minutes","Math","trunc","seconds","shadow","height","GameCard","card","edit","deleteCard","fontStyle","getBase64","canvas","toBlob","getBlobPromise","then","blob","reader","FileReader","onloadend","result","onabort","readAsDataURL","convert","canvasRef","opts","rej","img","Image","onload","current","h","sx","sy","sWidth","sHeight","calcDrawParams","getContext","drawImage","drawImgToCanvas","catch","AvatarForm","useRef","useEffect","div","document","createElement","ReactDOM","render","createPortal","ref","bind","useImgConvertor","loadImg","type","click","file","files","GameCardModal","activeCard","changeCardValue","setCard","event","NewGameCardButton","_hover","ImPlus","IssueCardView","GameCards","toast","useToast","setLocalSettings","newGameCard","editedCardIndex","setEditedCardIndex","setActiveCard","findEditedCard","cardValue","editedCard","CardWithSameValue","cardsCopy","indexOfCardWithSameValue","sort","s","t","localeCompare","status","duration","isClosable","cardIndex","GameCardsView","Settings","localSettings","switchersData","inputsData","switcherData","inputData","JoinGameLink","useClipboard","hasCopied","onCopy","m","mr","pr","Lobby","minH","location","MainPage","onPopupCalled","gridGap","pokerPlaning","alt","fit","RadioCard","useRadio","getInputProps","getCheckboxProps","checkbox","borderWidth","borderRadius","_checked","_focus","py","children","options","RadioButtons","useRadioGroup","getRootProps","getRadioProps","group","radio","InputsStack","handleChange","ConnectPopup","forDealer","motionPreset","onOverlayClick","isCentered","HomePage","dealer","setDealer","forRole","Game","TemplateRoutesPath","routes","path","ROOT","isExact","Component","Alerts","description","spin","keyframes","Logo","forwardRef","animation","usePrefersReducedMotion","logo","ChakraAnimation","pointerEvents","href","rel","ChakraAlertDialog","cancelRef","leastDestructiveRef","ml","ChakraModal","ChakraAvatar","ChakraEditableText","ActionButton","isCofirmButton","ButtonsExampleView","buttonData","ActionButtonExample","setIsLoading","isCancelling","setIsCancelling","actionButtonData","cancelButtonData","templatesRoutes","ANIMATION","ALERTS","ALERT_DIALOG","BUTTONS","MODAL","AVATAR","LOADER","EDITABLE","BUTTONS_EXAMPLE","templatesLinks","SETTINGS","CARDS","HeaderDevDrawer","placement","linkData","className","exact","strict","to","Header","px","fontFamily","maxH","justifySelf","KNOWN_ERRORS","GenericErrorPage","history","useHistory","error","reload","ErrorsMUX","errorKeys","keyWitchComponent","KNOWN_LOADS","GenericLoadPage","isIndeterminate","LoadsMUX","useRouterController","useLocation","sessionState","pathname","requiredPathBySession","params","sessionStage","startsWith","lobbyId","split","length","usePathParser","useLayoutEffect","newLocation","TRANSITION","Routes","nodeRef","css","SwitchTransition","CSSTransition","addEndListener","done","classNames","enter","enterActive","transition","exit","exitActive","route","Footer","theme","extendTheme","fonts","handwrite","ChatView","setModalWindowInfo","convertTime","dateNow","date","getHours","getMinutes","getSeconds","MessageInputBox","Chat","style","default","x","documentElement","clientWidth","y","clientHeight","minWidth","minHeight","bounds","ServerBoundary","executePreRender","setExecutePreRender","App","templateRows","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","hostname","match","StrictMode","basename","BASENAME","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a8f2efef.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.b11630f2.svg\";","import * as React from 'react';\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, 'aria-label'>;\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  );\n};\n","import React from 'react';\n\nimport {\n  Stack,\n  CloseButton,\n  Button,\n  ButtonGroup,\n  Grid,\n} from '@chakra-ui/react';\n\nconst ChakraButtons = (): JSX.Element => {\n  return (\n    <Grid templateColumns=\"repeat(1, 1fr)\" gap={10} justifyItems=\"center\">\n      <Stack direction=\"row\" align=\"center\" spacing={5}>\n        <CloseButton size=\"sm\" />\n        <CloseButton size=\"md\" />\n        <CloseButton size=\"lg\" />\n      </Stack>\n      <Stack spacing={5} direction=\"row\" align=\"center\">\n        <Button colorScheme=\"teal\" size=\"xs\">\n          Button\n        </Button>\n        <Button colorScheme=\"teal\" size=\"sm\">\n          Button\n        </Button>\n        <Button colorScheme=\"teal\" size=\"md\">\n          Button\n        </Button>\n        <Button colorScheme=\"teal\" size=\"lg\">\n          Button\n        </Button>\n      </Stack>\n      <Stack direction=\"row\" spacing={5} align=\"center\">\n        <Button colorScheme=\"teal\" variant=\"solid\">\n          Button\n        </Button>\n        <Button colorScheme=\"teal\" variant=\"outline\">\n          Button\n        </Button>\n        <Button colorScheme=\"teal\" variant=\"ghost\">\n          Button\n        </Button>\n        <Button colorScheme=\"teal\" variant=\"link\">\n          Button\n        </Button>\n      </Stack>\n      <Stack direction=\"row\" spacing={5} align=\"center\">\n        <Button isLoading colorScheme=\"teal\" variant=\"solid\">\n          Email\n        </Button>\n        <Button\n          isLoading\n          loadingText=\"Loading\"\n          colorScheme=\"teal\"\n          variant=\"outline\"\n          spinnerPlacement=\"start\"\n        >\n          Submit\n        </Button>\n        <Button\n          isLoading\n          loadingText=\"Loading\"\n          colorScheme=\"teal\"\n          variant=\"outline\"\n          spinnerPlacement=\"end\"\n        >\n          Continue\n        </Button>\n      </Stack>\n      <ButtonGroup\n        colorScheme=\"facebook\"\n        width=\"28%\"\n        display=\"flex\"\n        justifyContent=\"space-between\"\n      >\n        <Button padding=\"0 50px\">Confirm</Button>\n        <Button padding=\"0 50px\" variant=\"outline\">\n          Cancel\n        </Button>\n      </ButtonGroup>\n    </Grid>\n  );\n};\n\nexport default ChakraButtons;\n","declare const TARGET_PLATFORM: string;\n\nclass ObjProcessor {\n  readonly deepFreeze = <T>(obj: T): T => {\n    if (typeof obj === 'object' && obj !== null) {\n      const record = obj as Record<string, unknown>;\n      Object.keys(record).forEach(prop => {\n        if (\n          typeof record[prop] === 'object' &&\n          !Object.isFrozen(record[prop])\n        ) {\n          this.deepFreeze(record[prop]);\n        }\n      });\n\n      return Object.freeze(obj);\n    }\n    throw new Error('not object');\n  };\n\n  readonly deepCloneForWebworker = <T>(target: T): T => {\n    if (Array.isArray(target)) {\n      const clone = [] as unknown[];\n      (target as unknown[]).forEach(v => {\n        clone.push(v);\n      });\n\n      return clone.map((n: unknown) =>\n        this.deepCloneForWebworker(n),\n      ) as unknown as T;\n    }\n\n    if (typeof target === 'object' && target !== null) {\n      const clone = {\n        ...(target as unknown as { [key: string]: unknown }),\n      } as {\n        [key: string]: unknown;\n      };\n      Object.keys(clone).forEach(k => {\n        clone[k] = this.deepCloneForWebworker(clone[k]);\n      });\n      Object.setPrototypeOf(clone, Object.getPrototypeOf(target));\n\n      return clone as unknown as T;\n    }\n\n    return target;\n  };\n\n  readonly deepClone =\n    TARGET_PLATFORM === 'node' || TARGET_PLATFORM === 'webworker'\n      ? this.deepCloneForWebworker\n      : <T>(target: T): T => {\n          if (Array.isArray(target)) {\n            const clone = [] as unknown[];\n            (target as unknown[]).forEach(v => {\n              clone.push(v);\n            });\n\n            return clone.map((n: unknown) => this.deepClone(n)) as unknown as T;\n          }\n\n          if (typeof target === 'object' && target !== null) {\n            if (target instanceof HTMLElement)\n              return target.cloneNode(true) as unknown as T;\n\n            if (target instanceof Blob) return target.slice() as unknown as T;\n            const clone = {\n              ...(target as unknown as { [key: string]: unknown }),\n            } as {\n              [key: string]: unknown;\n            };\n            Object.keys(clone).forEach(k => {\n              clone[k] = this.deepClone(clone[k]);\n            });\n            Object.setPrototypeOf(clone, Object.getPrototypeOf(target));\n\n            return clone as unknown as T;\n          }\n\n          return target;\n        };\n}\n\nconst OBJ_PROCESSOR = new ObjProcessor();\nOBJ_PROCESSOR.deepFreeze(OBJ_PROCESSOR);\nexport { OBJ_PROCESSOR };\n","import { OBJ_PROCESSOR } from '../../helpers/processors/obj-processor';\n\nclass CSMsgCiphers {\n  readonly CREATE_SESS = 'CREATE_SESS';\n\n  readonly CONN_TO_SESS = 'CONN_TO_SESS';\n\n  readonly DISCONN_FROM_SESS = 'DISCONN_FROM_SESS';\n\n  readonly CHAT_MSG = 'CHAT_MSG';\n\n  readonly VOTEKICK = 'VOTEKICK';\n\n  readonly START_GAME = 'START_GAME';\n\n  readonly START_ROUND = 'START_ROUND';\n\n  readonly RESTART_ROUND = 'RESTART_ROUND';\n\n  readonly STOP_ROUND = 'STOP_ROUND';\n\n  readonly UPDATE_SESSION_STATE = 'UPDATE_SESSION_STATE';\n\n  readonly FORCE_KICK = 'FORCE_KICK';\n\n  readonly PICK = 'PICK';\n\n  readonly NEXT_ISSUE = 'NEXT_ISSUE';\n\n  readonly END_GAME = 'END_GAME';\n}\n\nexport const CSMSG_CIPHERS = OBJ_PROCESSOR.deepFreeze(new CSMsgCiphers());\n\nexport type CSMsgCipher = keyof CSMsgCiphers;\n","import { UserInfo } from '../../user/user-info';\nimport { UserRole } from '../../user/user-role';\nimport { CSMsg } from '../cs-msg';\nimport { CSMSG_CIPHERS } from '../cs-msg-ciphers';\n\nexport class CSMsgConnToSess implements CSMsg {\n  readonly cipher = CSMSG_CIPHERS.CONN_TO_SESS;\n\n  constructor(\n    readonly query: {\n      readonly sessId: string;\n      readonly info: UserInfo;\n      readonly role: UserRole;\n    },\n  ) {}\n}\n","import { ISettings } from '../../settings';\nimport { UserInfo } from '../../user/user-info';\nimport { CSMsg } from '../cs-msg';\nimport { CSMSG_CIPHERS } from '../cs-msg-ciphers';\n\nexport class CSMsgCreateSession implements CSMsg {\n  readonly cipher = CSMSG_CIPHERS.CREATE_SESS;\n\n  constructor(\n    readonly query: {\n      readonly userInfo: UserInfo;\n      readonly settings: ISettings;\n    },\n  ) {}\n}\n","import { OBJ_PROCESSOR } from '../../helpers/processors/obj-processor';\n\nclass UserRoles {\n  readonly DEALER = 'DEALER';\n\n  readonly PLAYER = 'PLAYER';\n\n  readonly SPECTATOR = 'SPECTATOR';\n}\n\nexport const USER_ROLES = OBJ_PROCESSOR.deepFreeze(new UserRoles());\n\nexport type UserRole = keyof UserRoles;\n","import { OBJ_PROCESSOR } from './helpers/processors/obj-processor';\n\nclass knownLoadsKeys {\n  readonly UNEXPECTED_REDIRECT_TO_LOAD = 'UNEXPECTED_REDIRECT_TO_LOAD';\n\n  readonly CONNECTING_TO_SERVER = 'CONNECTING_TO_SERVER';\n\n  readonly SESSION_STAGE_CHANGE = 'SESSION_STAGE_CHANGE';\n\n  readonly CONNECTING_TO_LOBBY = 'CONNECTING_TO_LOBBY';\n}\n\nexport const KNOWN_LOADS_KEYS = OBJ_PROCESSOR.deepFreeze(new knownLoadsKeys());\n\nexport type KnownLoadKey = keyof knownLoadsKeys;\n","import DOMPurify from 'dompurify';\n\n// ! TODO (no95typem)  - not working on the server\n\nexport const purifyInNode = <T>(thing: T): T => thing;\n\nexport const purifyInBrowser = <T>(thing: T): T => {\n  if (typeof thing === 'string' || thing instanceof Node)\n    return DOMPurify.sanitize(thing) as unknown as T;\n\n  if (typeof thing === 'object' && thing !== null) {\n    const record = thing as Record<string, unknown>;\n    Object.entries(record).forEach(entry => {\n      record[entry[0]] = purifyInBrowser(entry[1]);\n    });\n  }\n\n  return thing;\n};\n\nlet browser = undefined;\n\ntry {\n  browser = !!window?.window;\n} catch {\n  browser = false;\n}\n\nexport const purify = browser ? purifyInBrowser : purifyInNode;\n","import ChakraButtons from '../../components/templates/ChakraButtons/ChakraButtons';\nimport Lobby from '../Lobby/Lobby';\nimport HomePage from '../HomePage/HomePage';\nimport Game from '../Game/Game';\n\nexport interface IRoute {\n  key: string;\n  path: string;\n  isExact: boolean;\n  Component: React.FunctionComponent | React.ComponentClass;\n}\n\nexport enum RoutesPath {\n  ROOT = '/',\n  LOBBY = '/session/:id/lobby',\n  GAME = '/session/:id/game',\n  STATS = '/session/:id/stats',\n  ERROR = '/error',\n  LOADING = '/loading',\n}\n\nconst routes: IRoute[] = [\n  {\n    key: 'routeRoot',\n    path: RoutesPath.ROOT,\n    isExact: true,\n    Component: HomePage, //–ó–∞–≥–ª—É—à–∫–∞, –∑–∞–º–µ–Ω—è–µ–º —Å–≤–æ–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏\n  },\n  {\n    key: 'routeLobby',\n    path: RoutesPath.LOBBY,\n    isExact: true,\n    Component: Lobby,\n  },\n  {\n    key: 'routeGame',\n    path: RoutesPath.GAME,\n    isExact: true,\n    Component: Game,\n  },\n  {\n    key: 'routeStats',\n    path: RoutesPath.STATS,\n    isExact: true,\n    Component: ChakraButtons, //–ó–∞–≥–ª—É—à–∫–∞, –∑–∞–º–µ–Ω—è–µ–º —Å–≤–æ–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏\n  },\n];\n\nexport default routes;\n","import { OBJ_PROCESSOR } from './helpers/processors/obj-processor';\n\nclass knownErrorsKeys {\n  readonly NO_CONNECTION_TO_SERVER = 'NO_CONNECTION_TO_SERVER';\n\n  readonly FAILED_TO_SEND_MSG_TO_SERVER = 'FAILED_TO_SEND_MSG_TO_SERVER';\n\n  readonly UNEXPECTED_REDIRECT_TO_ERROR = 'UNEXPECTED_REDIRECT_TO_ERROR';\n\n  readonly SC_PROTOCOL_ERROR = 'SC_PROTOCOL_ERROR';\n\n  readonly SC_ALREADY_CONNECTED_TO_SESSION = 'SC_ALREADY_CONNECTED_TO_SESSION';\n\n  readonly SESSION_DOES_NOT_EXIST = 'SESSION_DOES_NOT_EXIST';\n\n  readonly UNKNOWN_ERROR = 'UNKNOWN_ERROR';\n}\n\nexport const KNOWN_ERRORS_KEYS = OBJ_PROCESSOR.deepFreeze(\n  new knownErrorsKeys(),\n);\n\nexport type KnownErrorsKey = keyof knownErrorsKeys;\n","import { CSMsg } from '../cs-msg';\nimport { CSMSG_CIPHERS } from '../cs-msg-ciphers';\n\nexport class CSMsgDisconFromSess implements CSMsg {\n  readonly cipher = CSMSG_CIPHERS.DISCONN_FROM_SESS;\n}\n","import { CSMsg } from '../../cs-msg';\nimport { CSMSG_CIPHERS } from '../../cs-msg-ciphers';\n\nexport class CSMsgStartGame implements CSMsg {\n  readonly cipher = CSMSG_CIPHERS.START_GAME;\n}\n","import { OBJ_PROCESSOR } from '../../helpers/processors/obj-processor';\n\nclass SCMsgCiphers {\n  readonly CHAT_MSG = 'CHAT_MSG';\n\n  readonly CONN_TO_SESS_STATUS = 'CONN_TO_SESS_STATUS';\n\n  readonly MEMBERS_CHANGED = 'MEMBERS_CHANGED';\n\n  readonly UPDATE_SESSION_STATE = 'UPDATE_SESSION_STATE';\n\n  readonly VOTEKICK = 'VOTEKICK';\n\n  readonly VOTEKICK_RESPONSE = 'VOTEKICK_RESPONSE';\n\n  readonly VOTEKICK_RESULT = 'VOTEKICK_RESULT';\n\n  readonly FORCE_KICK = 'FORCE_KICK';\n}\n\nexport const SCMSG_CIPHERS = OBJ_PROCESSOR.deepFreeze(new SCMsgCiphers());\n\nexport type SCMsgCipher = keyof SCMsgCiphers;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { KnownErrorsKey } from '../../../../shared/knownErrorsKeys';\n\nconst initialState: Partial<Record<KnownErrorsKey, unknown>> = {};\n\nexport const errorsSlice = createSlice({\n  name: 'errors',\n  initialState,\n  reducers: {\n    setErrorByKey(state, action: PayloadAction<KnownErrorsKey>) {\n      state[action.payload] = action.payload;\n    },\n    removeError(state, action: PayloadAction<KnownErrorsKey>) {\n      delete state[action.payload];\n    },\n  },\n});\n\nexport const { setErrorByKey, removeError } = errorsSlice.actions;\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport {\n  KnownErrorsKey,\n  KNOWN_ERRORS_KEYS,\n} from '../../../../shared/knownErrorsKeys';\nimport { KnownLoadKey } from '../../../../shared/knownLoadsKeys';\nimport { RootState } from '../store';\nimport { setErrorByKey } from './errors';\n\nconst initialState: Partial<Record<KnownLoadKey, NodeJS.Timeout>> = {};\n\nexport const loadsSlice = createSlice({\n  name: 'loads',\n  initialState,\n  reducers: {\n    setLoadByKey(\n      state,\n      action: PayloadAction<{\n        key: KnownLoadKey;\n        timeout: NodeJS.Timeout;\n      }>,\n    ) {\n      state[action.payload.key] = action.payload.timeout;\n    },\n    removeLoad(state, action: PayloadAction<KnownLoadKey>) {\n      delete state[action.payload];\n    },\n  },\n});\n\nexport interface ISetGLoadByKeyArgs {\n  loadKey: KnownLoadKey;\n  errorKey?: KnownErrorsKey;\n}\n\nexport const setGLoadByKey = createAsyncThunk(\n  'loads/setGLoadByKey',\n  async (args: ISetGLoadByKeyArgs, thunkAPI) => {\n    const timeout = setTimeout(() => {\n      const state = thunkAPI.getState() as RootState;\n\n      if (state.loads[args.loadKey] === timeout) {\n        thunkAPI.dispatch(\n          setErrorByKey(args.errorKey || KNOWN_ERRORS_KEYS.UNKNOWN_ERROR),\n        );\n      }\n    }, 30_000);\n\n    thunkAPI.dispatch(\n      loadsSlice.actions.setLoadByKey({ key: args.loadKey, timeout }),\n    );\n  },\n);\n\nexport const { removeLoad } = loadsSlice.actions;\n","import { OBJ_PROCESSOR } from './helpers/processors/obj-processor';\nimport { CardData } from './types/session/card';\nimport { Member } from './types/session/member';\nimport {\n  ISessionStateClient,\n  SessionState,\n} from './types/session/state/session-state';\nimport { ISettings } from './types/settings';\nimport { USER_ROLES } from './types/user/user-role';\n\nconst testCardsData: CardData[] = [\n  //—Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç, –æ—Ç–ª–∞–¥–∫–∞\n  { value: '1' },\n  { value: '2' },\n  { value: '3' },\n  { value: 'Unknown', base64: '<img>' },\n];\n\nexport const defaultSettings: ISettings = {\n  dealerAsPlayer: true,\n  changingCardInRoundEnd: false,\n  isTimerNeeded: true,\n  scoreType: 'story points',\n  scoreTypeShort: 'SP',\n  roundTime: 140,\n  cards: testCardsData, //placeholder\n  cardBackType: '',\n};\n\nconst SESSION_INIT_STATE: SessionState = {\n  sessionId: '',\n  stage: 'LOBBY',\n  name: { value: 'unnamed pp session', isSynced: true },\n  members: {},\n  currentGameSettings: defaultSettings,\n  chat: {\n    msgs: {},\n  },\n  issues: {\n    isSynced: true,\n    list: [],\n  },\n};\n\nexport const CREATE_INIT_STATE = () =>\n  OBJ_PROCESSOR.deepClone(SESSION_INIT_STATE);\n\nexport const SESSION_CLIENT_INIT_STATE: ISessionStateClient = {\n  ...SESSION_INIT_STATE,\n  clientId: undefined,\n  stage: 'EMPTY',\n};\n\n//–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω—ã–µ, –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.\n\nconst sampleMember: Member = {\n  userInfo: {\n    name: 'John',\n    surname: 'Smith',\n    jobPosition: 'senior',\n    avatarBgColor: 'green',\n  },\n  userSessionPublicId: 0,\n  userRole: USER_ROLES.DEALER,\n  userState: 'CONNECTED',\n  isSynced: true,\n};\n\nexport const SESSION_TESTING_STATE: ISessionStateClient = {\n  sessionId: '12345',\n  clientId: 0,\n  name: { value: 'Session 12345', isSynced: false },\n  stage: 'LOBBY',\n  members: {\n    0: sampleMember,\n    1: {\n      ...sampleMember,\n      userInfo: {\n        ...sampleMember.userInfo,\n        name: 'Alex',\n        surname: 'Sandler',\n        avatarBgColor: 'red',\n      },\n      userRole: 'PLAYER',\n      userSessionPublicId: 1,\n    },\n    2: {\n      ...sampleMember,\n      userInfo: {\n        ...sampleMember.userInfo,\n        name: 'Kerri',\n        surname: 'Riz',\n        avatarBgColor: 'black',\n      },\n      userRole: 'PLAYER',\n      userSessionPublicId: 2,\n    },\n  },\n  currentGameSettings: defaultSettings,\n  chat: {\n    msgs: {},\n  },\n  issues: {\n    list: [],\n    isSynced: true,\n  },\n};\n","import { SessionState } from '../../../session/state/session-state';\nimport { CSMsg } from '../../cs-msg';\nimport { CSMSG_CIPHERS } from '../../cs-msg-ciphers';\n\nexport class CSMsgUpdateState implements CSMsg {\n  readonly cipher = CSMSG_CIPHERS.UPDATE_SESSION_STATE;\n\n  constructor(readonly update: Partial<SessionState>) {}\n}\n","import { ChatMsg } from '../../../session/chat/chat-msg';\nimport { CSMsg } from '../../cs-msg';\nimport { CSMSG_CIPHERS } from '../../cs-msg-ciphers';\n\nexport class CSMsgChatMsg implements CSMsg {\n  readonly cipher = CSMSG_CIPHERS.CHAT_MSG;\n\n  constructor(readonly msg: ChatMsg) {}\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport {\n  ISessionStateClient,\n  SessionState,\n} from '../../../../shared/types/session/state/session-state';\n\nimport { SESSION_CLIENT_INIT_STATE } from '../../../../shared/initStates';\nimport { Synchronized } from '../../../../shared/types/syncable';\nimport { purify } from '../../../../shared/helpers/processors/purify';\nimport { CSMsgUpdateState } from '../../../../shared/types/cs-msgs/msgs/dealer/cs-msg-update-state';\nimport { SERVER_ADAPTER } from '../../modules/ServerAdapter/ServerAdapter';\nimport { CSMsgChatMsg } from '../../../../shared/types/cs-msgs/msgs/spectator/cs-msg-chat-msg';\nimport { RootState } from '../store';\nimport { ChatMsg } from '../../../../shared/types/session/chat/chat-msg';\nimport { OBJ_PROCESSOR } from '../../../../shared/helpers/processors/obj-processor';\n\nconst initialState = SESSION_CLIENT_INIT_STATE;\n\nconst setSynced = <T>(thing: T, synced: boolean): T => {\n  if (typeof thing === 'object' && thing !== null) {\n    Object.entries(thing).forEach(entry => {\n      (thing as Record<string, unknown>)[entry[0]] = setSynced(\n        entry[1],\n        synced,\n      );\n    });\n\n    if ('isSynced' in thing)\n      (thing as unknown as Synchronized).isSynced = synced;\n  }\n\n  return thing;\n};\n\nexport const sessionSlice = createSlice({\n  name: 'session',\n  initialState,\n  reducers: {\n    dang_updSessStateFromClient(\n      state,\n      action: PayloadAction<Partial<ISessionStateClient>>,\n    ) {\n      Object.assign(state, action.payload);\n    },\n    dang_updSessStateFromServer(\n      state,\n      action: PayloadAction<Partial<ISessionStateClient>>,\n    ) {\n      const purified = purify(action.payload);\n\n      const synced = setSynced(purified, true);\n\n      Object.assign(state, synced);\n    },\n    dang_reset(state) {\n      Object.keys(state).forEach(key => {\n        delete (state as Record<string, unknown>)[key];\n      });\n      Object.assign(state, initialState);\n    },\n  },\n});\n\nexport const updSessState = createAsyncThunk(\n  'session/updSessState',\n  async (update: Partial<SessionState>, thunkAPI) => {\n    const synced = setSynced(update, false);\n    thunkAPI.dispatch(sessionSlice.actions.dang_updSessStateFromClient(synced));\n\n    const msg = new CSMsgUpdateState(update);\n\n    SERVER_ADAPTER.send(msg);\n  },\n);\n\nexport const sendMessage = createAsyncThunk(\n  'session/sendChatMessage',\n  async (text: string, thunkAPI) => {\n    const state = thunkAPI.getState() as RootState;\n    const memberId = state.session.clientId;\n\n    console.log(memberId);\n\n    if (memberId === undefined) return false;\n\n    const time = Date.now();\n    const chat = OBJ_PROCESSOR.deepClone(state.session.chat);\n\n    const chatMsg: ChatMsg = { memberId, text, time, isSynced: false };\n\n    const msg = new CSMsgChatMsg(chatMsg);\n    SERVER_ADAPTER.send(msg);\n\n    chat.msgs[`${time}-${memberId}`] = chatMsg;\n\n    thunkAPI.dispatch(\n      sessionSlice.actions.dang_updSessStateFromClient({ chat }),\n    );\n  },\n);\n","import { OBJ_PROCESSOR } from '../../../helpers/processors/obj-processor';\n\nclass SessionStages {\n  readonly LOBBY = 'LOBBY';\n\n  readonly EMPTY = 'EMPTY';\n\n  readonly GAME = 'GAME';\n\n  readonly STATS = 'STATS';\n}\n\nexport const SESSION_STAGES = OBJ_PROCESSOR.deepFreeze(new SessionStages());\n\nexport type SessionStage = keyof SessionStages;\n","import { OBJ_PROCESSOR } from '../../../../shared/helpers/processors/obj-processor';\nimport { purify } from '../../../../shared/helpers/processors/purify';\nimport {\n  KnownErrorsKey,\n  KNOWN_ERRORS_KEYS,\n} from '../../../../shared/knownErrorsKeys';\nimport { CSMsg } from '../../../../shared/types/cs-msgs/cs-msg';\nimport { CSMSG_CIPHERS } from '../../../../shared/types/cs-msgs/cs-msg-ciphers';\nimport { CSMsgDisconFromSess } from '../../../../shared/types/cs-msgs/msgs/cs-disconn-from-sess';\nimport { CSMsgUpdateState } from '../../../../shared/types/cs-msgs/msgs/dealer/cs-msg-update-state';\nimport { CSMsgStartGame } from '../../../../shared/types/cs-msgs/msgs/dealer/cs-start-game';\nimport { SCMsgChatMsgsChanged } from '../../../../shared/types/sc-msgs/msgs/sc-msg-chat-msgs-changed';\nimport { SCMsgConnToSessStatus } from '../../../../shared/types/sc-msgs/msgs/sc-msg-conn-to-sess-status';\nimport { SCMsgMembersChanged } from '../../../../shared/types/sc-msgs/msgs/sc-msg-members-changed';\nimport { SCMsg } from '../../../../shared/types/sc-msgs/sc-msg';\nimport { SCMSG_CIPHERS } from '../../../../shared/types/sc-msgs/sc-msg-ciphers';\nimport { Member } from '../../../../shared/types/session/member';\nimport { KNOWN_LOADS_KEYS } from '../../../../shared/knownLoadsKeys';\nimport { setServerConnectionStatus } from '../../redux/slices/connect';\nimport { removeError, setErrorByKey } from '../../redux/slices/errors';\nimport { removeLoad, setGLoadByKey } from '../../redux/slices/loads';\nimport { sessionSlice } from '../../redux/slices/session';\n\nimport { store } from '../../redux/store';\nimport { SessionState } from '../../../../shared/types/session/state/session-state';\nimport { SESSION_STAGES } from '../../../../shared/types/session/state/stages';\n\nconst updateState = sessionSlice.actions.dang_updSessStateFromServer;\n\nclass ServerAdapter {\n  private apiUrl = IS_PROD\n    ? 'wss://rss-react-2021q3-pp.herokuapp.com/'\n    : 'ws://localhost:9000';\n\n  private ws: WebSocket | undefined;\n\n  private obeyTheServer = (e: MessageEvent) => {\n    try {\n      // console.log(e.data);\n      const parsed = JSON.parse(e.data);\n      const purified = purify(parsed);\n\n      console.log(`received msg, cipher: ${purified.cipher}`);\n\n      if ('cipher' in purified) {\n        switch ((purified as SCMsg).cipher) {\n          case SCMSG_CIPHERS.CONN_TO_SESS_STATUS:\n            this.handleConnToSessStatus(purified as SCMsgConnToSessStatus);\n\n            return;\n          case CSMSG_CIPHERS.CHAT_MSG:\n            this.handleChatMsg(purified as SCMsgChatMsgsChanged);\n\n            return;\n\n          case SCMSG_CIPHERS.UPDATE_SESSION_STATE:\n            this.takeoffLoadBySessStateUpdate(\n              (purified as CSMsgUpdateState).update,\n            );\n            store.dispatch(updateState((purified as CSMsgUpdateState).update));\n\n            return;\n          case SCMSG_CIPHERS.MEMBERS_CHANGED:\n            this.handleMembersChanged(purified as SCMsgMembersChanged);\n\n            return;\n\n          default:\n            // just ignore\n            return;\n        }\n      }\n    } catch (err) {\n      console.log(err);\n      // TODO (no95typem)\n    }\n  };\n\n  private takeoffLoadBySessStateUpdate(update: Partial<SessionState>) {\n    if (update.stage) {\n      store.dispatch(removeLoad(KNOWN_LOADS_KEYS.SESSION_STAGE_CHANGE));\n    }\n  }\n\n  private handleConnToSessStatus(msg: SCMsgConnToSessStatus) {\n    if (!msg.response.success) {\n      const errorKey: KnownErrorsKey =\n        msg.response.fail?.reason || KNOWN_ERRORS_KEYS.SC_PROTOCOL_ERROR;\n      store.dispatch(setErrorByKey(errorKey));\n    } else {\n      store.dispatch(updateState(msg.response.success.state));\n      const clientId = msg.response.success.yourId;\n      store.dispatch(updateState({ clientId }));\n    }\n    store.dispatch(removeLoad('CONNECTING_TO_SERVER'));\n  }\n\n  private handleMembersChanged(msg: SCMsgMembersChanged) {\n    const members = OBJ_PROCESSOR.deepClone(store.getState().session.members);\n\n    Object.entries(msg.update).forEach(([id, member]) => {\n      if (members[+id]) {\n        Object.assign(members[+id], member);\n      } else {\n        members[+id] = member as Member;\n      }\n    });\n\n    const newMembers: Record<number, Member> = {};\n    Object.assign(newMembers, members);\n\n    // console.log(newMembers);\n    store.dispatch(updateState({ members: newMembers }));\n  }\n\n  private handleChatMsg(msg: SCMsgChatMsgsChanged) {\n    const state = store.getState();\n    const chat = OBJ_PROCESSOR.deepClone(state.session.chat);\n\n    switch (msg.command) {\n      case 'A':\n        Object.values(msg.update).forEach(chatMsg => {\n          if (\n            chatMsg.clientTime &&\n            state.session.clientId === chatMsg.memberId\n          ) {\n            delete chat.msgs[`${chatMsg.clientTime}-${chatMsg.memberId}`];\n          }\n        });\n        Object.assign(chat.msgs, msg.update);\n        break;\n      case 'D':\n        Object.keys(msg.update).forEach(key => delete chat.msgs[key]);\n        break;\n      default:\n        break;\n    }\n\n    store.dispatch(updateState({ chat }));\n  }\n\n  private handleWSErrorOrClose() {\n    console.log('err');\n    store.dispatch(setErrorByKey(KNOWN_ERRORS_KEYS.NO_CONNECTION_TO_SERVER));\n\n    if (this.ws) {\n      this.ws.removeEventListener('message', this.obeyTheServer);\n      this.ws.onopen = null;\n      this.ws.onerror = null;\n      this.ws.onclose = null;\n      this.ws = undefined;\n    }\n  }\n\n  private handleWSOpen() {\n    (this.ws as WebSocket).addEventListener('message', this.obeyTheServer);\n    store.dispatch(setServerConnectionStatus('connected'));\n  }\n\n  connect(): Promise<boolean> {\n    store.dispatch(\n      setGLoadByKey({\n        loadKey: KNOWN_LOADS_KEYS.CONNECTING_TO_SERVER,\n        errorKey: KNOWN_ERRORS_KEYS.NO_CONNECTION_TO_SERVER,\n      }),\n    );\n    store.dispatch(removeError(KNOWN_ERRORS_KEYS.NO_CONNECTION_TO_SERVER));\n\n    return new Promise<boolean>(res => {\n      if (this.ws) {\n        // ? TODO (no95typem) disconnect from a previous server but for now:\n        res(true);\n\n        return;\n      }\n\n      const resFalse = () => {\n        this.handleWSErrorOrClose();\n        res(false);\n      };\n\n      try {\n        this.ws = new WebSocket(this.apiUrl);\n        this.ws.onopen = () => {\n          this.handleWSOpen();\n          res(true);\n        };\n        this.ws.onerror = resFalse;\n        this.ws.onclose = resFalse;\n      } catch {\n        resFalse();\n      }\n    }).finally(() => {\n      store.dispatch(removeLoad(KNOWN_LOADS_KEYS.CONNECTING_TO_SERVER));\n    });\n  }\n\n  private handleSendError = FE_ALONE\n    ? () => console.warn('front end in standalone mode')\n    : () => {\n        store.dispatch(\n          setErrorByKey(KNOWN_ERRORS_KEYS.FAILED_TO_SEND_MSG_TO_SERVER),\n        );\n      };\n\n  send = (msg: CSMsg) => {\n    try {\n      (this.ws as WebSocket).send(JSON.stringify(msg));\n      console.log('msg sent');\n    } catch (err) {\n      console.log(err);\n      this.handleSendError();\n    }\n  };\n\n  exitGame = () => {\n    store.dispatch(updateState({ stage: SESSION_STAGES.EMPTY }));\n    const msg = new CSMsgDisconFromSess();\n    this.send(msg);\n  };\n\n  startGame = () => {\n    store.dispatch(\n      setGLoadByKey({\n        loadKey: KNOWN_LOADS_KEYS.SESSION_STAGE_CHANGE,\n      }),\n    );\n    const msg = new CSMsgStartGame();\n    this.send(msg);\n  };\n}\n\nexport const SERVER_ADAPTER = new ServerAdapter();\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { CSMsgConnToSess } from '../../../../shared/types/cs-msgs/msgs/cs-conn-to-sess';\nimport { CSMsgCreateSession } from '../../../../shared/types/cs-msgs/msgs/cs-create-sess';\nimport { USER_ROLES } from '../../../../shared/types/user/user-role';\nimport { KNOWN_LOADS_KEYS } from '../../../../shared/knownLoadsKeys';\nimport { SERVER_ADAPTER } from '../../modules/ServerAdapter/ServerAdapter';\nimport { RootState } from '../store';\nimport { setGLoadByKey } from './loads';\nimport { KNOWN_ERRORS_KEYS } from '../../../../shared/knownErrorsKeys';\n\nexport type WSConnectionStatus = 'connecting' | 'connected' | 'failed';\nexport type SessionConnectionStatus = 'connecting' | 'connected';\n\ninterface ConnectState {\n  serverConnectionStatus?: WSConnectionStatus;\n  sessionConnectionStatus?: SessionConnectionStatus;\n}\n\nconst initialState = { serverConnectionStatus: undefined } as ConnectState;\n\nexport const connectToLobby = createAsyncThunk(\n  'connection/connectToSession',\n  async (args, thunkAPI) => {\n    // TODO (no95typem): get params from the state!\n    const state = thunkAPI.getState() as RootState;\n    const msg = new CSMsgConnToSess({\n      info: state.userInfo,\n      role: USER_ROLES.PLAYER,\n      sessId: state.homePage.lobbyURL,\n    });\n    SERVER_ADAPTER.send(msg);\n    thunkAPI.dispatch(\n      setGLoadByKey({\n        loadKey: KNOWN_LOADS_KEYS.CONNECTING_TO_SERVER,\n        errorKey: KNOWN_ERRORS_KEYS.NO_CONNECTION_TO_SERVER,\n      }),\n    );\n  },\n);\n\nexport const createSession = createAsyncThunk(\n  'connection/createSession',\n  async (args, thunkAPI) => {\n    const state = thunkAPI.getState() as RootState;\n    const msg = new CSMsgCreateSession({\n      userInfo: state.userInfo,\n      settings: state.session.currentGameSettings, // ! TODO (no95typem)\n    });\n    SERVER_ADAPTER.send(msg);\n    thunkAPI.dispatch(\n      setGLoadByKey({\n        loadKey: KNOWN_LOADS_KEYS.CONNECTING_TO_SERVER,\n        errorKey: KNOWN_ERRORS_KEYS.NO_CONNECTION_TO_SERVER,\n      }),\n    );\n  },\n);\n\nexport const connectSlice = createSlice({\n  name: 'connection',\n  initialState,\n  reducers: {\n    setServerConnectionStatus(\n      state,\n      action: PayloadAction<WSConnectionStatus>,\n    ) {\n      state.serverConnectionStatus = action.payload;\n    },\n    setSessionConnectionStatus(\n      state,\n      action: PayloadAction<SessionConnectionStatus>,\n    ) {\n      state.sessionConnectionStatus = action.payload;\n    },\n  },\n  // extraReducers: builder => {\n  //   builder.addCase(connectToLobby.fulfilled, (state, action) => {\n  //     console.log(state, action);\n  //   });\n  // },\n});\n\nexport const { setServerConnectionStatus, setSessionConnectionStatus } =\n  connectSlice.actions;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nconst initialState = {\n  lobbyURL: '',\n};\n\nexport const homePageSlice = createSlice({\n  name: 'homePage',\n  initialState,\n  reducers: {\n    setLobbyURL(state, action: PayloadAction<string>) {\n      state.lobbyURL = action.payload;\n    },\n  },\n});\n","import { OBJ_PROCESSOR } from '../../../shared/helpers/processors/obj-processor';\nimport { LocaleKey } from './locale';\n\nconst LocaleUS: Record<LocaleKey, string> = {\n  SESSION_DEALER_KICK_CONFIRMATION_POPUP_BODY:\n    'Do you really want to kick this player?',\n\n  APP_SERVER_CONNECTION_STATUS_TOAST_TITLE: 'Connection info',\n\n  APP_SERVER_CONNECTION_STATUS_TOAST_DESC: 'Succesfully connected to a server',\n\n  KICK_PLAYER_MODAL_TEXT_START: 'Do you really want to remove player',\n\n  KICK_PLAYER_MODAL_TEXT_FINISH: 'from game session?',\n\n  SETTINGS_IS_DEALER_PLAYER: 'Scram dealer as player:',\n\n  SETTINGS_OPEN_CARDS_ON_ROUND_END: 'Open cards on round end:',\n\n  SETTINGS_IS_TIMER_ON: 'Is timer enabled:',\n\n  SETTINGS_SCORE_TYPE: 'Score type:',\n\n  SETTINGS_SCORE_TYPE_SHORT: 'Score type (Short):',\n\n  SETTINGS_CARDS_HEADER: 'Adjust cards values:',\n\n  SETTINGS_CARDS_MODAL_CUSTOM:\n    \"If it's custom value, add image to illustrate it:\",\n};\n\nexport const LOCALE_US = OBJ_PROCESSOR.deepFreeze(LocaleUS);\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { LocaleKey } from '../../locales/locale';\nimport { LOCALE_US } from '../../locales/locale-us';\n\nconst initialState: Record<LocaleKey, string> = LOCALE_US;\n\nexport const localeSlice = createSlice({\n  name: 'local',\n  initialState,\n  reducers: {\n    setLocale(state, action: PayloadAction<Record<LocaleKey, string>>) {\n      state = action.payload;\n    },\n  },\n});\n\nexport const { setLocale } = localeSlice.actions;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { SessionStage } from '../../../../shared/types/session/state/stages';\nimport { ISessionName } from '../../../../shared/types/session/state/session-state';\n\n//! –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ–∑–¥–∞–Ω SESSION_TESTING_STATE, –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.\nimport { SESSION_TESTING_STATE } from '../../../../shared/initStates';\nimport { Issue } from '../../../../shared/types/session/issue/issue';\n\nconst initialState = SESSION_TESTING_STATE;\n\nexport const mockSessionSlice = createSlice({\n  name: 'session',\n  initialState,\n  reducers: {\n    setSessionStatus(state, action: PayloadAction<SessionStage>) {\n      state.stage = action.payload;\n    },\n    setSessionId(state, action: PayloadAction<string>) {\n      state.sessionId = action.payload;\n    },\n    setSessionName(state, action: PayloadAction<ISessionName>) {\n      state.name = action.payload;\n    },\n    addIssue(state, action: PayloadAction<Issue>) {\n      const issues = state.issues.list;\n\n      const editedIssue = issues.find(issue => issue.id === action.payload.id);\n\n      if (editedIssue) {\n        const issueIndex = issues.indexOf(editedIssue);\n\n        issues[issueIndex] = action.payload;\n      } else {\n        issues.push(action.payload);\n      }\n    },\n    deleteIssue(state, action: PayloadAction<number>) {\n      const issues = state.issues.list;\n\n      const issue = issues.find(issue => issue.id === action.payload);\n\n      if (issue) {\n        const issueIndex = issues.indexOf(issue);\n\n        issues.splice(issueIndex, 1);\n      }\n    },\n  },\n});\n\nexport const {\n  setSessionStatus,\n  setSessionId,\n  setSessionName,\n  addIssue,\n  deleteIssue,\n} = mockSessionSlice.actions;\n","import { ISettings } from './../../../../shared/types/settings';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { defaultSettings } from '../../../../shared/initStates';\n\nexport const settingsSlice = createSlice({\n  name: 'settings',\n  initialState: defaultSettings,\n  reducers: {\n    setSettings(state, action: PayloadAction<ISettings>) {\n      Object.assign(state, action.payload);\n    },\n  },\n});\n\nexport const { setSettings } = settingsSlice.actions;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { UserInfo } from '../../../../shared/types/user/user-info';\n\nconst initialState = {\n  name: '',\n  surname: '',\n  jobPosition: '',\n  avatarBase64: '',\n  avatarBgColor: '#385898',\n} as UserInfo;\n\nexport const userInfoSlice = createSlice({\n  name: 'UserInfo',\n  initialState,\n  reducers: {\n    changeName(state, action) {\n      state.name = action.payload;\n    },\n    changeSurname(state, action) {\n      state.surname = action.payload;\n    },\n    changeJobPosition(state, action) {\n      state.jobPosition = action.payload;\n    },\n    changeAvatarBase64(state, action) {\n      console.log(action.payload);\n      state.avatarBase64 = action.payload;\n    },\n    changeAvatarBgColor(state, action) {\n      state.avatarBgColor = action.payload;\n    },\n  },\n});\n\nexport const {\n  changeName,\n  changeSurname,\n  changeJobPosition,\n  changeAvatarBase64,\n  changeAvatarBgColor,\n} = userInfoSlice.actions;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { Chat } from '../../../../shared/types/session/chat/chat';\n\nconst initialState = {\n  isVisible: false,\n  typedText: '',\n} as Chat;\n\nexport const chatSlice = createSlice({\n  name: 'Chat',\n  initialState,\n  reducers: {\n    chatStateToggle(state) {\n      state.isVisible = !state.isVisible;\n    },\n    changeText(state, action) {\n      state.typedText = action.payload;\n    },\n    clearText(state) {\n      state.typedText = '';\n    },\n  },\n});\n\nexport const { chatStateToggle, changeText, clearText } = chatSlice.actions;\n","import { configureStore } from '@reduxjs/toolkit';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { connectSlice } from './slices/connect';\nimport { errorsSlice } from './slices/errors';\nimport { homePageSlice } from './slices/home-page';\nimport { loadsSlice } from './slices/loads';\nimport { localeSlice } from './slices/locale';\nimport { mockSessionSlice } from './slices/mockSession';\nimport { sessionSlice } from './slices/session';\nimport { settingsSlice } from './slices/settings';\nimport { userInfoSlice } from './slices/userInfo';\nimport { chatSlice } from './slices/chat';\n\nexport const store = configureStore({\n  reducer: {\n    homePage: homePageSlice.reducer,\n    locale: localeSlice.reducer,\n    errors: errorsSlice.reducer,\n    loads: loadsSlice.reducer,\n    connect: connectSlice.reducer,\n    session: sessionSlice.reducer,\n    userInfo: userInfoSlice.reducer,\n    chat: chatSlice.reducer,\n    mockSession: mockSessionSlice.reducer,\n    settings: settingsSlice.reducer,\n  },\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { OBJ_PROCESSOR } from '../../../helpers/processors/obj-processor';\n\nclass RoundStates {\n  readonly AWAIT_START = 'AWAIT_START';\n\n  readonly IN_PROCESS = 'IN_PROCESS';\n\n  readonly ENDED = 'ENDED';\n}\n\nexport const ROUND_STATES = OBJ_PROCESSOR.deepFreeze(new RoundStates());\n\nexport type RoundState = keyof RoundStates;\n","import { useState } from 'react';\n\nimport { useAppDispatch } from '../../redux/store';\nimport { updSessState } from '../../redux/slices/session';\n\nimport { OBJ_PROCESSOR } from '../../../../shared/helpers/processors/obj-processor';\nimport { ISettings } from '../../../../shared/types/settings';\nimport {\n  IIssuesData,\n  Issue,\n} from '../../../../shared/types/session/issue/issue';\nimport { ISessionNameHandling } from '../../../../shared/types/session/name';\nimport { ISessionStateClient } from '../../../../shared/types/session/state/session-state';\nimport {\n  IMemberData,\n  IUserCards,\n  Member,\n} from '../../../../shared/types/session/member';\nimport { ROUND_STATES } from '../../../../shared/types/session/round/round-state';\nimport { USER_ROLES } from '../../../../shared/types/user/user-role';\nimport { DEALER_ID } from '../../../../shared/const';\n\ninterface ILobbyData {\n  sessionNameData: ISessionNameHandling;\n  dealerData?: IMemberData;\n  membersData: IUserCards;\n  issuesData: IIssuesData;\n  settingsData: ISettingsData;\n  isPlayerDealer: boolean;\n}\n\nexport interface ISettingsData {\n  // settings: ISettings;\n  setGameSettings: (settings: ISettings) => void;\n}\n\nconst UseSessionData = (\n  sessionData: ISessionStateClient,\n): ILobbyData | undefined => {\n  const dispatch = useAppDispatch();\n\n  const [newIssueId, setNewIssueId] = useState(1);\n\n  if (sessionData.clientId === undefined) return undefined;\n\n  const dealerInfo = sessionData.members[DEALER_ID] as Member | undefined;\n\n  const setNewSessionName = (newName: string): void => {\n    dispatch(updSessState({ name: { value: newName, isSynced: false } }));\n  };\n\n  const isPlayerDealer =\n    sessionData.members[sessionData.clientId].userRole === USER_ROLES.DEALER;\n\n  const findIssueIndex = (id: number): number | null => {\n    const list = sessionData.issues.list;\n\n    const issue = list.find(issue => issue.id === id);\n\n    return issue ? list.indexOf(issue) : null;\n  };\n\n  const addNewIssue = (issue: Issue): void => {\n    const issueIndex = findIssueIndex(issue.id);\n\n    const issues = OBJ_PROCESSOR.deepClone(sessionData.issues.list);\n\n    if (issueIndex !== null) {\n      issues[issueIndex] = issue;\n\n      dispatch(\n        updSessState({ issues: { list: [...issues], isSynced: false } }),\n      );\n    } else {\n      dispatch(\n        updSessState({ issues: { list: [...issues, issue], isSynced: false } }),\n      );\n\n      setNewIssueId(newIssueId + 1);\n    }\n  };\n\n  const removeIssue = (id: number): void => {\n    const issueIndex = findIssueIndex(id);\n\n    const issues = OBJ_PROCESSOR.deepClone(sessionData.issues.list);\n\n    if (issueIndex !== null) {\n      issues.splice(issueIndex, 1);\n\n      dispatch(\n        updSessState({ issues: { list: [...issues], isSynced: false } }),\n      );\n    }\n  };\n\n  const isItYou = (member: Member) => {\n    return sessionData.clientId === member.userSessionPublicId;\n  };\n\n  const isRoundStarted = (): boolean => {\n    return (\n      !!sessionData.game &&\n      sessionData.game.roundState === ROUND_STATES.IN_PROCESS\n    );\n  };\n\n  const setGameSettings = (settings: ISettings): void => {\n    dispatch(updSessState({ currentGameSettings: settings }));\n  };\n\n  const sessionNameData: ISessionNameHandling = {\n    name: sessionData.name,\n    changeValue: setNewSessionName,\n    isPlayerDealer: isPlayerDealer,\n  };\n\n  const dealerData: IMemberData | undefined = dealerInfo\n    ? {\n        member: dealerInfo,\n        isItYou: isItYou(dealerInfo),\n        isRoundStarted: isRoundStarted(),\n      }\n    : undefined;\n\n  const membersData: IUserCards = {\n    members: sessionData.members,\n    findWhoIsUser: isItYou,\n    isRoundStarted: isRoundStarted(),\n  };\n\n  const issuesData: IIssuesData = {\n    issues: sessionData.issues,\n    addNewIssue: addNewIssue,\n    removeIssue: removeIssue,\n    newIssueId: newIssueId,\n    isPlayerDealer: isPlayerDealer,\n  };\n\n  const settingsData: ISettingsData = {\n    // settings: sessionData.currentGameSettings,\n\n    //! —á—Ç–æ–±—ã –∑–∞—Å–µ—Ç–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Å—Ç—ç–π—Ç –Ω–∞ —Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã.\n    setGameSettings: setGameSettings,\n  };\n\n  return {\n    sessionNameData,\n    dealerData,\n    membersData,\n    issuesData,\n    settingsData,\n    isPlayerDealer,\n  };\n};\n\nexport default UseSessionData;\n","export const DEALER_ID = 0;\nexport const UNDEFINED_CARD_VALUE = 'UNDEFINED';\n","import React from 'react';\n\nimport { Button, Stack } from '@chakra-ui/react';\nimport { SERVER_ADAPTER } from '../../modules/ServerAdapter/ServerAdapter';\n\ninterface IAccessData {\n  isPlayerDealer: boolean;\n}\n\nconst GameControlButtons = (props: IAccessData): JSX.Element => {\n  const { isPlayerDealer } = props;\n\n  return (\n    <Stack direction=\"row\" w=\"100%\" align=\"center\" justify=\"space-between\">\n      <Button\n        colorScheme=\"facebook\"\n        w=\"130px\"\n        variant=\"outline\"\n        onClick={SERVER_ADAPTER.exitGame}\n      >\n        {isPlayerDealer ? 'Cancel Game' : 'Leave Game'}\n      </Button>\n      {isPlayerDealer && (\n        <Button\n          colorScheme=\"facebook\"\n          w=\"130px\"\n          variant=\"solid\"\n          visibility={isPlayerDealer ? 'visible' : 'hidden'}\n          onClick={SERVER_ADAPTER.startGame}\n        >\n          Start Game\n        </Button>\n      )}\n    </Stack>\n  );\n};\n\nexport default GameControlButtons;\n","import { OBJ_PROCESSOR } from '../../helpers/processors/obj-processor';\n\nclass UserStates {\n  readonly CONNECTED = 'CONNECTED';\n\n  readonly DISCONNECTED = 'DISCONNECTED';\n\n  readonly KICKED = 'KICKED';\n}\n\nexport const USER_STATES = OBJ_PROCESSOR.deepFreeze(new UserStates());\n\nexport type UserState = keyof UserStates;\n","import React from 'react';\n\nimport {\n  Avatar,\n  Stack,\n  IconButton,\n  Stat,\n  AvatarBadge,\n  StatNumber,\n  StatHelpText,\n} from '@chakra-ui/react';\n\nimport { ImBlocked } from 'react-icons/im';\n\nimport { IMemberData } from '../../../../shared/types/session/member';\nimport { USER_ROLES } from '../../../../shared/types/user/user-role';\nimport { USER_STATES } from '../../../../shared/types/user/user-state';\n\nconst UserCard = (props: IMemberData): JSX.Element => {\n  const { member, isItYou, isRoundStarted, kickPlayer } = props;\n\n  const { userInfo, userState, userRole, userSessionPublicId: id } = member;\n\n  // console.log(userInfo, member);\n\n  const { name, surname, avatarBase64, avatarBgColor, jobPosition } = userInfo;\n\n  const fullName = surname ? `${name} ${surname}` : name;\n\n  const isKickShown: boolean =\n    !isRoundStarted &&\n    !isItYou &&\n    userRole !== USER_ROLES.DEALER &&\n    userState === USER_STATES.CONNECTED;\n\n  return (\n    <Stack direction=\"row\" align=\"center\" p=\"10px 10px\" boxShadow=\"lg\">\n      <Avatar\n        color=\"white\"\n        bg={avatarBgColor}\n        name={fullName}\n        src={avatarBase64}\n      >\n        {isItYou && (\n          <AvatarBadge borderColor=\"papayawhip\" bg=\"green.400\" boxSize=\"1em\" />\n        )}\n      </Avatar>\n\n      <Stat>\n        <StatNumber as={userState === USER_STATES.KICKED ? 'del' : 'abbr'}>\n          {fullName}\n        </StatNumber>\n        <StatHelpText mb=\"0\">{jobPosition}</StatHelpText>\n      </Stat>\n\n      {kickPlayer && isKickShown && (\n        <IconButton\n          aria-label=\"Kick player\"\n          background=\"transparent\"\n          size=\"lg\"\n          icon={<ImBlocked />}\n          onClick={() => kickPlayer(id, fullName)}\n        />\n      )}\n    </Stack>\n  );\n};\n\nexport default UserCard;\n","import React from 'react';\n\nimport { Stack, Text } from '@chakra-ui/react';\n\nimport { IMemberData } from '../../../../shared/types/session/member';\n\nimport UserCard from '../../components/UserCard/UserCard';\nimport { QuestionIcon } from '@chakra-ui/icons';\n\nexport interface IDealerPlateProps {\n  dealerMemberData?: IMemberData;\n}\n\nconst DealerPlate = (props: IDealerPlateProps): JSX.Element => {\n  return (\n    <Stack w=\"300px\" mb=\"30px\">\n      <Text mb=\"-10px\" padding=\"0 10px\">\n        Dealer:\n      </Text>\n      {props.dealerMemberData ? (\n        <UserCard {...props.dealerMemberData} />\n      ) : (\n        <QuestionIcon />\n      )}\n    </Stack>\n  );\n};\n\nexport default DealerPlate;\n","import React from 'react';\n\nimport { Spinner } from '@chakra-ui/react';\n\nconst ChakraLoader = (): JSX.Element => {\n  return (\n    <>\n      <Spinner\n        position=\"absolute\"\n        // m=\"0 auto\"\n        // textAlign=\"center\"\n        top=\"50%\"\n        left=\"50%\"\n        right=\"0\"\n        bottom=\"0\"\n        thickness=\"4px\"\n        speed=\"0.65s\"\n        emptyColor=\"gray.200\"\n        color=\"blue.500\"\n        size=\"xl\"\n      />\n    </>\n  );\n};\n\nexport default ChakraLoader;\n","import React, { useState } from 'react';\n\nimport {\n  Button,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  useDisclosure,\n  Editable,\n  EditableInput,\n  EditablePreview,\n  IconButton,\n  Stack,\n  Heading,\n  ButtonGroup,\n} from '@chakra-ui/react';\n\nimport { ImPencil } from 'react-icons/im';\nimport { ISessionNameHandling } from '../../../../shared/types/session/name';\nimport ChakraLoader from '../../components/Loader/ChakraLoader';\n\nconst EditableHeader = (props: ISessionNameHandling) => {\n  const { name, changeValue, isPlayerDealer } = props;\n\n  const { value, isSynced } = name;\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const [topicView, setTopicView] = useState(value);\n\n  const updateTopic = (): void => {\n    changeValue(topicView);\n\n    onClose();\n  };\n\n  return (\n    <Stack\n      position=\"relative\"\n      w=\"100%\"\n      direction=\"row\"\n      justify=\"center\"\n      align=\"center\"\n      p=\"10px\"\n      opacity={isSynced ? 1 : 0.5}\n    >\n      <Heading size=\"lg\" maxW=\"300px\" isTruncated>\n        {value}\n      </Heading>\n\n      <IconButton\n        top=\"0\"\n        right=\"0\"\n        aria-label=\"edit\"\n        background=\"transparent\"\n        visibility={isPlayerDealer && isSynced ? 'visible' : 'hidden'}\n        size=\"lg\"\n        icon={<ImPencil />}\n        onClick={onOpen}\n      />\n      {!isSynced && <ChakraLoader />}\n\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader textAlign=\"center\">Topic:</ModalHeader>\n          <ModalBody>\n            <Editable\n              value={topicView}\n              textAlign=\"center\"\n              startWithEditView={true}\n              onChange={setTopicView}\n            >\n              <EditablePreview />\n              <EditableInput />\n            </Editable>\n          </ModalBody>\n\n          <ModalFooter>\n            <ButtonGroup w=\"100%\" d=\"flex\" justifyContent=\"space-between\">\n              <Button\n                colorScheme=\"facebook\"\n                w=\"100px\"\n                variant=\"outline\"\n                onClick={onClose}\n              >\n                Close\n              </Button>\n              <Button\n                colorScheme=\"facebook\"\n                w=\"100px\"\n                variant=\"solid\"\n                onClick={updateTopic}\n              >\n                Change\n              </Button>\n            </ButtonGroup>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </Stack>\n  );\n};\n\nexport default EditableHeader;\n","import React from 'react';\n\nimport {\n  Button,\n  ButtonGroup,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  Text,\n} from '@chakra-ui/react';\n\nimport { LOCALE_US } from '../../locales/locale-us';\n\nimport { IKickModalBundle } from '../../../../shared/types/session/member';\n\nconst KickModal = (props: IKickModalBundle): JSX.Element => {\n  const { modalData } = props;\n\n  const { isOpen, onClose, name, onConfirm, initiatorName } = modalData;\n\n  return (\n    <>\n      <Modal closeOnOverlayClick={false} isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader fontSize=\"2xl\" textAlign=\"center\">\n            {initiatorName ? 'Kick' : ' Kick Player?'}\n          </ModalHeader>\n\n          <ModalBody mb=\"20px\">\n            <Text textAlign=\"center\">\n              {initiatorName\n                ? `${initiatorName} want to kick ${name}. Do you agree with it?`\n                : `${LOCALE_US.KICK_PLAYER_MODAL_TEXT_START} ${name} ${LOCALE_US.KICK_PLAYER_MODAL_TEXT_FINISH}`}\n            </Text>\n          </ModalBody>\n\n          <ModalFooter>\n            <ButtonGroup\n              colorScheme=\"facebook\"\n              width=\"100%\"\n              display=\"flex\"\n              justifyContent=\"space-between\"\n            >\n              <Button padding=\"0 50px\" variant=\"outline\" onClick={onClose}>\n                No\n              </Button>\n              <Button onClick={onConfirm} padding=\"0 50px\">\n                Yes\n              </Button>\n            </ButtonGroup>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default KickModal;\n","import React from 'react';\n\nimport { Box, Heading, Stack } from '@chakra-ui/react';\n\nimport {\n  IMemberData,\n  IUserCardsViewBundle,\n  Member,\n} from '../../../../shared/types/session/member';\n\nimport UserCard from '../../components/UserCard/UserCard';\nimport KickModal from '../../components/KickModal/KickModal';\nimport { DEALER_ID } from '../../../../shared/const';\n\nconst UserCardsView = (props: IUserCardsViewBundle): JSX.Element => {\n  const { cardsData, modalData } = props;\n\n  const { members, findWhoIsUser } = cardsData;\n\n  const setMemberData = (member: Member): IMemberData => {\n    return {\n      member: member,\n      isItYou: findWhoIsUser(member),\n      isRoundStarted: false,\n      kickPlayer: modalData.kickPlayer,\n    };\n  };\n\n  return (\n    <Box mb=\"30px\">\n      <Heading textAlign=\"center\" size=\"lg\" mb=\"40px\">\n        Members:\n      </Heading>\n      <Stack w=\"100%\" wrap=\"wrap\" direction=\"row\">\n        {Object.entries(members).map(([id, member]) => {\n          if (+id === DEALER_ID) return null;\n\n          return (\n            <Stack w=\"300px\" key={`${id}-wrap`}>\n              <UserCard {...setMemberData(member)} key={id} />;\n            </Stack>\n          );\n        })}\n\n        <KickModal modalData={modalData} />\n      </Stack>\n    </Box>\n  );\n};\n\nexport default UserCardsView;\n","import React, { useState } from 'react';\n\nimport { useDisclosure } from '@chakra-ui/react';\n\nimport {\n  IKickModal,\n  IUserCards,\n} from '../../../../shared/types/session/member';\n\nimport UserCardsView from './UserCardsView';\n\nconst UserCards = (props: IUserCards): JSX.Element => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const { members, findWhoIsUser, isRoundStarted } = props;\n\n  const [kickedName, setKickedName] = useState('');\n\n  const [kickedId, setKickedId] = useState(0);\n\n  const confirmKick = () => {\n    onClose();\n    console.log('server command --kick', kickedId);\n  };\n\n  const setModalWindowInfo = (id: number, name: string) => {\n    setKickedId(id);\n\n    setKickedName(name);\n\n    onOpen();\n  };\n\n  const modalData: IKickModal = {\n    onClose: onClose,\n    isOpen: isOpen,\n    name: kickedName,\n    onConfirm: confirmKick,\n    initiatorName: '',\n    kickPlayer: setModalWindowInfo,\n  };\n\n  const userCardsData: IUserCards = {\n    members: members,\n    findWhoIsUser: findWhoIsUser,\n    isRoundStarted: isRoundStarted,\n  };\n\n  return <UserCardsView cardsData={userCardsData} modalData={modalData} />;\n};\n\nexport default UserCards;\n","import React from 'react';\n\nimport {\n  Stack,\n  IconButton,\n  Stat,\n  StatNumber,\n  StatHelpText,\n} from '@chakra-ui/react';\n\nimport { ImPencil } from 'react-icons/im';\nimport { CloseIcon } from '@chakra-ui/icons';\n\nimport {\n  IIssueData,\n  Issue,\n} from '../../../../shared/types/session/issue/issue';\n\nconst IssueCard = (props: IIssueData): JSX.Element => {\n  const { issue, openModal, removeIssue, isPlayerDealer } = props;\n\n  const { id, title, priority, isSynced } = issue as Issue;\n\n  return (\n    <Stack direction=\"row\" align=\"center\" p=\"10px\" boxShadow=\"lg\">\n      <Stat>\n        <StatNumber isTruncated={true}>{title}</StatNumber>\n        <StatHelpText mb=\"0\">{priority}</StatHelpText>\n      </Stat>\n\n      <IconButton\n        aria-label=\"edit\"\n        background=\"transparent\"\n        visibility={isPlayerDealer && isSynced ? 'visible' : 'hidden'}\n        size=\"lg\"\n        icon={<ImPencil />}\n        onClick={() => openModal(id)}\n      />\n      <IconButton\n        aria-label=\"delete\"\n        background=\"transparent\"\n        visibility={isPlayerDealer && isSynced ? 'visible' : 'hidden'}\n        size=\"lg\"\n        icon={<CloseIcon />}\n        onClick={() => removeIssue(id)}\n      />\n    </Stack>\n  );\n};\n\nexport default IssueCard;\n","import React from 'react';\n\nimport {\n  Button,\n  ButtonGroup,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  Select,\n  Stack,\n  Input,\n  FormControl,\n  FormLabel,\n} from '@chakra-ui/react';\n\nimport { IIssueModalData } from '../../../../shared/types/session/issue/issue';\n\nconst IssueModal = (props: IIssueModalData): JSX.Element => {\n  const { issue: issueData } = props;\n\n  const { isOpen, onClose, activeIssue, changeIssue, addNewIssue } = issueData;\n\n  const { title, link, priority } = activeIssue;\n\n  const setIssueData = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>,\n  ): void => {\n    const input = e.target;\n\n    changeIssue({ ...activeIssue, [input.name]: input.value });\n  };\n\n  return (\n    <>\n      <Modal closeOnOverlayClick={false} isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Create Issue</ModalHeader>\n\n          <ModalBody mb=\"20px\">\n            <Stack d=\"flex\" justify=\"space-around\" align=\"stretch\">\n              <FormControl id=\"title\" isRequired>\n                <Stack spacing={2} direction=\"row\" align=\"center\">\n                  <FormLabel>Title:</FormLabel>\n                  <Input\n                    name=\"title\"\n                    placeholder=\"Issue name\"\n                    value={title}\n                    onChange={setIssueData}\n                  />\n                </Stack>\n              </FormControl>\n              <FormControl id=\"link\">\n                <Stack spacing={2} direction=\"row\" align=\"center\">\n                  <FormLabel htmlFor=\"link\">Link:</FormLabel>\n                  <Input name=\"link\" value={link} onChange={setIssueData} />\n                </Stack>\n              </FormControl>\n              <Stack spacing={2} direction=\"row\" align=\"center\">\n                <FormLabel>Priority:</FormLabel>\n                <Select\n                  value={priority}\n                  onChange={setIssueData}\n                  name=\"priority\"\n                  variant=\"filled\"\n                  bg=\"gray.100\"\n                >\n                  <option value=\"LOW\">Low</option>\n                  <option value=\"MEDIUM\">Medium</option>\n                  <option value=\"HIGH\">High</option>\n                </Select>\n              </Stack>\n            </Stack>\n          </ModalBody>\n\n          <ModalFooter>\n            <ButtonGroup\n              colorScheme=\"facebook\"\n              width=\"100%\"\n              display=\"flex\"\n              justifyContent=\"space-between\"\n            >\n              <Button padding=\"0 50px\" variant=\"outline\" onClick={onClose}>\n                No\n              </Button>\n              <Button onClick={() => addNewIssue(activeIssue)} padding=\"0 50px\">\n                Yes\n              </Button>\n            </ButtonGroup>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default IssueModal;\n","import React from 'react';\n\nimport { Stack, IconButton, Stat, StatNumber } from '@chakra-ui/react';\n\nimport { ImPlus } from 'react-icons/im';\n\ninterface IIssueButtonData {\n  editIssue: () => void;\n}\n\nconst NewIssueButton = (props: IIssueButtonData): JSX.Element => {\n  const { editIssue } = props;\n\n  return (\n    <Stack\n      onClick={editIssue}\n      direction=\"row\"\n      align=\"center\"\n      p=\"10px\"\n      boxShadow=\"lg\"\n      cursor=\"pointer\"\n      w=\"300px\"\n    >\n      <Stat>\n        <StatNumber>Create new issue</StatNumber>\n      </Stat>\n\n      <IconButton\n        aria-label=\"edit\"\n        background=\"transparent\"\n        size=\"lg\"\n        icon={<ImPlus />}\n      />\n    </Stack>\n  );\n};\n\nexport default NewIssueButton;\n","import React from 'react';\n\nimport { Box, Heading, Stack } from '@chakra-ui/react';\n\nimport {\n  IIssueData,\n  IIssues,\n  Issue,\n} from '../../../../shared/types/session/issue/issue';\n\nimport IssueCard from '../../components/IssueCard/IssueCard';\nimport IssueModal from '../../components/IssueModal/IssueModal';\nimport NewIssueButton from '../../components/NewIssueButton/NewIssueButton';\nimport ChakraLoader from '../../components/Loader/ChakraLoader';\n\nconst IssueCardsView = (props: IIssues): JSX.Element => {\n  const { issues, modal } = props;\n\n  const { list, isSynced } = issues;\n\n  const { openModal, removeIssue, isPlayerDealer } = modal;\n\n  const setIssueData = (issue: Issue): IIssueData => {\n    return {\n      isPlayerDealer: isPlayerDealer,\n      openModal: openModal,\n      removeIssue: removeIssue,\n      issue: issue,\n    };\n  };\n\n  return (\n    <Box mb=\"50px\" position=\"relative\">\n      <Heading textAlign=\"center\" size=\"lg\" mb=\"40px\">\n        Issues:\n      </Heading>\n      <Stack w=\"100%\" wrap=\"wrap\" direction=\"row\" opacity={isSynced ? 1 : 0.5}>\n        {list.map(issue => {\n          const id = issue.id;\n\n          return (\n            <Stack w=\"300px\" key={`${id}-wrap`}>\n              <IssueCard {...setIssueData(issue)} key={id} />\n            </Stack>\n          );\n        })}\n\n        {isPlayerDealer && isSynced && <NewIssueButton editIssue={openModal} />}\n\n        <IssueModal issue={modal} />\n      </Stack>\n      {!isSynced && <ChakraLoader />}\n    </Box>\n  );\n};\n\nexport default IssueCardsView;\n","import { OBJ_PROCESSOR } from '../../../helpers/processors/obj-processor';\n\nclass IssuePriorities {\n  readonly LOW = 'LOW';\n\n  readonly MEDIUM = 'MEDIUM';\n\n  readonly HIGH = 'HIGH';\n}\n\nexport const ISSUE_PRIORITIES = OBJ_PROCESSOR.deepFreeze(new IssuePriorities());\n\nexport type IssuePriority = keyof IssuePriorities;\n","import React, { useState } from 'react';\n\nimport { useDisclosure } from '@chakra-ui/react';\n\nimport {\n  IIssueModal,\n  IIssuesData,\n  Issue,\n} from '../../../../shared/types/session/issue/issue';\n\nimport IssueCardsView from './IssuesCardsView';\nimport { ISSUE_PRIORITIES } from '../../../../shared/types/session/issue/issue-priority';\n\nconst IssuesCards = (props: IIssuesData): JSX.Element => {\n  const { issues, addNewIssue, removeIssue, newIssueId, isPlayerDealer } =\n    props;\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const newIssue: Issue = {\n    id: newIssueId,\n    title: '',\n    link: '',\n    priority: ISSUE_PRIORITIES.LOW,\n    isSynced: false,\n    closed: false,\n  };\n\n  const [activeIssue, setActiveIssue] = useState<Issue>(newIssue);\n\n  const findIssue = (issueId?: number): void => {\n    const editIssue = issues.list.find(issue => issue.id === issueId);\n\n    setActiveIssue(editIssue ? editIssue : newIssue);\n  };\n\n  const openModal = (issueId?: number): void => {\n    findIssue(issueId);\n\n    onOpen();\n  };\n\n  const setNewIssue = (issue: Issue): void => {\n    addNewIssue(issue);\n\n    onClose();\n  };\n\n  const changeIssue = (issue: Issue): void => {\n    setActiveIssue({ ...issue });\n  };\n\n  const modalData: IIssueModal = {\n    onClose: onClose,\n    isOpen: isOpen,\n    openModal: openModal,\n    activeIssue: activeIssue,\n    addNewIssue: setNewIssue,\n    changeIssue: changeIssue,\n    removeIssue: removeIssue,\n    isPlayerDealer: isPlayerDealer,\n  };\n\n  return <IssueCardsView issues={issues} modal={modalData} />;\n};\n\nexport default IssuesCards;\n","import React from 'react';\n\nimport { FormLabel, FormControl, Switch } from '@chakra-ui/react';\n\nimport { ISettingsComponentData } from '../../../../shared/types/settings';\n\nconst Switcher = (props: ISettingsComponentData): JSX.Element => {\n  const { data } = props;\n\n  const { name, label, value, onChange } = data;\n\n  const setData = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const input = e.target;\n\n    onChange(input.name, input.checked);\n  };\n\n  return (\n    <FormControl\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n    >\n      <FormLabel htmlFor={name} mb=\"0\">\n        {label}\n      </FormLabel>\n      <Switch\n        colorScheme=\"green\"\n        id={name}\n        name={name}\n        isChecked={value as boolean}\n        onChange={setData}\n      />\n    </FormControl>\n  );\n};\n\nexport default Switcher;\n","import React from 'react';\n\nimport { FormLabel, FormControl, Input } from '@chakra-ui/react';\n\nimport { ISettingsComponentData } from '../../../../shared/types/settings';\n\nconst InputText = (props: ISettingsComponentData): JSX.Element => {\n  const { data } = props;\n\n  const { name, label, value, onChange } = data;\n\n  const setData = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const input = e.target;\n\n    onChange(input.name, input.value);\n  };\n\n  return (\n    <FormControl\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n    >\n      <FormLabel htmlFor={name} mb=\"0\">\n        {label}\n      </FormLabel>\n      <Input\n        boxShadow=\"md\"\n        w=\"60%\"\n        border=\"black 2px solid\"\n        id={name}\n        name={name}\n        value={value as string}\n        onChange={setData}\n      />\n    </FormControl>\n  );\n};\n\nexport default InputText;\n","import React from 'react';\n\nimport {\n  FormControl,\n  FormLabel,\n  NumberInput,\n  NumberInputField,\n} from '@chakra-ui/react';\n\nexport interface INumberInput {\n  units: string;\n  defaultvalue: number;\n}\n\nconst InputNumber = (props: INumberInput): JSX.Element => {\n  const { defaultvalue, units } = props;\n\n  return (\n    <FormControl>\n      <FormLabel\n        position=\"absolute\"\n        htmlFor={units}\n        fontSize=\"13px\"\n        top=\"-20px\"\n      >\n        {units}\n      </FormLabel>\n      <NumberInput\n        position=\"relative\"\n        w=\"55px\"\n        defaultValue={defaultvalue}\n        min={0}\n        max={59}\n        id={units}\n      >\n        <NumberInputField\n          textAlign=\"center\"\n          padding=\"0 5px\"\n          fontWeight=\"600\"\n          fontSize=\"36px\"\n        />\n      </NumberInput>\n    </FormControl>\n  );\n};\n\nexport default InputNumber;\n","import React from 'react';\n\nimport { FormControl, FormLabel, Stack, Text } from '@chakra-ui/react';\n\nimport InputNumber from '../../components/InputNumber/InputNumber';\n\ninterface ITimer {\n  time: number;\n}\n\nconst Timer = (props: ITimer): JSX.Element => {\n  const { time } = props;\n\n  // console.log(time);\n\n  const minutes = Math.trunc(time / 60);\n\n  const seconds = time % 60;\n\n  return (\n    <FormControl\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n    >\n      <FormLabel htmlFor=\"timer\" mb=\"0\">\n        Round time:\n      </FormLabel>\n\n      <Stack\n        id=\"timer\"\n        shadow=\"lg\"\n        direction=\"row\"\n        spacing={3}\n        align=\"center\"\n        p=\"5px\"\n        w=\"150px\"\n        height=\"75px\"\n      >\n        <InputNumber defaultvalue={minutes} units=\"minutes\" />\n\n        <Text>:</Text>\n\n        <InputNumber defaultvalue={seconds} units=\"seconds\" />\n      </Stack>\n    </FormControl>\n  );\n};\n\nexport default Timer;\n","//  Kaesid - –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –¥–∏–∑–∞–π–Ω –∫–∞—Ä—Ç –º–Ω–µ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, —Å–≤–æ–π —è –µ—â–µ –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª. –¢–∞–∫ —á—Ç–æ, –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞.\n\nimport React from 'react';\n\nimport { Stack, IconButton, Heading, Text } from '@chakra-ui/react';\n\nimport { ImPencil } from 'react-icons/im';\nimport { CloseIcon } from '@chakra-ui/icons';\n\nimport { ICardData } from '../../../../shared/types/session/card';\n\nconst GameCard = (props: ICardData): JSX.Element => {\n  const { card, edit, units, deleteCard } = props;\n\n  const { value, base64 } = card;\n\n  return (\n    <Stack\n      position=\"relative\"\n      w=\"150px\"\n      height=\"210px\"\n      direction=\"column\"\n      justify=\"center\"\n      align=\"center\"\n      p=\"10px 10px\"\n      boxShadow=\"lg\"\n    >\n      <Text\n        fontSize=\"2xl\"\n        maxW=\"130px\"\n        fontStyle=\"italic\"\n        fontWeight=\"bold\"\n        isTruncated\n        mb=\"20px\"\n      >\n        {value}\n      </Text>\n      {base64 ? (\n        // img src={base64}\n        <Heading fontStyle=\"italic\" size=\"lg\">\n          {base64}\n        </Heading>\n      ) : (\n        <Heading fontStyle=\"italic\" size=\"lg\">\n          {units}\n        </Heading>\n      )}\n      <IconButton\n        position=\"absolute\"\n        aria-label=\"edit\"\n        background=\"transparent\"\n        visibility={true ? 'visible' : 'hidden'}\n        top=\"0\"\n        left=\"0\"\n        size=\"lg\"\n        icon={<ImPencil />}\n        onClick={() => edit(value)}\n      />\n      <IconButton\n        position=\"absolute\"\n        aria-label=\"delete\"\n        background=\"transparent\"\n        visibility={true ? 'visible' : 'hidden'}\n        top=\"0\"\n        right=\"0\"\n        size=\"lg\"\n        icon={<CloseIcon />}\n        onClick={() => deleteCard(value)}\n      />\n    </Stack>\n  );\n};\n\nexport default GameCard;\n","import React, { useRef } from 'react';\nimport { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst loadImgFromSrc = (src: string): Promise<HTMLImageElement> => {\n  return new Promise<HTMLImageElement>((res, rej) => {\n    const img = new Image();\n    img.src = src;\n    img.onload = () => {\n      res(img);\n    };\n    img.onerror = () => {\n      rej(new Error(`can't load img`));\n    };\n  });\n};\n\nconst getBlobPromise = (canvas: HTMLCanvasElement): Promise<Blob | null> => {\n  return new Promise(res => {\n    canvas.toBlob(res);\n  });\n};\n\nconst getBase64 = (canvas: HTMLCanvasElement): Promise<string | null> => {\n  return new Promise(res => {\n    getBlobPromise(canvas).then(blob => {\n      if (!blob) res(null);\n      else {\n        const reader = new FileReader();\n        reader.onloadend = () => res(reader.result as string);\n        reader.onerror = () => res(null);\n        reader.onabort = () => res(null);\n        reader.readAsDataURL(blob);\n      }\n    });\n  });\n};\n\nconst calcDrawParams = (\n  img: HTMLImageElement,\n): [number, number, number, number] => {\n  let sx: number;\n  let sy: number;\n  let sWidth: number;\n  let sHeight: number;\n\n  const ratio = img.width / img.height;\n\n  if (ratio >= 1) {\n    sWidth = img.height;\n    sHeight = img.height;\n    sx = (img.width - sWidth) / 2;\n    sy = 0;\n  } else {\n    sWidth = img.width;\n    sHeight = img.width;\n    sx = 0;\n    sy = (img.height - sHeight) / 2;\n  }\n\n  return [sx, sy, sWidth, sHeight];\n};\n\nconst drawImgToCanvas = (img: HTMLImageElement, canvas: HTMLCanvasElement) => {\n  const [sx, sy, sWidth, sHeight] = calcDrawParams(img);\n  canvas\n    .getContext('2d')\n    ?.drawImage(\n      img,\n      sx,\n      sy,\n      sWidth,\n      sHeight,\n      0,\n      0,\n      canvas.width,\n      canvas.height,\n    );\n};\n\nexport interface GetCuttedBase64FromImgSrc {\n  src: string;\n  w: number;\n  h: number;\n}\n\nconst convert = (\n  canvasRef: React.MutableRefObject<HTMLCanvasElement>,\n  opts: GetCuttedBase64FromImgSrc,\n) => {\n  return new Promise<string>((res, rej) => {\n    loadImgFromSrc(opts.src)\n      .then(img => {\n        // waiting for rendering in the dom if the image was loaded very fast\n        setTimeout(() => {\n          const canvas = canvasRef.current;\n          canvas.width = opts.w;\n          canvas.height = opts.h;\n          drawImgToCanvas(img, canvas);\n          getBase64(canvas).then(base64 => {\n            if (typeof base64 === 'string') res(base64);\n            else rej('convertation to a base64 string failed');\n          });\n        });\n      })\n      .catch(err => rej(err));\n  });\n};\n\nexport const useImgConvertor = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null!);\n\n  useEffect(() => {\n    const div = document.createElement('div');\n    ReactDOM.render(\n      ReactDOM.createPortal(<canvas ref={canvasRef} />, div),\n      div,\n    );\n\n    return () => {\n      ReactDOM.render(<></>, div);\n    };\n  });\n\n  return convert.bind(null, canvasRef);\n};\n","import { Button, Flex, Box, FormLabel, Avatar } from '@chakra-ui/react';\nimport { useImgConvertor } from '../../../../hooks/useImgConvertor';\nimport { useLoadImg } from '../../../../hooks/useImgLoader';\nimport { useTypedSelector, useAppDispatch } from '../../../../redux/store';\nimport {\n  changeAvatarBase64,\n  changeAvatarBgColor,\n} from '../../../../redux/slices/userInfo';\nimport { AVATAR_HEIGHT, AVATAR_WIDTH } from '../../../../constants';\n\nconst AvatarForm = () => {\n  const dispatch = useAppDispatch();\n  const { name, surname, avatarBase64, avatarBgColor } = useTypedSelector(\n    state => state.userInfo,\n  );\n\n  const convert = useImgConvertor();\n  const loadImg = useLoadImg();\n\n  const avatarChange = (): void => {\n    loadImg()\n      .then(src => {\n        convert({ src, w: AVATAR_WIDTH, h: AVATAR_HEIGHT })\n          .then(base64 => {\n            dispatch(changeAvatarBase64(base64));\n          })\n          .catch(() => {}); // user's file is invalid, show some error\n      })\n      .catch(err => {\n        // console.log(err);\n      }); // user didn't pick a file, just ignore\n  };\n\n  const deleteAvatar = (): void => {\n    dispatch(changeAvatarBase64(''));\n  };\n\n  return (\n    <Flex direction=\"column\" justify=\"space-between\" alignItems=\"center\">\n      <Avatar\n        name={`${name} ${surname}`}\n        bg={avatarBgColor}\n        size=\"2xl\"\n        src={avatarBase64}\n        color=\"white\"\n      />\n      <input\n        type=\"color\"\n        value={avatarBgColor}\n        onChange={e => dispatch(changeAvatarBgColor(e.target.value))}\n      />\n      <Box>\n        <FormLabel mb=\"1rem\">Image:</FormLabel>\n        <Button colorScheme=\"facebook\" onClick={avatarChange}>\n          Upload\n        </Button>\n        <Button colorScheme=\"facebook\" variant=\"outline\" onClick={deleteAvatar}>\n          Reset\n        </Button>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default AvatarForm;\n","export const useLoadImg = () => {\n  return () => {\n    return new Promise<string>((res, rej) => {\n      const input = document.createElement('input');\n      input.type = 'file';\n      input.click();\n      input.addEventListener('change', e => {\n        const file = input.files?.[0];\n\n        if (file) {\n          const reader = new FileReader();\n          reader.onload = () => {\n            const src = reader.result;\n\n            if (typeof src === 'string') res(src);\n            else rej();\n          };\n          reader.readAsDataURL(file);\n        } else rej();\n      });\n    });\n  };\n};\n","export const AVATAR_WIDTH = 200;\nexport const AVATAR_HEIGHT = 200;\n","import React from 'react';\n\nimport {\n  Button,\n  ButtonGroup,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  Stack,\n  Input,\n  FormControl,\n  FormLabel,\n} from '@chakra-ui/react';\n\nimport { ICardModalData } from '../../../../shared/types/session/card';\n\nimport AvatarForm from '../../modules/HomePage/components/avatar-form/avatar-form';\nimport { LOCALE_US } from '../../locales/locale-us';\n\nconst GameCardModal = (props: ICardModalData): JSX.Element => {\n  const { modal } = props;\n\n  const { isOpen, onClose, activeCard, changeCardValue, setCard } = modal;\n\n  const { value, base64 } = activeCard;\n\n  console.log(base64); //! –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∑–∞—Å–µ—Ç–∞—Ç—å –µ–≥–æ –≤ base64, –∏–Ω–∞—á–µ =undefined\n\n  const setCardData = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const input = event.target;\n\n    changeCardValue({ ...activeCard, [input.name]: input.value });\n  };\n\n  return (\n    <>\n      <Modal closeOnOverlayClick={false} isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Card Data:</ModalHeader>\n\n          <ModalBody mb=\"20px\">\n            <Stack d=\"flex\" justify=\"space-around\" align=\"stretch\">\n              <FormControl mb=\"10px\" id=\"title\" isRequired>\n                <Stack spacing={2} direction=\"row\" align=\"center\">\n                  <FormLabel>Card Value:</FormLabel>\n                  <Input value={value} onChange={setCardData} name=\"value\" />\n                </Stack>\n              </FormControl>\n              <Stack spacing={2} direction=\"column\" align=\"center\">\n                <FormLabel>{LOCALE_US.SETTINGS_CARDS_MODAL_CUSTOM}</FormLabel>\n                <AvatarForm />\n                {/* –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–ª–µ–≥–∫–∞ –∏–∑–º–µ–Ω–Ω–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–∞–Ω–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:\n                –±–µ–∑ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∞–≤–∞—Ç–∞—Ä—ã, –∫–Ω–æ–ø–∫–∞ —Ä–µ—Å–µ—Ç - –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. */}\n              </Stack>\n            </Stack>\n          </ModalBody>\n\n          <ModalFooter>\n            <ButtonGroup\n              colorScheme=\"facebook\"\n              width=\"100%\"\n              display=\"flex\"\n              justifyContent=\"space-between\"\n            >\n              <Button padding=\"0 50px\" variant=\"outline\" onClick={onClose}>\n                No\n              </Button>\n              <Button padding=\"0 50px\" onClick={setCard}>\n                Yes\n              </Button>\n            </ButtonGroup>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GameCardModal;\n","import React from 'react';\n\nimport { Stack, Icon } from '@chakra-ui/react';\n\nimport { ImPlus } from 'react-icons/im';\n\ninterface IGameCardCreate {\n  onClick: () => void;\n}\n\nconst NewGameCardButton = (props: IGameCardCreate): JSX.Element => {\n  const { onClick } = props;\n\n  return (\n    <Stack\n      w=\"150px\"\n      height=\"210px\"\n      onClick={() => onClick()}\n      align=\"center\"\n      justifyContent=\"center\"\n      p=\"10px\"\n      boxShadow=\"lg\"\n      cursor=\"pointer\"\n      _hover={{ bg: 'green.300' }}\n    >\n      <Icon as={ImPlus} w={8} h={8} />\n    </Stack>\n  );\n};\n\nexport default NewGameCardButton;\n","import React from 'react';\n\nimport { Box, Heading, Stack } from '@chakra-ui/react';\n\nimport { ICardData, ICardsView } from '../../../../shared/types/session/card';\n\nimport GameCard from '../../components/GameCard/GameCard';\nimport GameCardModal from '../../components/GameCardModal/GameCardModal';\nimport NewGameCardButton from '../../components/NewGameCardButton/NewGameCardButton';\nimport { LOCALE_US } from '../../locales/locale-us';\n\nconst IssueCardView = (props: ICardsView): JSX.Element => {\n  const { cards, modal, units, deleteCard } = props;\n\n  return (\n    <Box mb=\"30px\">\n      <Heading mb=\"20px\" size=\"md\">\n        {LOCALE_US.SETTINGS_CARDS_HEADER}\n      </Heading>\n\n      <Stack w=\"100%\" wrap=\"wrap\" direction=\"row\">\n        {cards.map(card => {\n          const id = card.value;\n\n          const data: ICardData = {\n            card,\n            edit: modal.openModal,\n            units,\n            deleteCard,\n          };\n\n          return (\n            <Stack key={`${id}-wrap`}>\n              <GameCard {...data} key={id} />;\n            </Stack>\n          );\n        })}\n\n        <NewGameCardButton onClick={modal.openModal} />\n\n        <GameCardModal modal={modal} />\n      </Stack>\n    </Box>\n  );\n};\n\nexport default IssueCardView;\n","import React, { useState } from 'react';\n\nimport { useDisclosure, useToast } from '@chakra-ui/react';\n\nimport {\n  CardData,\n  ICardModal,\n  ICardsData,\n  ICardsView,\n} from '../../../../shared/types/session/card';\n\nimport GameCardsView from './GameCardsView';\nimport { OBJ_PROCESSOR } from '../../../../shared/helpers/processors/obj-processor';\n\nconst GameCards = (props: ICardsData): JSX.Element => {\n  const toast = useToast();\n\n  const { cards, units, setLocalSettings } = props;\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const newGameCard: CardData = {\n    value: '',\n  };\n\n  const [editedCardIndex, setEditedCardIndex] = useState(-1);\n\n  const [activeCard, setActiveCard] = useState<CardData>(newGameCard);\n\n  const findEditedCard = (cardValue = ''): CardData | undefined => {\n    return cards.find(card => card.value === cardValue);\n  };\n\n  const openModal = (cardValue = ''): void => {\n    const editedCard = findEditedCard(cardValue);\n\n    if (editedCard) {\n      setActiveCard(editedCard);\n\n      setEditedCardIndex(cards.indexOf(editedCard));\n    } else {\n      setActiveCard(newGameCard);\n\n      setEditedCardIndex(-1);\n    }\n\n    onOpen();\n  };\n\n  const changeCardValue = (card: CardData): void => {\n    setActiveCard({ ...card });\n  };\n\n  const setCard = (): void => {\n    const CardWithSameValue = findEditedCard(activeCard.value);\n\n    const cardsCopy = OBJ_PROCESSOR.deepClone(cards);\n\n    if (CardWithSameValue) {\n      const indexOfCardWithSameValue = cards.indexOf(CardWithSameValue);\n\n      if (editedCardIndex === indexOfCardWithSameValue) {\n        cardsCopy[editedCardIndex] = activeCard;\n\n        cardsCopy.sort((s, t) => s.value.localeCompare(t.value));\n\n        console.log(cardsCopy);\n\n        setLocalSettings('cards', cardsCopy);\n\n        onClose();\n      } else {\n        toast({\n          title: 'Value must be unique!',\n          status: 'error',\n          duration: 5000,\n          isClosable: true,\n        });\n      }\n    } else {\n      if (editedCardIndex !== -1) {\n        cardsCopy[editedCardIndex] = activeCard;\n      } else {\n        cardsCopy.push(activeCard);\n      }\n\n      cardsCopy.sort((s, t) => s.value.localeCompare(t.value));\n\n      console.log(cardsCopy);\n\n      setLocalSettings('cards', cardsCopy);\n\n      onClose();\n    }\n  };\n\n  const deleteCard = (value: string): void => {\n    const card = findEditedCard(value);\n\n    console.log(card);\n\n    if (card) {\n      const cardIndex = cards.indexOf(card);\n\n      const cardsCopy = OBJ_PROCESSOR.deepClone(cards);\n\n      console.log(cardIndex);\n\n      cardsCopy.splice(cardIndex, 1);\n\n      setLocalSettings('cards', cardsCopy);\n    }\n  };\n\n  const modalData: ICardModal = {\n    onClose: onClose,\n    isOpen: isOpen,\n    openModal: openModal,\n    activeCard: activeCard,\n    changeCardValue: changeCardValue,\n    setCard: setCard,\n  };\n\n  const data: ICardsView = { cards, modal: modalData, units, deleteCard };\n\n  return <GameCardsView {...data} />;\n};\n\nexport default GameCards;\n","import React from 'react';\n\nimport { Stack, Heading, Box } from '@chakra-ui/react';\nimport { LOCALE_US } from '../../locales/locale-us';\nimport { ISettingsComponent } from '../../../../shared/types/settings';\nimport Switcher from '../../components/Switcher/Switcher';\nimport InputText from '../../components/InputText/InputText';\nimport Timer from '../Timer/Timer';\nimport { useAppDispatch, useTypedSelector } from '../../redux/store';\nimport { setSettings } from '../../redux/slices/settings';\nimport GameCards from '../GameCards/GameCards';\nimport { CardData, ICardsData } from '../../../../shared/types/session/card';\n\nconst Settings = (): JSX.Element => {\n  const dispatch = useAppDispatch();\n\n  const localSettings = useTypedSelector(state => state.settings);\n\n  const {\n    dealerAsPlayer,\n    changingCardInRoundEnd,\n    isTimerNeeded,\n    scoreType,\n    scoreTypeShort,\n    roundTime,\n    cards,\n  } = localSettings;\n\n  const setLocalSettings = (\n    name: string,\n    value: string | boolean | CardData[],\n  ): void => {\n    dispatch(setSettings({ ...localSettings, [name]: value }));\n  };\n\n  const switchersData: ISettingsComponent[] = [\n    {\n      name: 'dealerAsPlayer',\n      label: LOCALE_US.SETTINGS_IS_DEALER_PLAYER,\n      value: dealerAsPlayer,\n      onChange: setLocalSettings,\n    },\n    {\n      name: 'changingCardInRoundEnd',\n      label: LOCALE_US.SETTINGS_OPEN_CARDS_ON_ROUND_END,\n      value: changingCardInRoundEnd,\n      onChange: setLocalSettings,\n    },\n    {\n      name: 'isTimerNeeded',\n      label: LOCALE_US.SETTINGS_IS_TIMER_ON,\n      value: isTimerNeeded,\n      onChange: setLocalSettings,\n    },\n  ];\n\n  const inputsData: ISettingsComponent[] = [\n    {\n      name: 'scoreType',\n      label: LOCALE_US.SETTINGS_SCORE_TYPE,\n      value: scoreType,\n      onChange: setLocalSettings,\n    },\n    {\n      name: 'scoreTypeShort',\n      label: LOCALE_US.SETTINGS_SCORE_TYPE_SHORT,\n      value: scoreTypeShort,\n      onChange: setLocalSettings,\n    },\n  ];\n\n  const cardsData: ICardsData = {\n    cards,\n    units: scoreTypeShort,\n    setLocalSettings,\n  };\n\n  return (\n    <Box>\n      <Stack direction=\"column\" spacing={5} w=\"40%\" mb=\"30px\">\n        <Heading size=\"md\" textAlign=\"end\">\n          Game settings:\n        </Heading>\n\n        {switchersData.map(switcherData => {\n          const { name } = switcherData;\n\n          return <Switcher data={switcherData} key={name} />;\n        })}\n\n        {inputsData.map(inputData => {\n          const { name } = inputData;\n\n          return <InputText data={inputData} key={name} />;\n        })}\n\n        {isTimerNeeded && <Timer time={roundTime || 0} />}\n      </Stack>\n\n      <GameCards {...cardsData} />\n    </Box>\n  );\n};\n\nexport default Settings;\n","import React from 'react';\n\nimport {\n  Button,\n  Stack,\n  Heading,\n  Box,\n  useToast,\n  useClipboard,\n} from '@chakra-ui/react';\n\ninterface ILink {\n  link: string;\n}\n\nconst JoinGameLink = (props: ILink) => {\n  const { link } = props;\n\n  const toast = useToast();\n\n  const { hasCopied, onCopy } = useClipboard(link);\n\n  const saveToClipboard = (): void => {\n    onCopy();\n\n    toast({\n      title: 'Successfully saved!',\n      status: 'success',\n      duration: 1200,\n      isClosable: true,\n    });\n  };\n\n  return (\n    <Box mb=\"20px\">\n      <Heading fontWeight=\"medium\" fontStyle=\"italic\" size=\"md\">\n        Link to lobby:\n      </Heading>\n\n      <Stack\n        maxW=\"400px\"\n        direction=\"row\"\n        justify=\"flex-start\"\n        align=\"center\"\n        p=\"10px 0\"\n        h=\"45px\"\n      >\n        <Heading\n          fontWeight=\"medium\"\n          boxShadow=\"lg\"\n          size=\"md\"\n          maxW=\"300px\"\n          m=\"0\"\n          padding=\"10px 0 10px 5px\"\n          mr=\"-10px\"\n          isTruncated={true}\n          pr=\"10px\"\n        >\n          {link}\n        </Heading>\n        <Button\n          colorScheme=\"facebook\"\n          w=\"100px\"\n          variant=\"solid\"\n          onClick={saveToClipboard}\n        >\n          {hasCopied ? 'Done!' : 'Copy'}\n        </Button>\n      </Stack>\n    </Box>\n  );\n};\n\nexport default JoinGameLink;\n","import React from 'react';\nimport { Box } from '@chakra-ui/react';\n\nimport { useTypedSelector } from '../../redux/store';\n\nimport UseSessionData from '../../hooks/UseSessionData/UseSessionData';\n\nimport GameControlButtons from '../../components/GameControlButtons/GameControlButtons';\nimport DealerPlate from '../../components/DealerPlate/DealerPlate';\nimport EditableHeader from '../../containers/EdidableHeader/EditableHeader';\nimport UserCards from '../../containers/UserCards/UserCards';\nimport IssueCards from '../../containers/IssuesCards/IssuesCards';\nimport Settings from '../../containers/Settings/Settings';\nimport JoinGameLink from '../../containers/JoinGameLink/JoinGameLink';\n\nconst Lobby = (): JSX.Element => {\n  const session = useTypedSelector(state => state.session);\n\n  const sessionData = UseSessionData(session);\n\n  if (!sessionData) return <></>;\n\n  const {\n    dealerData,\n    membersData,\n    sessionNameData,\n    issuesData,\n    isPlayerDealer,\n  } = sessionData;\n\n  return (\n    <Box minH=\"100vh\" maxW=\"1440px\" w=\"90%\" m=\"0 auto\" p=\"5px\">\n      <EditableHeader {...sessionNameData} />\n      <DealerPlate dealerMemberData={dealerData} />\n      <JoinGameLink link={`${window.location}`} />\n      <GameControlButtons isPlayerDealer={isPlayerDealer} />\n      <UserCards {...membersData} />\n      <IssueCards {...issuesData} />\n      {isPlayerDealer && <Settings />}\n    </Box>\n  );\n};\n\nexport default Lobby;\n","export default __webpack_public_path__ + \"static/media/poker-planing.f68054f9.png\";","import {\n  Image,\n  Heading,\n  Text,\n  Button,\n  Input,\n  Flex,\n  Box,\n} from '@chakra-ui/react';\nimport pokerPlaning from '../../assets/images/poker-planing.png';\nimport { UserRole } from '../../../../../../shared/types/user/user-role';\nimport { USER_ROLES } from '../../../../../../shared/types/user/user-role';\nimport { useAppDispatch, useTypedSelector } from '../../../../redux/store';\nimport { homePageSlice } from '../../../../redux/slices/home-page';\n\ninterface MainPageProps {\n  onPopupCalled: (forRole: UserRole) => void;\n}\n\nconst MainPage = ({ onPopupCalled }: MainPageProps): JSX.Element => {\n  const lobbyURL = useTypedSelector(state => state.homePage.lobbyURL);\n  const dispatch = useAppDispatch();\n  const { setLobbyURL } = homePageSlice.actions;\n\n  return (\n    <Flex align=\"center\" justify=\"center\">\n      <Flex width=\"70%\" direction=\"column\" gridGap=\"2rem\" align=\"center\">\n        <Image src={pokerPlaning} alt=\"Poker Planning\" fit=\"scale-down\" />\n\n        <Flex gridGap=\"2rem\">\n          <Flex direction=\"column\" gridGap=\"2rem\">\n            <Flex direction=\"column\" gridGap=\"2rem\">\n              <Heading>Start your planning:</Heading>\n\n              <Flex justify=\"space-between\">\n                <Text>Create session:</Text>\n                <Button\n                  colorScheme=\"facebook\"\n                  onClick={() => onPopupCalled(USER_ROLES.DEALER)}\n                >\n                  Start new game\n                </Button>\n              </Flex>\n            </Flex>\n\n            <Flex direction=\"column\" gridGap=\"2rem\">\n              <Heading>OR:</Heading>\n              <Text>Connect to lobby by URL:</Text>\n              <Flex>\n                <Input\n                  value={lobbyURL}\n                  onChange={e => dispatch(setLobbyURL(e.target.value || ''))}\n                />\n                <Button\n                  colorScheme=\"facebook\"\n                  onClick={() => onPopupCalled(USER_ROLES.PLAYER)}\n                >\n                  Connect\n                </Button>\n              </Flex>\n            </Flex>\n          </Flex>\n\n          <Box bg=\"grey\">SOME TEXT</Box>\n        </Flex>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default MainPage;\n","import React from 'react';\nimport { useRadio, Box } from '@chakra-ui/react';\n\n// interface Props {\n//   props:\n// }\n\nconst RadioCard = (props: any) => {\n  const { getInputProps, getCheckboxProps } = useRadio(props);\n\n  const input = getInputProps();\n  const checkbox = getCheckboxProps();\n\n  return (\n    <Box as=\"label\">\n      <input {...input} />\n      <Box\n        {...checkbox}\n        cursor=\"pointer\"\n        borderWidth=\"1px\"\n        borderRadius=\"md\"\n        boxShadow=\"md\"\n        _checked={{\n          bg: 'facebook.600',\n          color: 'white',\n          borderColor: 'facebook.600',\n        }}\n        _focus={{\n          boxShadow: 'outline',\n        }}\n        w=\"10rem\"\n        textAlign=\"center\"\n        py={3}\n      >\n        {props.children}\n      </Box>\n    </Box>\n  );\n};\n\nexport default RadioCard;\n","import React from 'react';\nimport { useRadioGroup, HStack } from '@chakra-ui/react';\nimport RadioCard from './radio-card';\nimport { USER_ROLES } from '../../../../../../shared/types/user/user-role';\n\nconst options = [USER_ROLES.PLAYER, USER_ROLES.SPECTATOR];\n\nconst RadioButtons = () => {\n  const { getRootProps, getRadioProps } = useRadioGroup({\n    name: 'role',\n    defaultValue: USER_ROLES.PLAYER,\n    onChange: console.log,\n  });\n\n  const group = getRootProps();\n\n  return (\n    <HStack {...group}>\n      {options.map(value => {\n        const radio = (getRadioProps as (obj: { value: string }) => any)({\n          value,\n        });\n\n        return (\n          <RadioCard key={value} {...radio}>\n            {value}\n          </RadioCard>\n        );\n      })}\n    </HStack>\n  );\n};\n\nexport default RadioButtons;\n","import { ChangeEvent } from 'react';\nimport {\n  Stack,\n  Input,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n} from '@chakra-ui/react';\nimport { useTypedSelector, useAppDispatch } from '../../../../redux/store';\nimport {\n  changeName,\n  changeSurname,\n  changeJobPosition,\n} from '../../../../redux/slices/userInfo';\n\nconst InputsStack = () => {\n  const dispatch = useAppDispatch();\n  const { name, surname, jobPosition } = useTypedSelector(\n    state => state.userInfo,\n  );\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        return dispatch(changeName(value));\n      case 'surname':\n        return dispatch(changeSurname(value));\n      case 'jobPosition':\n        return dispatch(changeJobPosition(value));\n      default:\n        return;\n    }\n  };\n\n  return (\n    <Stack w=\"60%\" spacing={3}>\n      <FormControl>\n        <FormLabel>Your first name:</FormLabel>\n        <Input\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          size=\"md\"\n          isRequired\n        />\n        <FormErrorMessage>Name is required</FormErrorMessage>\n      </FormControl>\n      <FormControl>\n        <FormLabel>Your last name:</FormLabel>\n        <Input\n          name=\"surname\"\n          value={surname}\n          onChange={handleChange}\n          size=\"md\"\n        />\n        <FormErrorMessage></FormErrorMessage>\n      </FormControl>\n      <FormControl>\n        <FormLabel>Your job position:</FormLabel>\n        <Input\n          name=\"jobPosition\"\n          value={jobPosition}\n          onChange={handleChange}\n          size=\"md\"\n        />\n        <FormErrorMessage></FormErrorMessage>\n      </FormControl>\n    </Stack>\n  );\n};\n\nexport default InputsStack;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  Button,\n  Flex,\n  Text,\n} from '@chakra-ui/react';\nimport RadioButtons from '../radio-buttons/radio-buttons';\nimport InputsStack from '../inputs-stack/inputs-stack';\nimport AvatarForm from '../avatar-form/avatar-form';\nimport { useAppDispatch } from '../../../../redux/store';\nimport {\n  connectToLobby,\n  createSession,\n} from '../../../../redux/slices/connect';\n\ninterface ConnectPopupProps {\n  isOpen: boolean;\n  onClose: () => void;\n  forDealer: boolean;\n}\n\nconst ConnectPopup = ({\n  isOpen,\n  onClose,\n  forDealer,\n}: ConnectPopupProps): JSX.Element => {\n  const dispatch = useAppDispatch();\n\n  return (\n    <Modal\n      size=\"xl\"\n      isOpen={isOpen}\n      onClose={onClose}\n      motionPreset=\"slideInBottom\"\n      onOverlayClick={onClose}\n      isCentered={true}\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Connect to lobby</ModalHeader>\n        <ModalBody>\n          <Flex direction=\"column\" alignItems=\"center\" gridGap=\"5rem\">\n            <Flex w=\"100%\" justify=\"space-between\">\n              <InputsStack />\n              <AvatarForm />\n            </Flex>\n            {forDealer ? (\n              <Text size=\"2xl\">You will be a dealer</Text>\n            ) : (\n              <RadioButtons />\n            )}\n          </Flex>\n        </ModalBody>\n\n        <ModalFooter justifyContent=\"space-between\">\n          <Button colorScheme=\"facebook\" variant=\"outline\" onClick={onClose}>\n            Close\n          </Button>\n          <Button\n            colorScheme=\"facebook\"\n            onClick={() =>\n              forDealer ? dispatch(createSession()) : dispatch(connectToLobby())\n            }\n          >\n            Confirm\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default ConnectPopup;\n","import { useEffect, useState } from 'react';\nimport { useDisclosure } from '@chakra-ui/react';\nimport MainPage from './components/main-page/main-page';\nimport ConnectPopup from './components/popup/popup';\nimport { USER_ROLES } from '../../../../shared/types/user/user-role';\nimport { UserRole } from '../../../../shared/types/user/user-role';\nimport { useAppDispatch } from '../../redux/store';\nimport { sessionSlice } from '../../redux/slices/session';\n\nconst HomePage = (): JSX.Element => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [dealer, setDealer] = useState(false);\n\n  const onPopupCall = (forRole: UserRole) => {\n    if (forRole === USER_ROLES.DEALER) {\n      setDealer(true);\n      onOpen();\n    } else {\n      setDealer(false);\n      onOpen();\n    }\n  };\n\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(sessionSlice.actions.dang_reset());\n  }, [dispatch]);\n\n  return (\n    <>\n      <MainPage onPopupCalled={onPopupCall} />\n      <ConnectPopup isOpen={isOpen} onClose={onClose} forDealer={dealer} />\n    </>\n  );\n};\n\nexport default HomePage;\n","import React from 'react';\nimport { Box } from '@chakra-ui/react';\n\nimport { useTypedSelector } from '../../redux/store';\n\nimport UseSessionData from '../../hooks/UseSessionData/UseSessionData';\n\nimport GameControlButtons from '../../components/GameControlButtons/GameControlButtons';\nimport DealerPlate from '../../components/DealerPlate/DealerPlate';\nimport EditableHeader from '../../containers/EdidableHeader/EditableHeader';\nimport UserCards from '../../containers/UserCards/UserCards';\nimport IssueCards from '../../containers/IssuesCards/IssuesCards';\nimport JoinGameLink from '../../containers/JoinGameLink/JoinGameLink';\n\nconst Game = (): JSX.Element => {\n  const session = useTypedSelector(state => state.session);\n\n  const sessionData = UseSessionData(session);\n\n  if (!sessionData) return <></>;\n\n  const {\n    dealerData,\n    membersData,\n    sessionNameData,\n    issuesData,\n    isPlayerDealer,\n  } = sessionData;\n\n  return (\n    <Box minH=\"100vh\" maxW=\"1440px\" w=\"90%\" m=\"0 auto\" p=\"5px\">\n      <EditableHeader {...sessionNameData} />\n      <DealerPlate dealerMemberData={dealerData} />\n      <JoinGameLink link={`${window.location}`} />\n      <GameControlButtons isPlayerDealer={isPlayerDealer} />\n      <UserCards {...membersData} />\n      <IssueCards {...issuesData} />\n    </Box>\n  );\n};\n\nexport default Game;\n","// ! Kaesid - –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å —á–∞–∫—Ä–æ–≤—Å–∫–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏\n\nimport { IRoute } from './routesData';\n\nimport Alerts from '../../components/templates/Alerts/Alerts';\nimport ChakraAnimation from '../../components/templates/Animation/ChakraAnimation';\nimport ChakraAlertDialog from '../../components/templates/AlertDialog/ChakraAlertDialog';\nimport ChakraButtons from '../../components/templates/ChakraButtons/ChakraButtons';\nimport ChakraModal from '../../components/templates/Modal/ChakraModal';\nimport ChakraAvatar from '../../components/templates/Avatar/ChakraAvatar';\nimport ChakraLoader from '../../components/Loader/ChakraLoader';\nimport ChakraEditableText from '../../components/templates/EditableText/ChakraEditableText';\nimport ActionButtonExample from '../../containers/ComponentsExamples/Buttons/ButtonsExample';\n\nexport enum TemplateRoutesPath {\n  ROOT = '/',\n  ANIMATION = '/animation/',\n  ALERTS = '/alerts/',\n  ALERT_DIALOG = '/alert-dialog/',\n  BUTTONS = '/buttons/',\n  MODAL = '/modal/',\n  AVATAR = '/avatar/',\n  LOADER = '/loader/',\n  EDITABLE = '/editable/',\n  BUTTONS_EXAMPLE = '/buttons-example',\n  SETTINGS = '/settings',\n  CARDS = '/cards',\n}\n\nconst templatesRoutes: IRoute[] = [\n  {\n    key: 'chakraAnimation',\n    path: TemplateRoutesPath.ANIMATION,\n    isExact: true,\n    Component: ChakraAnimation,\n  },\n  {\n    key: 'chakraAlerts',\n    path: TemplateRoutesPath.ALERTS,\n    isExact: true,\n    Component: Alerts,\n  },\n  {\n    key: 'chakraAlertDialog',\n    path: TemplateRoutesPath.ALERT_DIALOG,\n    isExact: true,\n    Component: ChakraAlertDialog,\n  },\n  {\n    key: 'chakraButtons',\n    path: TemplateRoutesPath.BUTTONS,\n    isExact: true,\n    Component: ChakraButtons,\n  },\n  {\n    key: 'chakraModal',\n    path: TemplateRoutesPath.MODAL,\n    isExact: true,\n    Component: ChakraModal,\n  },\n  {\n    key: 'chakraAvatar',\n    path: TemplateRoutesPath.AVATAR,\n    isExact: true,\n    Component: ChakraAvatar,\n  },\n  {\n    key: 'chakraLoader',\n    path: TemplateRoutesPath.LOADER,\n    isExact: true,\n    Component: ChakraLoader,\n  },\n  {\n    key: 'chakraEditableText',\n    path: TemplateRoutesPath.EDITABLE,\n    isExact: true,\n    Component: ChakraEditableText,\n  },\n  {\n    key: 'buttonsExample',\n    path: TemplateRoutesPath.BUTTONS_EXAMPLE,\n    isExact: true,\n    Component: ActionButtonExample,\n  },\n];\n\nexport default templatesRoutes;\n","import React from 'react';\n\nimport { Alert, AlertIcon, Stack, Button, useToast } from '@chakra-ui/react';\n\nconst Alerts = (): JSX.Element => {\n  const toast = useToast();\n\n  return (\n    <Stack spacing={3}>\n      <Alert status=\"error\">\n        <AlertIcon />\n        There was an error processing your request\n      </Alert>\n      <Alert status=\"success\">\n        <AlertIcon />\n        Data uploaded to the server. Fire on!\n      </Alert>\n      <Alert status=\"warning\">\n        <AlertIcon />\n        Seems your account is about expire, upgrade now\n      </Alert>\n      <Alert status=\"info\">\n        <AlertIcon />\n        Chakra is going live on August 30th. Get ready!\n      </Alert>\n      <Button\n        onClick={() =>\n          toast({\n            title: 'Custom Error.',\n            description: 'error message',\n            status: 'error',\n            duration: 1200,\n            isClosable: true,\n          })\n        }\n      >\n        Show timed error message\n      </Button>\n    </Stack>\n  );\n};\n\nexport default Alerts;\n","export default __webpack_public_path__ + \"static/media/logo.034ef726.svg\";","import * as React from 'react';\nimport {\n  chakra,\n  keyframes,\n  ImageProps,\n  forwardRef,\n  usePrefersReducedMotion,\n} from '@chakra-ui/react';\nimport logo from './logo.svg';\n\nconst spin = keyframes`\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n`;\n\nexport const Logo = forwardRef<ImageProps, 'img'>((props, ref) => {\n  const prefersReducedMotion = usePrefersReducedMotion();\n\n  const animation = prefersReducedMotion\n    ? undefined\n    : `${spin} infinite 20s linear`;\n\n  return <chakra.img animation={animation} src={logo} ref={ref} {...props} />;\n});\n","import React from 'react';\n\nimport { Code, Link, Text, VStack } from '@chakra-ui/react';\n\nimport { Logo } from '../../Logo/Logo';\n\nconst ChakraAnimation = (): JSX.Element => {\n  return (\n    <VStack spacing={8}>\n      <Logo h=\"40vmin\" pointerEvents=\"none\" />\n      <Text>\n        Edit <Code fontSize=\"xl\">src/App.tsx</Code> and save to reload.\n      </Text>\n      <Link\n        color=\"teal.500\"\n        href=\"https://chakra-ui.com\"\n        fontSize=\"2xl\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Learn Chakra\n      </Link>\n    </VStack>\n  );\n};\n\nexport default ChakraAnimation;\n","import React, { useRef } from 'react';\n\nimport {\n  Button,\n  AlertDialog,\n  AlertDialogOverlay,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogBody,\n  AlertDialogFooter,\n  useDisclosure,\n} from '@chakra-ui/react';\nimport { useLocale } from '../../../hooks/useLocale';\n\nconst ChakraAlertDialog = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const cancelRef = useRef(null);\n\n  const locale = useLocale();\n\n  return (\n    <>\n      <Button colorScheme=\"red\" onClick={onOpen}>\n        Kick Player\n      </Button>\n\n      <AlertDialog\n        isOpen={isOpen}\n        leastDestructiveRef={cancelRef}\n        onClose={onClose}\n      >\n        <AlertDialogOverlay>\n          <AlertDialogContent>\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\n              Kick Player?\n            </AlertDialogHeader>\n\n            <AlertDialogBody>\n              {locale.SESSION_DEALER_KICK_CONFIRMATION_POPUP_BODY}\n            </AlertDialogBody>\n\n            <AlertDialogFooter>\n              <Button ref={cancelRef} onClick={onClose}>\n                No\n              </Button>\n              <Button colorScheme=\"red\" onClick={onClose} ml={3}>\n                Yes\n              </Button>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialogOverlay>\n      </AlertDialog>\n    </>\n  );\n};\n\nexport default ChakraAlertDialog;\n","import { LocaleKey } from '../locales/locale';\nimport { useTypedSelector } from '../redux/store';\n\nexport const useLocale = (): Record<LocaleKey, string> => {\n  return useTypedSelector(state => state.locale);\n};\n","import React from 'react';\n\nimport {\n  Button,\n  ButtonGroup,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  useDisclosure,\n  Select,\n  Stack,\n  Input,\n  FormControl,\n  FormLabel,\n} from '@chakra-ui/react';\n\nconst ChakraModal = (): JSX.Element => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Button onClick={onOpen}>Create Issue</Button>\n\n      <Modal closeOnOverlayClick={false} isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Create Issue</ModalHeader>\n\n          <ModalBody mb=\"20px\">\n            <Stack>\n              <FormControl id=\"title\" isRequired>\n                <Stack spacing={2} direction=\"row\" align=\"center\">\n                  <FormLabel>Title:</FormLabel>\n                  <Input placeholder=\"Issue name\" />\n                </Stack>\n              </FormControl>\n              <Stack spacing={2} direction=\"row\" align=\"center\">\n                <FormLabel>Priority:</FormLabel>\n                <Select variant=\"filled\" bg=\"gray.100\">\n                  <option value=\"low\">Low</option>\n                  <option value=\"middle\">Middle</option>\n                  <option value=\"high\">High</option>\n                </Select>\n              </Stack>\n            </Stack>\n          </ModalBody>\n\n          <ModalFooter>\n            <ButtonGroup\n              colorScheme=\"facebook\"\n              width=\"100%\"\n              display=\"flex\"\n              justifyContent=\"space-between\"\n            >\n              <Button padding=\"0 50px\">Yes</Button>\n              <Button padding=\"0 50px\" variant=\"outline\" onClick={onClose}>\n                No\n              </Button>\n            </ButtonGroup>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ChakraModal;\n","import React from 'react';\n\nimport { Wrap, WrapItem, Avatar } from '@chakra-ui/react';\n\nconst ChakraAvatar = (): JSX.Element => {\n  return (\n    <Wrap>\n      <WrapItem>\n        <Avatar name=\"Dan Abrahmov\" src=\"\" />\n      </WrapItem>\n      <WrapItem>\n        <Avatar name=\"Kola Tioluwani\" src=\"\" />\n      </WrapItem>\n      <WrapItem>\n        <Avatar name=\"Kent Dodds\" src=\"https://bit.ly/kent-c-dodds\" />\n      </WrapItem>\n      <WrapItem>\n        <Avatar name=\"Ryan Florence\" src=\"https://bit.ly/ryan-florence\" />\n      </WrapItem>\n      <WrapItem>\n        <Avatar name=\"Prosper Otemuyiwa\" src=\"https://bit.ly/prosper-baba\" />\n      </WrapItem>\n      <WrapItem>\n        <Avatar name=\"Christian Nwamba\" src=\"https://bit.ly/code-beast\" />\n      </WrapItem>\n      <WrapItem>\n        <Avatar name=\"Segun Adebayo\" src=\"https://bit.ly/sage-adebayo\" />\n      </WrapItem>\n    </Wrap>\n  );\n};\n\nexport default ChakraAvatar;\n","import React from 'react';\n\nimport { Editable, EditableInput, EditablePreview } from '@chakra-ui/react';\n\nconst ChakraEditableText = (): JSX.Element => {\n  return (\n    <>\n      <Editable defaultValue=\"Click to edit\">\n        <EditablePreview />\n        <EditableInput />\n      </Editable>\n    </>\n  );\n};\n\nexport default ChakraEditableText;\n","//! –û–±–∑–∞—Ç–µ–ª—å–Ω—ã —Ç–æ–ª—å–∫–æ –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏: –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ç–µ–∫—Å—Ç, –∏ —à–∏—Ä–∏–Ω–∞.\n//! –í—ã—Å–æ—Ç–∞ —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫, —Å—É–¥—è –ø–æ –º–∞–∫–µ—Ç—É, –æ–¥–∏–Ω–∞–∫–æ–≤–∞. –ï–µ –∏ —à—Ä–∏—Ñ—Ç –∑–∞–¥–∞–¥–∏–º —É–∂–µ –æ—Ç–¥–µ–ª—å–Ω–æ, –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.\n\nimport React from 'react';\n\nimport { Button } from '@chakra-ui/react';\n\nimport { IButtonData } from './buttonTypes';\n\nconst ActionButton = (props: IButtonData): JSX.Element => {\n  const { data } = props;\n\n  const {\n    text,\n    width,\n    isLoading = false,\n    isCofirmButton = true,\n    loadingText = '',\n    onClick,\n  } = data;\n\n  const variant = isCofirmButton ? 'solid' : 'outline';\n\n  return (\n    <Button\n      colorScheme=\"facebook\"\n      w={width}\n      variant={variant}\n      isLoading={isLoading}\n      loadingText={loadingText}\n      onClick={onClick}\n    >\n      {text}\n    </Button>\n  );\n};\n\nexport default ActionButton;\n","import React from 'react';\n\nimport { ButtonGroup } from '@chakra-ui/react';\n\nimport ActionButton from '../../../components/templates/Button/Button';\nimport { IButton } from '../../../components/templates/Button/buttonTypes';\n\ninterface IButtonsData {\n  data: IButton[];\n}\n\nconst ButtonsExampleView = (props: IButtonsData): JSX.Element => {\n  const { data } = props;\n\n  return (\n    <ButtonGroup>\n      {data.map(buttonData => {\n        return (\n          <ActionButton data={buttonData} key={JSON.stringify(buttonData)} />\n        );\n      })}\n    </ButtonGroup>\n  );\n};\n\nexport default ButtonsExampleView;\n","import React, { useState } from 'react';\n\nimport { IButton } from '../../../components/templates/Button/buttonTypes';\nimport ButtonsExampleView from './ButtonsExampleView';\n\nconst ActionButtonExample = (): JSX.Element => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [isCancelling, setIsCancelling] = useState(false);\n\n  const connectToServer = (): void => {\n    setIsLoading(true);\n\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 1000);\n  };\n\n  const cancelGame = (): void => {\n    setIsCancelling(true);\n\n    setTimeout(() => {\n      setIsCancelling(false);\n    }, 1500);\n  };\n\n  const actionButtonData: IButton = {\n    isLoading: isLoading,\n    loadingText: 'Connecting...',\n    width: '200px',\n    text: 'Connect',\n    onClick: connectToServer,\n  };\n\n  const cancelButtonData: IButton = {\n    isLoading: isCancelling,\n    loadingText: 'Cancelling...',\n    isCofirmButton: false,\n    width: '130px',\n    text: 'Cancel game',\n    onClick: cancelGame,\n  };\n\n  return <ButtonsExampleView data={[actionButtonData, cancelButtonData]} />;\n};\n\nexport default ActionButtonExample;\n","import { RoutesPath } from '../Routes/routesData';\nimport { TemplateRoutesPath } from '../Routes/templateRoutesData';\n\nexport interface ILink {\n  link: string;\n  text: string;\n}\n\nconst templatesLinks: ILink[] = [\n  {\n    text: 'Root',\n    link: TemplateRoutesPath.ROOT,\n  },\n  {\n    text: 'Lobby',\n    link: RoutesPath.LOBBY,\n  },\n  {\n    text: 'Animation',\n    link: TemplateRoutesPath.ANIMATION,\n  },\n  {\n    text: 'Alerts',\n    link: TemplateRoutesPath.ALERTS,\n  },\n  {\n    text: 'AlertDialog',\n    link: TemplateRoutesPath.ALERT_DIALOG,\n  },\n  {\n    text: 'Modal',\n    link: TemplateRoutesPath.MODAL,\n  },\n  {\n    text: 'Buttons',\n    link: TemplateRoutesPath.BUTTONS,\n  },\n  {\n    text: 'Avatars',\n    link: TemplateRoutesPath.AVATAR,\n  },\n  {\n    text: 'Loader',\n    link: TemplateRoutesPath.LOADER,\n  },\n  {\n    text: 'Editable Text',\n    link: TemplateRoutesPath.EDITABLE,\n  },\n  {\n    text: 'Buttons Example',\n    link: TemplateRoutesPath.BUTTONS_EXAMPLE,\n  },\n  {\n    text: 'Settings',\n    link: TemplateRoutesPath.SETTINGS,\n  },\n  {\n    text: 'Game Cards',\n    link: TemplateRoutesPath.CARDS,\n  },\n];\n\nexport default templatesLinks;\n","import React from 'react';\nimport {\n  Drawer,\n  DrawerContent,\n  DrawerCloseButton,\n  DrawerHeader,\n  DrawerBody,\n  Button,\n  DrawerFooter,\n  Flex,\n} from '@chakra-ui/react';\nimport templatesLinks from './templatesLinks';\nimport { NavLink } from 'react-router-dom';\n\nexport interface HeaderDevDrawerProps {\n  isOpen: boolean;\n  onClose: () => unknown;\n}\n\nexport const HeaderDevDrawer = (props: HeaderDevDrawerProps): JSX.Element => {\n  const { isOpen, onClose } = props;\n\n  return (\n    <Drawer isOpen={isOpen} placement=\"right\" onClose={onClose}>\n      {/* <DrawerOverlay /> */}\n      <DrawerContent>\n        <DrawerCloseButton />\n        <DrawerHeader>Dev links</DrawerHeader>\n\n        <DrawerBody>\n          <Flex direction=\"column\" gap={2}>\n            {templatesLinks.map(linkData => {\n              const { link, text } = linkData;\n\n              return (\n                <li className=\"nav-item\" key={`${link}-li`}>\n                  <NavLink\n                    exact\n                    strict\n                    className=\"nav-link\"\n                    to={link}\n                    key={`${link}-nav`}\n                  >\n                    {text}\n                  </NavLink>\n                </li>\n              );\n            })}\n          </Flex>\n        </DrawerBody>\n\n        <DrawerFooter>\n          <Button variant=\"outline\" mr={3} onClick={onClose}>\n            Cancel\n          </Button>\n        </DrawerFooter>\n      </DrawerContent>\n    </Drawer>\n  );\n};\n","import * as React from 'react';\nimport { ChatIcon } from '@chakra-ui/icons';\n\nimport logo from '../../assets/images/shared/logo.svg';\n\nimport {\n  VisuallyHidden,\n  Flex,\n  useDisclosure,\n  Button,\n  IconButton,\n  Spacer,\n  HStack,\n  Image,\n} from '@chakra-ui/react';\nimport { ColorModeSwitcher } from '../../containers/ColorModeSwitcher/ColorModeSwitcher';\nimport { HeaderDevDrawer } from './drawer';\nimport { useAppDispatch } from '../../redux/store';\nimport { chatStateToggle } from '../../redux/slices/chat';\n\nexport const Header = (): JSX.Element => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const dispatch = useAppDispatch();\n\n  const toggleChat = (): void => {\n    dispatch(chatStateToggle());\n  };\n\n  return (\n    <Flex\n      bg=\"gray.300\"\n      height=\"100%\"\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n      px=\"2\"\n    >\n      <HStack h=\"100%\" fontFamily=\"handwrite\">\n        <Image src={logo} maxH=\"95%\" />\n        <h1>\n          Pointing Poker\n          <VisuallyHidden>by no95typem, kaesid, vimbi</VisuallyHidden>\n        </h1>\n      </HStack>\n\n      <HStack justifySelf=\"end\">\n        <Button onClick={onOpen}>DEV_DRAWER</Button>\n        <HeaderDevDrawer isOpen={isOpen} onClose={onClose} />\n        <Spacer />\n        <ColorModeSwitcher justifySelf=\"flex-end\" />\n        <Spacer />\n        <IconButton\n          aria-label=\"chat\"\n          icon={<ChatIcon />}\n          onClick={toggleChat}\n        />\n      </HStack>\n    </Flex>\n  );\n};\n","import { OBJ_PROCESSOR } from '../../shared/helpers/processors/obj-processor';\nimport { KnownErrorsKey } from '../../shared/knownErrorsKeys';\nimport { NoConnectionToServerPage } from './containers/ErrorsMUX/ErrorsPages/NoConnectionToServerPage/NoConnectionToServerPage';\n\nexport interface AppError {\n  type: 'unknown' | 'communication';\n  description: string;\n  more?: string;\n  Component?: () => JSX.Element;\n}\n\nexport const KNOWN_ERRORS: Record<KnownErrorsKey, AppError> = {\n  NO_CONNECTION_TO_SERVER: {\n    type: 'communication',\n    description: `Can't connect to a server. Our server is down or something breaks a connection`,\n    Component: NoConnectionToServerPage,\n  },\n  UNEXPECTED_REDIRECT_TO_ERROR: {\n    type: 'unknown',\n    description: `You was redirected to this page, but no known errors are found. It's strange, Try to reload page.`,\n  },\n  FAILED_TO_SEND_MSG_TO_SERVER: {\n    type: 'communication',\n    description: 'failed to send msg through ws',\n  },\n  SC_PROTOCOL_ERROR: {\n    type: 'communication',\n    description: 'Generic protocol error',\n  },\n  SC_ALREADY_CONNECTED_TO_SESSION: {\n    type: 'communication',\n    description: 'You already connected to a session',\n  },\n  SESSION_DOES_NOT_EXIST: {\n    type: 'communication',\n    description: `Session doesn't exist`,\n  },\n  UNKNOWN_ERROR: {\n    type: 'unknown',\n    description: `Unknown error, try to reload the page`,\n  },\n};\n\nOBJ_PROCESSOR.deepFreeze(KNOWN_ERRORS);\n","import React from 'react';\nimport { Alert, AlertIcon, Button, VStack } from '@chakra-ui/react';\nimport { SERVER_ADAPTER } from '../../../../modules/ServerAdapter/ServerAdapter';\n\nexport const NoConnectionToServerPage = () => {\n  return (\n    <VStack>\n      <Alert status=\"error\" maxW=\"fit-content\">\n        <AlertIcon />\n        Sorry, we can't establish a connection to the server\n      </Alert>\n      <Button onClick={() => SERVER_ADAPTER.connect()}>\n        Press to try to reconnect\n      </Button>\n    </VStack>\n  );\n};\n","import React from 'react';\nimport { Alert, AlertIcon, Button, VStack } from '@chakra-ui/react';\nimport { AppError } from '../../../../knownErrors';\nimport { useHistory } from 'react-router-dom';\nimport { KnownErrorsKey } from '../../../../../../shared/knownErrorsKeys';\n\nexport interface GenericErrorPageProps {\n  key?: KnownErrorsKey;\n  error: AppError;\n}\n\nexport const GenericErrorPage = (props: GenericErrorPageProps) => {\n  const history = useHistory();\n\n  return (\n    <VStack>\n      <Alert status=\"error\" maxW=\"500px\">\n        <AlertIcon />\n        {props.error.description}\n      </Alert>\n      <Button\n        onClick={() => {\n          history.push('');\n          window.location.reload();\n        }}\n      >\n        Reload app\n      </Button>\n    </VStack>\n  );\n};\n","import React from 'react';\nimport { KnownErrorsKey } from '../../../../shared/knownErrorsKeys';\nimport { KNOWN_ERRORS } from '../../knownErrors';\nimport { useTypedSelector } from '../../redux/store';\nimport { GenericErrorPage } from './ErrorsPages/GenericErrorPage/GenericErrorPage';\n\nexport const ErrorsMUX = (): JSX.Element => {\n  const errors = useTypedSelector(state => state.errors);\n  const errorKeys = Object.keys(errors) as KnownErrorsKey[];\n\n  const keyWitchComponent = errorKeys.find(key => KNOWN_ERRORS[key].Component);\n\n  if (keyWitchComponent) {\n    const Component = KNOWN_ERRORS[keyWitchComponent]\n      .Component as () => JSX.Element;\n\n    return <Component />;\n  }\n\n  return (\n    <GenericErrorPage\n      error={\n        KNOWN_ERRORS[errorKeys[0]] || KNOWN_ERRORS.UNEXPECTED_REDIRECT_TO_ERROR\n      }\n    />\n  );\n};\n","import { OBJ_PROCESSOR } from '../../shared/helpers/processors/obj-processor';\nimport { KnownLoadKey } from '../../shared/knownLoadsKeys';\n\nexport interface AppLoad {\n  type: 'unknown' | 'communication';\n  description: string;\n  more?: string;\n  Component?: () => JSX.Element;\n}\n\nexport const KNOWN_LOADS: Record<KnownLoadKey, AppLoad> = {\n  UNEXPECTED_REDIRECT_TO_LOAD: {\n    type: 'unknown',\n    description: `You was redirected to this page, but no known loads are found. It's strange, Please, wait...`,\n  },\n  CONNECTING_TO_SERVER: {\n    type: 'communication',\n    description: `Please wait until a connection with a server will be established`,\n  },\n  SESSION_STAGE_CHANGE: {\n    type: 'communication',\n    description: `Session stage is changing. please wait...`,\n  },\n  CONNECTING_TO_LOBBY: {\n    type: 'communication',\n    description: `Connecting to lobby...`,\n  },\n};\n\nOBJ_PROCESSOR.deepFreeze(KNOWN_LOADS);\n","import { CircularProgress, Text, VStack } from '@chakra-ui/react';\nimport React from 'react';\n\nexport interface GenericLoadPageProps {\n  text: string;\n}\n\nexport const GenericLoadPage = (props: GenericLoadPageProps): JSX.Element => {\n  return (\n    <VStack>\n      <Text>{props.text}</Text>\n      <CircularProgress isIndeterminate color=\"blue.400\" />\n    </VStack>\n  );\n};\n\n//Please wait until connection to server will be established\n","import React from 'react';\nimport { KnownLoadKey } from '../../../../shared/knownLoadsKeys';\nimport { KNOWN_LOADS } from '../../knownLoads';\n\nimport { useTypedSelector } from '../../redux/store';\nimport { GenericLoadPage } from './LoadsPages/GenericLoadPage/GenericLoadPage';\n\nexport const LoadsMUX = (): JSX.Element => {\n  const loads = useTypedSelector(state => state.loads);\n  const loadsKeys = Object.keys(loads) as KnownLoadKey[];\n\n  const keyWitchComponent = loadsKeys.find(key => KNOWN_LOADS[key].Component);\n\n  if (keyWitchComponent) {\n    const Component = KNOWN_LOADS[keyWitchComponent]\n      .Component as () => JSX.Element;\n\n    return <Component />;\n  }\n\n  return <GenericLoadPage text=\"Please, stand by...\" />;\n};\n","import { useLayoutEffect } from 'react';\nimport H from 'history';\nimport { useHistory, useLocation } from 'react-router';\nimport { SessionStage } from '../../../shared/types/session/state/stages';\nimport { homePageSlice } from '../redux/slices/home-page';\nimport { useAppDispatch, useTypedSelector } from '../redux/store';\nimport { OBJ_PROCESSOR } from '../../../shared/helpers/processors/obj-processor';\n\nconst usePathParser = (params: {\n  stage: SessionStage;\n  sessionId?: string;\n  path: string;\n}) => {\n  const { stage: sessionStage, path, sessionId } = params;\n\n  const dispatch = useAppDispatch();\n  const errors = useTypedSelector(state => state.errors);\n  const loads = useTypedSelector(state => state.loads);\n\n  if (path.startsWith('/session/')) {\n    const lobbyId = path.split('/')[2];\n    dispatch(homePageSlice.actions.setLobbyURL(lobbyId));\n  }\n\n  if (Object.keys(errors).length > 0) {\n    // console.log(errors);\n    return path !== '/error' ? '/error' : undefined;\n  }\n\n  if (Object.keys(loads).length > 0) {\n    return path !== '/loading' ? '/loading' : undefined;\n  }\n\n  switch (sessionStage) {\n    case 'LOBBY':\n      if (path !== `/session/${sessionId}/lobby`)\n        return `/session/${sessionId}/lobby`;\n\n      return undefined;\n    case 'GAME':\n      if (path !== `/session/${sessionId}/game`)\n        return `/session/${sessionId}/game`;\n\n      return undefined;\n    case 'STATS':\n      if (path !== `/session/${sessionId}/stats`)\n        return `/session/${sessionId}/stats`;\n\n      return undefined;\n    case 'EMPTY':\n      if (path !== `/`) return '/';\n\n      return undefined;\n    default:\n      return undefined;\n  }\n};\n\nexport const useRouterController = (): [boolean, H.Location] => {\n  const location = useLocation();\n  const sessionState = useTypedSelector(state => state.session);\n  const history = useHistory();\n  const path = location.pathname;\n\n  const { stage, sessionId } = sessionState;\n  const requiredPathBySession = usePathParser({\n    stage,\n    sessionId,\n    path,\n  });\n\n  /* eslint-disable react-hooks/exhaustive-deps */\n  useLayoutEffect(() => {\n    // for session\n    if (requiredPathBySession) {\n      history.push(requiredPathBySession);\n\n      return;\n    }\n  }, [requiredPathBySession]);\n  /* eslint-enable react-hooks/exhaustive-deps */\n\n  const newLocation = OBJ_PROCESSOR.deepClone(location);\n  newLocation.pathname = requiredPathBySession || location.pathname;\n\n  // console.log(requiredPathBySession);\n\n  return [!!requiredPathBySession, newLocation];\n};\n","import { ClassNames } from '@emotion/react';\nimport { useRef } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { CSSTransition, SwitchTransition } from 'react-transition-group';\nimport { ErrorsMUX } from '../../containers/ErrorsMUX/ErrorsMUX';\nimport { LoadsMUX } from '../../containers/LoadsMUX/LoadsMUX';\nimport { useRouterController } from '../../hooks/useRouterController';\n\nimport routes from './routesData';\nimport templatesRoutes from './templateRoutesData';\n\nconst TRANSITION_TIME = 500;\n\nconst TRANSITION = `opacity ${TRANSITION_TIME}ms ease-in-out`;\n\nexport const Routes = (): JSX.Element => {\n  const nodeRef = useRef<HTMLDivElement>(null);\n\n  const location = useRouterController()[1];\n\n  return (\n    <ClassNames>\n      {({ css }) => (\n        <SwitchTransition>\n          <CSSTransition\n            key={location.pathname}\n            addEndListener={done => {\n              if (nodeRef.current) {\n                nodeRef.current.addEventListener('transitionend', done, false);\n              } else setTimeout(done, TRANSITION_TIME);\n            }}\n            nodeRef={nodeRef}\n            classNames={{\n              enter: css({ opacity: 0 }),\n              enterActive: css({\n                opacity: 1,\n                transition: TRANSITION,\n              }),\n              exit: css({ opacity: 1 }),\n              exitActive: css({\n                opacity: 0,\n                transition: 'all 0.1s',\n              }),\n            }}\n          >\n            <Switch location={location}>\n              <Route key=\"ErrorsMUX\" path=\"/error\">\n                <div ref={nodeRef}>\n                  <ErrorsMUX />\n                </div>\n              </Route>\n\n              <Route key=\"LoadsMUX\" path=\"/loading\">\n                <div ref={nodeRef}>\n                  <LoadsMUX />\n                </div>\n              </Route>\n\n              {templatesRoutes.map(route => {\n                const { key, path, isExact, Component } = route;\n\n                return (\n                  <Route key={key} path={path} exact={isExact}>\n                    <div ref={nodeRef}>\n                      <Component />\n                    </div>\n                  </Route>\n                );\n              })}\n\n              {routes.map(route => {\n                const { key, path, isExact, Component } = route;\n\n                return (\n                  <Route key={key} path={path} exact={isExact}>\n                    <div ref={nodeRef}>\n                      <Component />\n                    </div>\n                  </Route>\n                );\n              })}\n            </Switch>\n          </CSSTransition>\n        </SwitchTransition>\n      )}\n    </ClassNames>\n  );\n};\n","import React from 'react';\nimport { Flex } from '@chakra-ui/react';\n\nexport const Footer = (): JSX.Element => {\n  return (\n    <Flex bg=\"gray.300\" height=\"100%\">\n      Footer\n    </Flex>\n  );\n};\n","import { extendTheme } from '@chakra-ui/react';\n\nexport const theme = extendTheme({\n  fonts: {\n    handwrite: 'Architects Daughter',\n  },\n});\n","import React, { useState } from 'react';\nimport { Box, Container, Flex } from '@chakra-ui/react';\nimport UserCard from '../../../../components/UserCard/UserCard';\nimport { store, useTypedSelector } from '../../../../redux/store';\nimport {\n  IMemberData,\n  Member,\n} from '../../../../../../shared/types/session/member';\n\nconst ChatView = () => {\n  const sessionData = useTypedSelector(state => state.session);\n  const { msgs } = store.getState().session.chat;\n\n  const [kickedName, setKickedName] = useState('');\n  console.log(kickedName);\n\n  const [kickedId, setKickedId] = useState(0);\n  console.log(kickedId);\n\n  const setModalWindowInfo = (id: number, name: string) => {\n    setKickedId(id);\n\n    setKickedName(name);\n  };\n\n  const isItYou = (member: Member) => {\n    // return sessionData.clientId === member.userSessionPublicId;\n    return true;\n  };\n\n  const setMemberData = (member: Member): IMemberData => {\n    return {\n      member: member,\n      isItYou: isItYou(member),\n      isRoundStarted: false,\n      kickPlayer: setModalWindowInfo,\n    };\n  };\n\n  const convertTime = (dateNow: number) => {\n    const date = new Date(dateNow);\n\n    return (\n      (date.getHours() < 10 ? '0' : '') +\n      date.getHours() +\n      ':' +\n      (date.getMinutes() < 10 ? '0' : '') +\n      date.getMinutes() +\n      ':' +\n      (date.getSeconds() < 10 ? '0' : '') +\n      date.getSeconds()\n    );\n  };\n\n  return (\n    <Container overflow-y=\"scroll\">\n      {Object.entries(msgs).map(([key, msg]) => {\n        return (\n          <Flex key={key}>\n            <Container>\n              <Box>{msg.text}</Box>\n              <Box>{convertTime(msg.time)}</Box>\n            </Container>\n            <UserCard {...setMemberData(sessionData.members[msg.memberId])} />\n          </Flex>\n        );\n      })}\n    </Container>\n  );\n};\n\nexport default ChatView;\n","import React from 'react';\nimport { Wrap, WrapItem, Input, Button } from '@chakra-ui/react';\nimport { useTypedSelector, useAppDispatch } from '../../../../redux/store';\nimport { changeText, clearText } from '../../../../redux/slices/chat';\nimport { sendMessage } from '../../../../redux/slices/session';\n\nconst MessageInputBox = () => {\n  const dispatch = useAppDispatch();\n  const { typedText } = useTypedSelector(state => state.chat);\n  const sessionData = useTypedSelector(state => state.session);\n  const handleClick = () => {\n    if (sessionData.clientId !== undefined) {\n      dispatch(sendMessage(typedText));\n      dispatch(clearText());\n    }\n  };\n\n  return (\n    <Wrap width=\"100%\" justify=\"space-around\">\n      <WrapItem w=\"60%\">\n        <Input\n          w=\"100%\"\n          size=\"md\"\n          value={typedText}\n          onChange={e => dispatch(changeText(e.target.value))}\n        />\n      </WrapItem>\n      <Wrap>\n        <Button size=\"md\" colorScheme=\"facebook\" onClick={handleClick}>\n          Send\n        </Button>\n      </Wrap>\n    </Wrap>\n  );\n};\n\nexport default MessageInputBox;\n","import { Rnd } from 'react-rnd';\nimport { Flex, CloseButton } from '@chakra-ui/react';\nimport ChatView from './components/ChatView/ChatView';\nimport MessageInputBox from './components/MessageInputBox/MessageInputBox';\nimport { useAppDispatch } from '../../redux/store';\nimport { chatStateToggle } from '../../redux/slices/chat';\n\nconst Chat = (): JSX.Element => {\n  const dispatch = useAppDispatch();\n  const style = {\n    border: 'solid 1px #ddd',\n    background: '#f0f0f0',\n  };\n\n  const closeChat = (): void => {\n    dispatch(chatStateToggle());\n  };\n\n  return (\n    <Rnd\n      style={style}\n      default={{\n        x: document.documentElement.clientWidth / 2,\n        y: -document.documentElement.clientHeight,\n        width: document.documentElement.clientWidth / 7,\n        height: document.documentElement.clientHeight / 1.5,\n      }}\n      minWidth={320}\n      minHeight={568}\n      bounds=\"body\"\n    >\n      <Flex\n        w=\"95%\"\n        h=\"95%\"\n        direction=\"column\"\n        align=\"flex-end\"\n        justify=\"space-between\"\n      >\n        <CloseButton onClick={closeChat} />\n        <ChatView />\n        <MessageInputBox />\n      </Flex>\n    </Rnd>\n  );\n};\n\nexport default Chat;\n","import React, { useEffect, useState } from 'react';\nimport { SERVER_ADAPTER } from '../ServerAdapter/ServerAdapter';\n\nexport interface ServerBoundaryProps {\n  children: React.ReactNode;\n}\n\nexport const ServerBoundary = (props: ServerBoundaryProps) => {\n  const [executePreRender, setExecutePreRender] = useState(!FE_ALONE);\n\n  useEffect(() => {\n    if (executePreRender) {\n      SERVER_ADAPTER.connect();\n      setExecutePreRender(false);\n    }\n  }, [executePreRender]);\n\n  return <>{executePreRender ? undefined : props.children}</>;\n};\n","import React from 'react';\nimport '@fontsource/architects-daughter';\n\nimport {\n  ChakraProvider,\n  Grid,\n  ColorModeScript,\n  Portal,\n} from '@chakra-ui/react';\nimport { Header } from '../Header/Header';\nimport { Routes } from '../Routes/Routes';\nimport { Footer } from '../Footer/Footer';\nimport { theme } from '../../theme';\nimport { useTypedSelector } from '../../redux/store';\nimport Chat from '../Chat/—Åhat';\nimport { ServerBoundary } from '../ServerBoundary/ServerBoundary';\n\nexport const App = () => {\n  const { isVisible } = useTypedSelector(state => state.chat);\n\n  return (\n    <>\n      <ColorModeScript />\n      <ChakraProvider theme={theme}>\n        <ServerBoundary>\n          <Grid minH=\"100vh\" templateRows=\"50px 1fr 50px\" alignItems=\"center\">\n            <Header />\n            {isVisible && (\n              <Portal>\n                <Chat />\n              </Portal>\n            )}\n            <Routes />\n            <Footer />\n          </Grid>\n        </ServerBoundary>\n      </ChakraProvider>\n    </>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport { App } from './modules/App/App';\nimport { store } from './redux/store';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter basename={BASENAME}>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}